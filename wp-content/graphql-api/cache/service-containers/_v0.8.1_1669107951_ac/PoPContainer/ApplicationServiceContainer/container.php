<?php

namespace PoPContainer;

use PrefixedByPoP\Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use PrefixedByPoP\Symfony\Component\DependencyInjection\ContainerInterface;
use PrefixedByPoP\Symfony\Component\DependencyInjection\Container;
use PrefixedByPoP\Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use PrefixedByPoP\Symfony\Component\DependencyInjection\Exception\LogicException;
use PrefixedByPoP\Symfony\Component\DependencyInjection\Exception\RuntimeException;
use PrefixedByPoP\Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;
use PrefixedByPoP\Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class ApplicationServiceContainer extends Container
{
    protected $parameters = [];

    public function __construct()
    {
        $this->services = $this->privates = [];
        $this->methodMap = [
            'GraphQLAPI\\GraphQLAPI\\ConditionalOnContext\\Admin\\ConditionalOnContext\\Editor\\SchemaServices\\FieldResolvers\\ListOfCPTEntitiesRootFieldResolver' => 'getListOfCPTEntitiesRootFieldResolverService',
            'GraphQLAPI\\GraphQLAPI\\ConditionalOnContext\\Admin\\Services\\Clients\\AdminGraphiQLWithExplorerClient' => 'getAdminGraphiQLWithExplorerClientService',
            'GraphQLAPI\\GraphQLAPI\\ConditionalOnContext\\Admin\\Services\\EndpointResolvers\\AdminEndpointResolver' => 'getAdminEndpointResolverService',
            'GraphQLAPI\\GraphQLAPI\\ContentProcessors\\MarkdownContentParserInterface' => 'getMarkdownContentParserInterfaceService',
            'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\AccessControlFunctionalityModuleResolver' => 'getAccessControlFunctionalityModuleResolverService',
            'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\ClientFunctionalityModuleResolver' => 'getClientFunctionalityModuleResolverService',
            'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\EndpointFunctionalityModuleResolver' => 'getEndpointFunctionalityModuleResolverService',
            'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\MetaSchemaTypeModuleResolver' => 'getMetaSchemaTypeModuleResolverService',
            'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\MutationSchemaTypeModuleResolver' => 'getMutationSchemaTypeModuleResolverService',
            'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\PerformanceFunctionalityModuleResolver' => 'getPerformanceFunctionalityModuleResolverService',
            'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\PluginManagementFunctionalityModuleResolver' => 'getPluginManagementFunctionalityModuleResolverService',
            'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\SchemaConfigurationFunctionalityModuleResolver' => 'getSchemaConfigurationFunctionalityModuleResolverService',
            'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\SchemaTypeModuleResolver' => 'getSchemaTypeModuleResolverService',
            'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\UserInterfaceFunctionalityModuleResolver' => 'getUserInterfaceFunctionalityModuleResolverService',
            'GraphQLAPI\\GraphQLAPI\\Registries\\AccessControlRuleBlockRegistryInterface' => 'getAccessControlRuleBlockRegistryInterfaceService',
            'GraphQLAPI\\GraphQLAPI\\Registries\\CustomEndpointAnnotatorRegistryInterface' => 'getCustomEndpointAnnotatorRegistryInterfaceService',
            'GraphQLAPI\\GraphQLAPI\\Registries\\CustomEndpointExecuterRegistryInterface' => 'getCustomEndpointExecuterRegistryInterfaceService',
            'GraphQLAPI\\GraphQLAPI\\Registries\\CustomPostTypeRegistryInterface' => 'getCustomPostTypeRegistryInterfaceService',
            'GraphQLAPI\\GraphQLAPI\\Registries\\EndpointBlockRegistryInterface' => 'getEndpointBlockRegistryInterfaceService',
            'GraphQLAPI\\GraphQLAPI\\Registries\\EndpointSchemaConfigurationExecuterRegistryInterface' => 'getEndpointSchemaConfigurationExecuterRegistryInterfaceService',
            'GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface' => 'getModuleRegistryInterfaceService',
            'GraphQLAPI\\GraphQLAPI\\Registries\\ModuleTypeRegistryInterface' => 'getModuleTypeRegistryInterfaceService',
            'GraphQLAPI\\GraphQLAPI\\Registries\\PersistedQueryEndpointAnnotatorRegistryInterface' => 'getPersistedQueryEndpointAnnotatorRegistryInterfaceService',
            'GraphQLAPI\\GraphQLAPI\\Registries\\PersistedQueryEndpointBlockRegistryInterface' => 'getPersistedQueryEndpointBlockRegistryInterfaceService',
            'GraphQLAPI\\GraphQLAPI\\Registries\\PersistedQueryEndpointExecuterRegistryInterface' => 'getPersistedQueryEndpointExecuterRegistryInterfaceService',
            'GraphQLAPI\\GraphQLAPI\\Registries\\PersistedQueryEndpointSchemaConfigurationExecuterRegistryInterface' => 'getPersistedQueryEndpointSchemaConfigurationExecuterRegistryInterfaceService',
            'GraphQLAPI\\GraphQLAPI\\Registries\\SchemaConfigBlockRegistryInterface' => 'getSchemaConfigBlockRegistryInterfaceService',
            'GraphQLAPI\\GraphQLAPI\\Registries\\UserAuthorizationSchemeRegistryInterface' => 'getUserAuthorizationSchemeRegistryInterfaceService',
            'GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface' => 'getUserAuthorizationInterfaceService',
            'GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationSchemes\\ManageOptionsUserAuthorizationScheme' => 'getManageOptionsUserAuthorizationSchemeService',
            'GraphQLAPI\\GraphQLAPI\\Services\\BlockAccessors\\PersistedQueryEndpointAPIHierarchyBlockAccessor' => 'getPersistedQueryEndpointAPIHierarchyBlockAccessorService',
            'GraphQLAPI\\GraphQLAPI\\Services\\BlockAccessors\\PersistedQueryEndpointGraphiQLBlockAccessor' => 'getPersistedQueryEndpointGraphiQLBlockAccessorService',
            'GraphQLAPI\\GraphQLAPI\\Services\\BlockCategories\\AccessControlBlockCategory' => 'getAccessControlBlockCategoryService',
            'GraphQLAPI\\GraphQLAPI\\Services\\BlockCategories\\CacheControlBlockCategory' => 'getCacheControlBlockCategoryService',
            'GraphQLAPI\\GraphQLAPI\\Services\\BlockCategories\\CustomEndpointBlockCategory' => 'getCustomEndpointBlockCategoryService',
            'GraphQLAPI\\GraphQLAPI\\Services\\BlockCategories\\EndpointBlockCategory' => 'getEndpointBlockCategoryService',
            'GraphQLAPI\\GraphQLAPI\\Services\\BlockCategories\\PersistedQueryEndpointBlockCategory' => 'getPersistedQueryEndpointBlockCategoryService',
            'GraphQLAPI\\GraphQLAPI\\Services\\BlockCategories\\SchemaConfigurationBlockCategory' => 'getSchemaConfigurationBlockCategoryService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\AccessControlBlock' => 'getAccessControlBlockService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\AccessControlRuleBlocks\\AccessControlDisableAccessBlock' => 'getAccessControlDisableAccessBlockService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\AccessControlRuleBlocks\\AccessControlUserCapabilitiesBlock' => 'getAccessControlUserCapabilitiesBlockService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\AccessControlRuleBlocks\\AccessControlUserRolesBlock' => 'getAccessControlUserRolesBlockService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\AccessControlRuleBlocks\\AccessControlUserStateBlock' => 'getAccessControlUserStateBlockService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\CacheControlBlock' => 'getCacheControlBlockService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\CustomEndpointOptionsBlock' => 'getCustomEndpointOptionsBlockService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\EndpointGraphiQLBlock' => 'getEndpointGraphiQLBlockService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\EndpointSchemaConfigurationBlock' => 'getEndpointSchemaConfigurationBlockService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\EndpointVoyagerBlock' => 'getEndpointVoyagerBlockService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\PersistedQueryEndpointAPIHierarchyBlock' => 'getPersistedQueryEndpointAPIHierarchyBlockService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\PersistedQueryEndpointGraphiQLBlock' => 'getPersistedQueryEndpointGraphiQLBlockService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\PersistedQueryEndpointOptionsBlock' => 'getPersistedQueryEndpointOptionsBlockService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigAccessControlListBlock' => 'getSchemaConfigAccessControlListBlockService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigAdminSchemaBlock' => 'getSchemaConfigAdminSchemaBlockService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigCacheControlListBlock' => 'getSchemaConfigCacheControlListBlockService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigMutationSchemeBlock' => 'getSchemaConfigMutationSchemeBlockService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigNamespacingBlock' => 'getSchemaConfigNamespacingBlockService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigSchemaModeBlock' => 'getSchemaConfigSchemaModeBlockService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Clients\\CustomEndpointGraphiQLClient' => 'getCustomEndpointGraphiQLClientService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Clients\\CustomEndpointVoyagerClient' => 'getCustomEndpointVoyagerClientService',
            'GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLAccessControlListCustomPostType' => 'getGraphQLAccessControlListCustomPostTypeService',
            'GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLCacheControlListCustomPostType' => 'getGraphQLCacheControlListCustomPostTypeService',
            'GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLCustomEndpointCustomPostType' => 'getGraphQLCustomEndpointCustomPostTypeService',
            'GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLPersistedQueryEndpointCustomPostType' => 'getGraphQLPersistedQueryEndpointCustomPostTypeService',
            'GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLSchemaConfigurationCustomPostType' => 'getGraphQLSchemaConfigurationCustomPostTypeService',
            'GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\Hooks' => 'getHooksService',
            'GraphQLAPI\\GraphQLAPI\\Services\\EditorScripts\\EndpointComponentEditorScript' => 'getEndpointComponentEditorScriptService',
            'GraphQLAPI\\GraphQLAPI\\Services\\EditorScripts\\PersistedQueryEndpointComponentEditorScript' => 'getPersistedQueryEndpointComponentEditorScriptService',
            'GraphQLAPI\\GraphQLAPI\\Services\\EndpointAnnotators\\GraphiQLClientEndpointAnnotator' => 'getGraphiQLClientEndpointAnnotatorService',
            'GraphQLAPI\\GraphQLAPI\\Services\\EndpointAnnotators\\VoyagerClientEndpointAnnotator' => 'getVoyagerClientEndpointAnnotatorService',
            'GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\CustomEndpointGraphQLQueryResolutionEndpointExecuter' => 'getCustomEndpointGraphQLQueryResolutionEndpointExecuterService',
            'GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\GraphiQLClientEndpointExecuter' => 'getGraphiQLClientEndpointExecuterService',
            'GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\PersistedQueryEndpointGraphQLQueryResolutionEndpointExecuter' => 'getPersistedQueryEndpointGraphQLQueryResolutionEndpointExecuterService',
            'GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\ViewCustomEndpointSourceEndpointExecuter' => 'getViewCustomEndpointSourceEndpointExecuterService',
            'GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\ViewPersistedQueryEndpointSourceEndpointExecuter' => 'getViewPersistedQueryEndpointSourceEndpointExecuterService',
            'GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\VoyagerClientEndpointExecuter' => 'getVoyagerClientEndpointExecuterService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\BlockHelpers' => 'getBlockHelpersService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\BlockRenderingHelpers' => 'getBlockRenderingHelpersService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\CPTUtils' => 'getCPTUtilsService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\EditorHelpers' => 'getEditorHelpersService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\EndpointHelpers' => 'getEndpointHelpersService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\GeneralUtils' => 'getGeneralUtilsService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\GraphQLQueryPostTypeHelpers' => 'getGraphQLQueryPostTypeHelpersService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\LocaleHelper' => 'getLocaleHelperService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\MenuPageHelper' => 'getMenuPageHelperService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\URLParamHelpers' => 'getURLParamHelpersService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Hooks\\ApplicationStateHookSet' => 'getApplicationStateHookSetService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Hooks\\QueryHookSet' => 'getQueryHookSetService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Hooks\\VarsHookSet' => 'getVarsHookSetService',
            'GraphQLAPI\\GraphQLAPI\\Services\\MenuPageAttachers\\BottomMenuPageAttacher' => 'getBottomMenuPageAttacherService',
            'GraphQLAPI\\GraphQLAPI\\Services\\MenuPageAttachers\\TopMenuPageAttacher' => 'getTopMenuPageAttacherService',
            'GraphQLAPI\\GraphQLAPI\\Services\\MenuPages\\AboutMenuPage' => 'getAboutMenuPageService',
            'GraphQLAPI\\GraphQLAPI\\Services\\MenuPages\\GraphQLVoyagerMenuPage' => 'getGraphQLVoyagerMenuPageService',
            'GraphQLAPI\\GraphQLAPI\\Services\\MenuPages\\GraphiQLMenuPage' => 'getGraphiQLMenuPageService',
            'GraphQLAPI\\GraphQLAPI\\Services\\MenuPages\\ModuleDocumentationMenuPage' => 'getModuleDocumentationMenuPageService',
            'GraphQLAPI\\GraphQLAPI\\Services\\MenuPages\\ModulesMenuPage' => 'getModulesMenuPageService',
            'GraphQLAPI\\GraphQLAPI\\Services\\MenuPages\\ReleaseNotesAboutMenuPage' => 'getReleaseNotesAboutMenuPageService',
            'GraphQLAPI\\GraphQLAPI\\Services\\MenuPages\\SettingsMenuPage' => 'getSettingsMenuPageService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Menus\\PluginMenu' => 'getPluginMenuService',
            'GraphQLAPI\\GraphQLAPI\\Services\\ModuleTypeResolvers\\ModuleTypeResolver' => 'getModuleTypeResolverService',
            'GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurationExecuters\\AccessControlSchemaConfigurationExecuter' => 'getAccessControlSchemaConfigurationExecuterService',
            'GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurationExecuters\\AdminSchemaSchemaConfigurationExecuter' => 'getAdminSchemaSchemaConfigurationExecuterService',
            'GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurationExecuters\\CacheControlSchemaConfigurationExecuter' => 'getCacheControlSchemaConfigurationExecuterService',
            'GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurationExecuters\\DefaultSchemaModeSchemaConfigurationExecuter' => 'getDefaultSchemaModeSchemaConfigurationExecuterService',
            'GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurationExecuters\\MutationSchemeSchemaConfigurationExecuter' => 'getMutationSchemeSchemaConfigurationExecuterService',
            'GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurationExecuters\\NamespacingSchemaConfigurationExecuter' => 'getNamespacingSchemaConfigurationExecuterService',
            'GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfiguratorExecuters\\EditingPersistedQueryEndpointSchemaConfiguratorExecuter' => 'getEditingPersistedQueryEndpointSchemaConfiguratorExecuterService',
            'GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfiguratorExecuters\\EndpointSchemaConfiguratorExecuter' => 'getEndpointSchemaConfiguratorExecuterService',
            'GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfiguratorExecuters\\PersistedQueryEndpointSchemaConfiguratorExecuter' => 'getPersistedQueryEndpointSchemaConfiguratorExecuterService',
            'GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurators\\AccessControlGraphQLQueryConfigurator' => 'getAccessControlGraphQLQueryConfiguratorService',
            'GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurators\\CacheControlGraphQLQueryConfigurator' => 'getCacheControlGraphQLQueryConfiguratorService',
            'GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurators\\EndpointSchemaConfigurator' => 'getEndpointSchemaConfiguratorService',
            'GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurators\\PersistedQueryEndpointSchemaConfigurator' => 'getPersistedQueryEndpointSchemaConfiguratorService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Taxonomies\\GraphQLQueryTaxonomy' => 'getGraphQLQueryTaxonomyService',
            'GraphQLAPI\\MarkdownConvertor\\MarkdownConvertorInterface' => 'getMarkdownConvertorInterfaceService',
            'GraphQLByPoP\\GraphQLClientsForWP\\Clients\\GraphiQLClient' => 'getGraphiQLClientService',
            'GraphQLByPoP\\GraphQLClientsForWP\\Clients\\VoyagerClient' => 'getVoyagerClientService',
            'GraphQLByPoP\\GraphQLEndpointForWP\\EndpointHandlers\\GraphQLEndpointHandler' => 'getGraphQLEndpointHandlerService',
            'GraphQLByPoP\\GraphQLQuery\\Schema\\GraphQLQueryConvertorInterface' => 'getGraphQLQueryConvertorInterfaceService',
            'GraphQLByPoP\\GraphQLRequest\\Execution\\QueryRetrieverInterface' => 'getQueryRetrieverInterfaceService',
            'GraphQLByPoP\\GraphQLRequest\\Hooks\\VarsHookSet' => 'getVarsHookSet2Service',
            'GraphQLByPoP\\GraphQLRequest\\PersistedQueries\\GraphQLPersistedQueryManagerInterface' => 'getGraphQLPersistedQueryManagerInterfaceService',
            'GraphQLByPoP\\GraphQLServer\\ConditionalOnComponent\\CacheControl\\ConditionalOnComponent\\AccessControl\\ConditionalOnContext\\PrivateSchema\\SchemaServices\\DirectiveResolvers\\SchemaNoCacheCacheControlDirectiveResolver' => 'getSchemaNoCacheCacheControlDirectiveResolverService',
            'GraphQLByPoP\\GraphQLServer\\Enums\\DirectiveLocationEnum' => 'getDirectiveLocationEnumService',
            'GraphQLByPoP\\GraphQLServer\\Enums\\DirectiveTypeEnum' => 'getDirectiveTypeEnumService',
            'GraphQLByPoP\\GraphQLServer\\Enums\\TypeKindEnum' => 'getTypeKindEnumService',
            'GraphQLByPoP\\GraphQLServer\\FieldResolvers\\DirectiveFieldResolver' => 'getDirectiveFieldResolverService',
            'GraphQLByPoP\\GraphQLServer\\FieldResolvers\\EmbeddableFields\\EchoOperatorGlobalFieldResolver' => 'getEchoOperatorGlobalFieldResolverService',
            'GraphQLByPoP\\GraphQLServer\\FieldResolvers\\EnumValueFieldResolver' => 'getEnumValueFieldResolverService',
            'GraphQLByPoP\\GraphQLServer\\FieldResolvers\\Extensions\\FilterSystemDirectiveSchemaFieldResolver' => 'getFilterSystemDirectiveSchemaFieldResolverService',
            'GraphQLByPoP\\GraphQLServer\\FieldResolvers\\Extensions\\NamespacedTypeFieldResolver' => 'getNamespacedTypeFieldResolverService',
            'GraphQLByPoP\\GraphQLServer\\FieldResolvers\\FieldFieldResolver' => 'getFieldFieldResolverService',
            'GraphQLByPoP\\GraphQLServer\\FieldResolvers\\GlobalFieldResolver' => 'getGlobalFieldResolverService',
            'GraphQLByPoP\\GraphQLServer\\FieldResolvers\\InputValueFieldResolver' => 'getInputValueFieldResolverService',
            'GraphQLByPoP\\GraphQLServer\\FieldResolvers\\RegisterQueryAndMutationRootsRootFieldResolver' => 'getRegisterQueryAndMutationRootsRootFieldResolverService',
            'GraphQLByPoP\\GraphQLServer\\FieldResolvers\\RootFieldResolver' => 'getRootFieldResolverService',
            'GraphQLByPoP\\GraphQLServer\\FieldResolvers\\SchemaFieldResolver' => 'getSchemaFieldResolverService',
            'GraphQLByPoP\\GraphQLServer\\FieldResolvers\\TypeFieldResolver' => 'getTypeFieldResolverService',
            'GraphQLByPoP\\GraphQLServer\\Hooks\\DBEntriesHookSet' => 'getDBEntriesHookSetService',
            'GraphQLByPoP\\GraphQLServer\\Hooks\\NestedMutationHookSet' => 'getNestedMutationHookSetService',
            'GraphQLByPoP\\GraphQLServer\\Hooks\\SchemaCacheHookSet' => 'getSchemaCacheHookSetService',
            'GraphQLByPoP\\GraphQLServer\\Hooks\\VarsHookSet' => 'getVarsHookSet3Service',
            'GraphQLByPoP\\GraphQLServer\\ModuleProcessors\\RootRelationalFieldDataloadModuleProcessor' => 'getRootRelationalFieldDataloadModuleProcessorService',
            'GraphQLByPoP\\GraphQLServer\\ObjectModels\\MutationRoot' => 'getMutationRootService',
            'GraphQLByPoP\\GraphQLServer\\ObjectModels\\QueryRoot' => 'getQueryRootService',
            'GraphQLByPoP\\GraphQLServer\\Registries\\SchemaDefinitionReferenceRegistryInterface' => 'getSchemaDefinitionReferenceRegistryInterfaceService',
            'GraphQLByPoP\\GraphQLServer\\RouteModuleProcessors\\EntryRouteModuleProcessor' => 'getEntryRouteModuleProcessorService',
            'GraphQLByPoP\\GraphQLServer\\Schema\\GraphQLSchemaDefinitionServiceInterface' => 'getGraphQLSchemaDefinitionServiceInterfaceService',
            'GraphQLByPoP\\GraphQLServer\\TypeDataLoaders\\MutationRootTypeDataLoader' => 'getMutationRootTypeDataLoaderService',
            'GraphQLByPoP\\GraphQLServer\\TypeDataLoaders\\QueryRootTypeDataLoader' => 'getQueryRootTypeDataLoaderService',
            'GraphQLByPoP\\GraphQLServer\\TypeDataLoaders\\SchemaDefinitionReferenceTypeDataLoader' => 'getSchemaDefinitionReferenceTypeDataLoaderService',
            'GraphQLByPoP\\GraphQLServer\\TypeDataLoaders\\SchemaTypeDataLoader' => 'getSchemaTypeDataLoaderService',
            'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\DirectiveTypeResolver' => 'getDirectiveTypeResolverService',
            'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\EnumValueTypeResolver' => 'getEnumValueTypeResolverService',
            'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\FieldTypeResolver' => 'getFieldTypeResolverService',
            'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\InputValueTypeResolver' => 'getInputValueTypeResolverService',
            'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\MutationRootTypeResolver' => 'getMutationRootTypeResolverService',
            'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\QueryRootTypeResolver' => 'getQueryRootTypeResolverService',
            'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\SchemaTypeResolver' => 'getSchemaTypeResolverService',
            'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\TypeTypeResolver' => 'getTypeTypeResolverService',
            'PoPSchema\\CategoriesWP\\Hooks\\RoutingStateHookSet' => 'getRoutingStateHookSetService',
            'PoPSchema\\CategoriesWP\\LooseContracts\\LooseContractResolutionSet' => 'getLooseContractResolutionSetService',
            'PoPSchema\\Categories\\Hooks\\VarsHookSet' => 'getVarsHookSet4Service',
            'PoPSchema\\Categories\\LooseContracts\\LooseContractSet' => 'getLooseContractSetService',
            'PoPSchema\\Categories\\ModuleProcessors\\FilterInnerModuleProcessor' => 'getFilterInnerModuleProcessorService',
            'PoPSchema\\CommentMetaWP\\Hooks\\QueryHookSet' => 'getQueryHookSet2Service',
            'PoPSchema\\CommentMeta\\FieldResolvers\\CommentFieldResolver' => 'getCommentFieldResolverService',
            'PoPSchema\\CommentMeta\\TypeAPIs\\CommentMetaTypeAPIInterface' => 'getCommentMetaTypeAPIInterfaceService',
            'PoPSchema\\CommentMutations\\FieldResolvers\\CommentFieldResolver' => 'getCommentFieldResolver2Service',
            'PoPSchema\\CommentMutations\\FieldResolvers\\CustomPostFieldResolver' => 'getCustomPostFieldResolverService',
            'PoPSchema\\CommentMutations\\FieldResolvers\\RootFieldResolver' => 'getRootFieldResolver2Service',
            'PoPSchema\\CommentMutations\\MutationResolvers\\AddCommentToCustomPostMutationResolver' => 'getAddCommentToCustomPostMutationResolverService',
            'PoPSchema\\CommentMutations\\MutationResolvers\\MutationInputProperties' => 'getMutationInputPropertiesService',
            'PoPSchema\\CommentMutations\\TypeAPIs\\CommentTypeMutationAPIInterface' => 'getCommentTypeMutationAPIInterfaceService',
            'PoPSchema\\CommentsWP\\LooseContracts\\LooseContractResolutionSet' => 'getLooseContractResolutionSet2Service',
            'PoPSchema\\Comments\\ConditionalOnComponent\\Users\\FieldResolvers\\CommentFieldResolver' => 'getCommentFieldResolver3Service',
            'PoPSchema\\Comments\\ConditionalOnComponent\\Users\\FieldResolvers\\CommentUserFieldResolver' => 'getCommentUserFieldResolverService',
            'PoPSchema\\Comments\\ConditionalOnComponent\\Users\\TypeAPIs\\CommentTypeAPIInterface' => 'getCommentTypeAPIInterfaceService',
            'PoPSchema\\Comments\\FieldInterfaceResolvers\\CommentableFieldInterfaceResolver' => 'getCommentableFieldInterfaceResolverService',
            'PoPSchema\\Comments\\FieldResolvers\\CommentFieldResolver' => 'getCommentFieldResolver4Service',
            'PoPSchema\\Comments\\FieldResolvers\\CustomPostFieldResolver' => 'getCustomPostFieldResolver2Service',
            'PoPSchema\\Comments\\Hooks\\WhitelistParamHookSet' => 'getWhitelistParamHookSetService',
            'PoPSchema\\Comments\\LooseContracts\\LooseContractSet' => 'getLooseContractSet2Service',
            'PoPSchema\\Comments\\ModuleProcessors\\CommentFilterInnerModuleProcessor' => 'getCommentFilterInnerModuleProcessorService',
            'PoPSchema\\Comments\\ModuleProcessors\\CommentRelationalFieldDataloadModuleProcessor' => 'getCommentRelationalFieldDataloadModuleProcessorService',
            'PoPSchema\\Comments\\TypeAPIs\\CommentTypeAPIInterface' => 'getCommentTypeAPIInterface2Service',
            'PoPSchema\\Comments\\TypeDataLoaders\\CommentTypeDataLoader' => 'getCommentTypeDataLoaderService',
            'PoPSchema\\Comments\\TypeResolvers\\CommentTypeResolver' => 'getCommentTypeResolverService',
            'PoPSchema\\CustomPostMediaMutations\\FieldResolvers\\CustomPostFieldResolver' => 'getCustomPostFieldResolver3Service',
            'PoPSchema\\CustomPostMediaMutations\\FieldResolvers\\RootFieldResolver' => 'getRootFieldResolver3Service',
            'PoPSchema\\CustomPostMediaMutations\\Hooks\\CustomPostMutationResolverHookSet' => 'getCustomPostMutationResolverHookSetService',
            'PoPSchema\\CustomPostMediaMutations\\MutationResolvers\\MutationInputProperties' => 'getMutationInputProperties2Service',
            'PoPSchema\\CustomPostMediaMutations\\MutationResolvers\\RemoveFeaturedImageOnCustomPostMutationResolver' => 'getRemoveFeaturedImageOnCustomPostMutationResolverService',
            'PoPSchema\\CustomPostMediaMutations\\MutationResolvers\\SetFeaturedImageOnCustomPostMutationResolver' => 'getSetFeaturedImageOnCustomPostMutationResolverService',
            'PoPSchema\\CustomPostMediaMutations\\TypeAPIs\\CustomPostMediaTypeMutationAPIInterface' => 'getCustomPostMediaTypeMutationAPIInterfaceService',
            'PoPSchema\\CustomPostMedia\\FieldInterfaceResolvers\\SupportingFeaturedImageFieldInterfaceResolver' => 'getSupportingFeaturedImageFieldInterfaceResolverService',
            'PoPSchema\\CustomPostMedia\\FieldResolvers\\CustomPostFieldResolver' => 'getCustomPostFieldResolver4Service',
            'PoPSchema\\CustomPostMedia\\TypeAPIs\\CustomPostMediaTypeAPIInterface' => 'getCustomPostMediaTypeAPIInterfaceService',
            'PoPSchema\\CustomPostMetaWP\\Hooks\\QueryHookSet' => 'getQueryHookSet3Service',
            'PoPSchema\\CustomPostMeta\\FieldResolvers\\CustomPostFieldResolver' => 'getCustomPostFieldResolver5Service',
            'PoPSchema\\CustomPostMeta\\TypeAPIs\\CustomPostMetaTypeAPIInterface' => 'getCustomPostMetaTypeAPIInterfaceService',
            'PoPSchema\\CustomPostMutationsWP\\LooseContracts\\LooseContractResolutionSet' => 'getLooseContractResolutionSet3Service',
            'PoPSchema\\CustomPostMutations\\LooseContracts\\LooseContractSet' => 'getLooseContractSet3Service',
            'PoPSchema\\CustomPostMutations\\TypeAPIs\\CustomPostTypeMutationAPIInterface' => 'getCustomPostTypeMutationAPIInterfaceService',
            'PoPSchema\\CustomPostsWP\\Hooks\\RoutingStateHookSet' => 'getRoutingStateHookSet2Service',
            'PoPSchema\\CustomPostsWP\\LooseContracts\\LooseContractResolutionSet' => 'getLooseContractResolutionSet4Service',
            'PoPSchema\\CustomPosts\\Enums\\CustomPostContentFormatEnum' => 'getCustomPostContentFormatEnumService',
            'PoPSchema\\CustomPosts\\Enums\\CustomPostStatusEnum' => 'getCustomPostStatusEnumService',
            'PoPSchema\\CustomPosts\\FieldInterfaceResolvers\\IsCustomPostFieldInterfaceResolver' => 'getIsCustomPostFieldInterfaceResolverService',
            'PoPSchema\\CustomPosts\\FieldResolvers\\CustomPostFieldResolver' => 'getCustomPostFieldResolver6Service',
            'PoPSchema\\CustomPosts\\FieldResolvers\\RootCustomPostListFieldResolver' => 'getRootCustomPostListFieldResolverService',
            'PoPSchema\\CustomPosts\\FilterInputProcessors\\FilterInputProcessor' => 'getFilterInputProcessorService',
            'PoPSchema\\CustomPosts\\Hooks\\VarsHookSet' => 'getVarsHookSet5Service',
            'PoPSchema\\CustomPosts\\LooseContracts\\LooseContractSet' => 'getLooseContractSet4Service',
            'PoPSchema\\CustomPosts\\ModuleProcessors\\CustomPostFilterInnerModuleProcessor' => 'getCustomPostFilterInnerModuleProcessorService',
            'PoPSchema\\CustomPosts\\ModuleProcessors\\CustomPostRelationalFieldDataloadModuleProcessor' => 'getCustomPostRelationalFieldDataloadModuleProcessorService',
            'PoPSchema\\CustomPosts\\ModuleProcessors\\FormInputs\\FilterInputModuleProcessor' => 'getFilterInputModuleProcessorService',
            'PoPSchema\\CustomPosts\\ModuleProcessors\\FormInputs\\FilterMultipleInputModuleProcessor' => 'getFilterMultipleInputModuleProcessorService',
            'PoPSchema\\CustomPosts\\TypeAPIs\\CustomPostTypeAPIInterface' => 'getCustomPostTypeAPIInterfaceService',
            'PoPSchema\\CustomPosts\\TypeDataLoaders\\CustomPostTypeDataLoader' => 'getCustomPostTypeDataLoaderService',
            'PoPSchema\\CustomPosts\\TypeDataLoaders\\CustomPostUnionTypeDataLoader' => 'getCustomPostUnionTypeDataLoaderService',
            'PoPSchema\\CustomPosts\\TypeResolvers\\CustomPostTypeResolver' => 'getCustomPostTypeResolverService',
            'PoPSchema\\CustomPosts\\TypeResolvers\\CustomPostUnionTypeResolver' => 'getCustomPostUnionTypeResolverService',
            'PoPSchema\\GenericCustomPosts\\FieldResolvers\\RootGenericCustomPostFieldResolver' => 'getRootGenericCustomPostFieldResolverService',
            'PoPSchema\\GenericCustomPosts\\ModuleProcessors\\GenericCustomPostFilterInnerModuleProcessor' => 'getGenericCustomPostFilterInnerModuleProcessorService',
            'PoPSchema\\GenericCustomPosts\\ModuleProcessors\\GenericCustomPostRelationalFieldDataloadModuleProcessor' => 'getGenericCustomPostRelationalFieldDataloadModuleProcessorService',
            'PoPSchema\\GenericCustomPosts\\TypeDataLoaders\\GenericCustomPostTypeDataLoader' => 'getGenericCustomPostTypeDataLoaderService',
            'PoPSchema\\GenericCustomPosts\\TypeResolvers\\GenericCustomPostTypeResolver' => 'getGenericCustomPostTypeResolverService',
            'PoPSchema\\Media\\ConditionalOnComponent\\Users\\FieldResolvers\\MediaUserFieldResolver' => 'getMediaUserFieldResolverService',
            'PoPSchema\\Media\\ConditionalOnComponent\\Users\\TypeAPIs\\MediaTypeAPIInterface' => 'getMediaTypeAPIInterfaceService',
            'PoPSchema\\Media\\Enums\\MediaDeviceEnum' => 'getMediaDeviceEnumService',
            'PoPSchema\\Media\\FieldResolvers\\MediaFieldResolver' => 'getMediaFieldResolverService',
            'PoPSchema\\Media\\FieldResolvers\\RootFieldResolver' => 'getRootFieldResolver4Service',
            'PoPSchema\\Media\\TypeAPIs\\MediaTypeAPIInterface' => 'getMediaTypeAPIInterface2Service',
            'PoPSchema\\Media\\TypeDataLoaders\\MediaTypeDataLoader' => 'getMediaTypeDataLoaderService',
            'PoPSchema\\Media\\TypeResolvers\\MediaTypeResolver' => 'getMediaTypeResolverService',
            'PoPSchema\\Menus\\FieldResolvers\\MenuFieldResolver' => 'getMenuFieldResolverService',
            'PoPSchema\\Menus\\FieldResolvers\\MenuItemFieldResolver' => 'getMenuItemFieldResolverService',
            'PoPSchema\\Menus\\FieldResolvers\\RootFieldResolver' => 'getRootFieldResolver5Service',
            'PoPSchema\\Menus\\TypeAPIs\\MenuItemTypeAPIInterface' => 'getMenuItemTypeAPIInterfaceService',
            'PoPSchema\\Menus\\TypeAPIs\\MenuTypeAPIInterface' => 'getMenuTypeAPIInterfaceService',
            'PoPSchema\\Menus\\TypeDataLoaders\\MenuItemTypeDataLoader' => 'getMenuItemTypeDataLoaderService',
            'PoPSchema\\Menus\\TypeDataLoaders\\MenuTypeDataLoader' => 'getMenuTypeDataLoaderService',
            'PoPSchema\\Menus\\TypeResolvers\\MenuItemTypeResolver' => 'getMenuItemTypeResolverService',
            'PoPSchema\\Menus\\TypeResolvers\\MenuTypeResolver' => 'getMenuTypeResolverService',
            'PoPSchema\\Meta\\FieldInterfaceResolvers\\WithMetaFieldInterfaceResolver' => 'getWithMetaFieldInterfaceResolverService',
            'PoPSchema\\PagesWP\\Hooks\\RoutingStateHookSet' => 'getRoutingStateHookSet3Service',
            'PoPSchema\\PagesWP\\LooseContracts\\LooseContractResolutionSet' => 'getLooseContractResolutionSet5Service',
            'PoPSchema\\Pages\\ConditionalOnComponent\\API\\RouteModuleProcessors\\EntryRouteModuleProcessor' => 'getEntryRouteModuleProcessor2Service',
            'PoPSchema\\Pages\\FieldResolvers\\RootPageFieldResolver' => 'getRootPageFieldResolverService',
            'PoPSchema\\Pages\\Hooks\\VarsHookSet' => 'getVarsHookSet6Service',
            'PoPSchema\\Pages\\LooseContracts\\LooseContractSet' => 'getLooseContractSet5Service',
            'PoPSchema\\Pages\\ModuleProcessors\\FieldDataloadModuleProcessor' => 'getFieldDataloadModuleProcessorService',
            'PoPSchema\\Pages\\TypeAPIs\\PageTypeAPIInterface' => 'getPageTypeAPIInterfaceService',
            'PoPSchema\\Pages\\TypeDataLoaders\\PageTypeDataLoader' => 'getPageTypeDataLoaderService',
            'PoPSchema\\Pages\\TypeResolvers\\PageTypeResolver' => 'getPageTypeResolverService',
            'PoPSchema\\PostCategoriesWP\\Hooks\\PostCategoryQueryHookSet' => 'getPostCategoryQueryHookSetService',
            'PoPSchema\\PostCategories\\ConditionalOnComponent\\API\\RouteModuleProcessors\\EntryRouteModuleProcessor' => 'getEntryRouteModuleProcessor3Service',
            'PoPSchema\\PostCategories\\FieldResolvers\\CustomPostListPostCategoryFieldResolver' => 'getCustomPostListPostCategoryFieldResolverService',
            'PoPSchema\\PostCategories\\FieldResolvers\\PostCategoryFieldResolver' => 'getPostCategoryFieldResolverService',
            'PoPSchema\\PostCategories\\FieldResolvers\\PostCategoryListFieldResolver' => 'getPostCategoryListFieldResolverService',
            'PoPSchema\\PostCategories\\FieldResolvers\\PostQueryableFieldResolver' => 'getPostQueryableFieldResolverService',
            'PoPSchema\\PostCategories\\FieldResolvers\\RootPostCategoryFieldResolver' => 'getRootPostCategoryFieldResolverService',
            'PoPSchema\\PostCategories\\Hooks\\ModelInstanceHookSet' => 'getModelInstanceHookSetService',
            'PoPSchema\\PostCategories\\Hooks\\RoutingHookSet' => 'getRoutingHookSetService',
            'PoPSchema\\PostCategories\\ModuleProcessors\\CategoryPostFieldDataloadModuleProcessor' => 'getCategoryPostFieldDataloadModuleProcessorService',
            'PoPSchema\\PostCategories\\ModuleProcessors\\PostCategoryFieldDataloadModuleProcessor' => 'getPostCategoryFieldDataloadModuleProcessorService',
            'PoPSchema\\PostCategories\\TypeAPIs\\PostCategoryTypeAPIInterface' => 'getPostCategoryTypeAPIInterfaceService',
            'PoPSchema\\PostCategories\\TypeDataLoaders\\PostCategoryTypeDataLoader' => 'getPostCategoryTypeDataLoaderService',
            'PoPSchema\\PostCategories\\TypeResolvers\\PostCategoryTypeResolver' => 'getPostCategoryTypeResolverService',
            'PoPSchema\\PostCategoryMutations\\FieldResolvers\\PostFieldResolver' => 'getPostFieldResolverService',
            'PoPSchema\\PostCategoryMutations\\FieldResolvers\\RootFieldResolver' => 'getRootFieldResolver6Service',
            'PoPSchema\\PostCategoryMutations\\Hooks\\PostMutationResolverHookSet' => 'getPostMutationResolverHookSetService',
            'PoPSchema\\PostCategoryMutations\\MutationResolvers\\SetCategoriesOnPostMutationResolver' => 'getSetCategoriesOnPostMutationResolverService',
            'PoPSchema\\PostCategoryMutations\\TypeAPIs\\PostCategoryTypeMutationAPIInterface' => 'getPostCategoryTypeMutationAPIInterfaceService',
            'PoPSchema\\PostMutations\\FieldResolvers\\PostFieldResolver' => 'getPostFieldResolver2Service',
            'PoPSchema\\PostMutations\\FieldResolvers\\RootFieldResolver' => 'getRootFieldResolver7Service',
            'PoPSchema\\PostMutations\\FieldResolvers\\RootQueryableFieldResolver' => 'getRootQueryableFieldResolverService',
            'PoPSchema\\PostMutations\\ModuleProcessors\\FieldDataloadModuleProcessor' => 'getFieldDataloadModuleProcessor2Service',
            'PoPSchema\\PostMutations\\ModuleProcessors\\FilterInnerModuleProcessor' => 'getFilterInnerModuleProcessor2Service',
            'PoPSchema\\PostMutations\\MutationResolvers\\CreatePostMutationResolver' => 'getCreatePostMutationResolverService',
            'PoPSchema\\PostMutations\\MutationResolvers\\UpdatePostMutationResolver' => 'getUpdatePostMutationResolverService',
            'PoPSchema\\PostTagMutations\\FieldResolvers\\PostFieldResolver' => 'getPostFieldResolver3Service',
            'PoPSchema\\PostTagMutations\\FieldResolvers\\RootFieldResolver' => 'getRootFieldResolver8Service',
            'PoPSchema\\PostTagMutations\\Hooks\\PostMutationResolverHookSet' => 'getPostMutationResolverHookSet2Service',
            'PoPSchema\\PostTagMutations\\MutationResolvers\\SetTagsOnPostMutationResolver' => 'getSetTagsOnPostMutationResolverService',
            'PoPSchema\\PostTagMutations\\TypeAPIs\\PostTagTypeMutationAPIInterface' => 'getPostTagTypeMutationAPIInterfaceService',
            'PoPSchema\\PostTagsWP\\Hooks\\PostTagQueryHookSet' => 'getPostTagQueryHookSetService',
            'PoPSchema\\PostTags\\ConditionalOnComponent\\API\\RouteModuleProcessors\\EntryRouteModuleProcessor' => 'getEntryRouteModuleProcessor4Service',
            'PoPSchema\\PostTags\\FieldResolvers\\CustomPostListPostTagFieldResolver' => 'getCustomPostListPostTagFieldResolverService',
            'PoPSchema\\PostTags\\FieldResolvers\\PostQueryableFieldResolver' => 'getPostQueryableFieldResolver2Service',
            'PoPSchema\\PostTags\\FieldResolvers\\PostTagFieldResolver' => 'getPostTagFieldResolverService',
            'PoPSchema\\PostTags\\FieldResolvers\\PostTagListFieldResolver' => 'getPostTagListFieldResolverService',
            'PoPSchema\\PostTags\\FieldResolvers\\RootPostTagFieldResolver' => 'getRootPostTagFieldResolverService',
            'PoPSchema\\PostTags\\Hooks\\RoutingHookSet' => 'getRoutingHookSet2Service',
            'PoPSchema\\PostTags\\ModuleProcessors\\PostTagFieldDataloadModuleProcessor' => 'getPostTagFieldDataloadModuleProcessorService',
            'PoPSchema\\PostTags\\ModuleProcessors\\TagPostFieldDataloadModuleProcessor' => 'getTagPostFieldDataloadModuleProcessorService',
            'PoPSchema\\PostTags\\TypeAPIs\\PostTagTypeAPIInterface' => 'getPostTagTypeAPIInterfaceService',
            'PoPSchema\\PostTags\\TypeDataLoaders\\PostTagTypeDataLoader' => 'getPostTagTypeDataLoaderService',
            'PoPSchema\\PostTags\\TypeResolvers\\PostTagTypeResolver' => 'getPostTagTypeResolverService',
            'PoPSchema\\Posts\\ConditionalOnComponent\\API\\RouteModuleProcessors\\EntryRouteModuleProcessor' => 'getEntryRouteModuleProcessor5Service',
            'PoPSchema\\Posts\\ConditionalOnComponent\\Users\\ConditionalOnComponent\\API\\RouteModuleProcessors\\EntryRouteModuleProcessor' => 'getEntryRouteModuleProcessor6Service',
            'PoPSchema\\Posts\\ConditionalOnComponent\\Users\\FieldResolvers\\PostUserFieldResolver' => 'getPostUserFieldResolverService',
            'PoPSchema\\Posts\\ConditionalOnComponent\\Users\\ModuleProcessors\\FieldDataloadModuleProcessor' => 'getFieldDataloadModuleProcessor3Service',
            'PoPSchema\\Posts\\ConditionalOnContext\\AddPostTypeToCustomPostUnionTypes\\SchemaServices\\TypeResolverPickers\\PostCustomPostTypeResolverPicker' => 'getPostCustomPostTypeResolverPickerService',
            'PoPSchema\\Posts\\FieldResolvers\\ExperimentalBranchFieldResolver' => 'getExperimentalBranchFieldResolverService',
            'PoPSchema\\Posts\\FieldResolvers\\PostLegacyContentFieldResolver' => 'getPostLegacyContentFieldResolverService',
            'PoPSchema\\Posts\\FieldResolvers\\RootPostFieldResolver' => 'getRootPostFieldResolverService',
            'PoPSchema\\Posts\\Hooks\\RoutingHookSet' => 'getRoutingHookSet3Service',
            'PoPSchema\\Posts\\ModuleProcessors\\FieldDataloadModuleProcessor' => 'getFieldDataloadModuleProcessor4Service',
            'PoPSchema\\Posts\\ModuleProcessors\\FilterInnerModuleProcessor' => 'getFilterInnerModuleProcessor3Service',
            'PoPSchema\\Posts\\TypeAPIs\\PostTypeAPIInterface' => 'getPostTypeAPIInterfaceService',
            'PoPSchema\\Posts\\TypeDataLoaders\\PostTypeDataLoader' => 'getPostTypeDataLoaderService',
            'PoPSchema\\Posts\\TypeResolvers\\PostTypeResolver' => 'getPostTypeResolverService',
            'PoPSchema\\QueriedObject\\FieldInterfaceResolvers\\QueryableFieldInterfaceResolver' => 'getQueryableFieldInterfaceResolverService',
            'PoPSchema\\QueriedObject\\Helpers\\QueriedObjectHelperServiceInterface' => 'getQueriedObjectHelperServiceInterfaceService',
            'PoPSchema\\QueriedObject\\Hooks\\ApplicationStateHookSet' => 'getApplicationStateHookSet2Service',
            'PoPSchema\\QueriedObject\\Routing\\CMSRoutingStateServiceInterface' => 'getCMSRoutingStateServiceInterfaceService',
            'PoPSchema\\SchemaCommons\\FilterInputProcessors\\FilterInputProcessor' => 'getFilterInputProcessor2Service',
            'PoPSchema\\SchemaCommons\\FormInputs\\MultiValueFromStringFormInput' => 'getMultiValueFromStringFormInputService',
            'PoPSchema\\SchemaCommons\\FormInputs\\OrderFormInput' => 'getOrderFormInputService',
            'PoPSchema\\SchemaCommons\\ModuleProcessors\\FormInputs\\CommonFilterInputModuleProcessor' => 'getCommonFilterInputModuleProcessorService',
            'PoPSchema\\SchemaCommons\\ModuleProcessors\\FormInputs\\CommonFilterMultipleInputModuleProcessor' => 'getCommonFilterMultipleInputModuleProcessorService',
            'PoPSchema\\SchemaCommons\\Services\\AllowOrDenySettingsServiceInterface' => 'getAllowOrDenySettingsServiceInterfaceService',
            'PoPSchema\\Settings\\FieldResolvers\\RootFieldResolver' => 'getRootFieldResolver9Service',
            'PoPSchema\\Settings\\TypeAPIs\\SettingsTypeAPIInterface' => 'getSettingsTypeAPIInterfaceService',
            'PoPSchema\\TagsWP\\Hooks\\RoutingStateHookSet' => 'getRoutingStateHookSet4Service',
            'PoPSchema\\TagsWP\\LooseContracts\\LooseContractResolutionSet' => 'getLooseContractResolutionSet6Service',
            'PoPSchema\\Tags\\Hooks\\VarsHookSet' => 'getVarsHookSet7Service',
            'PoPSchema\\Tags\\LooseContracts\\LooseContractSet' => 'getLooseContractSet6Service',
            'PoPSchema\\Tags\\ModuleProcessors\\FilterInnerModuleProcessor' => 'getFilterInnerModuleProcessor4Service',
            'PoPSchema\\Taxonomies\\TypeAPIs\\TaxonomyTypeAPIInterface' => 'getTaxonomyTypeAPIInterfaceService',
            'PoPSchema\\TaxonomyMetaWP\\Hooks\\QueryHookSet' => 'getQueryHookSet4Service',
            'PoPSchema\\TaxonomyMeta\\FieldResolvers\\TaxonomyFieldResolver' => 'getTaxonomyFieldResolverService',
            'PoPSchema\\TaxonomyMeta\\TypeAPIs\\TaxonomyMetaTypeAPIInterface' => 'getTaxonomyMetaTypeAPIInterfaceService',
            'PoPSchema\\UserMetaWP\\Hooks\\QueryHookSet' => 'getQueryHookSet5Service',
            'PoPSchema\\UserMeta\\FieldResolvers\\UserFieldResolver' => 'getUserFieldResolverService',
            'PoPSchema\\UserMeta\\TypeAPIs\\UserMetaTypeAPIInterface' => 'getUserMetaTypeAPIInterfaceService',
            'PoPSchema\\UserRolesAccessControl\\ConditionalOnComponent\\CacheControl\\TypeResolverDecorators\\ValidateDoesLoggedInUserHaveCapabilityForDirectivesPrivateSchemaTypeResolverDecorator' => 'getValidateDoesLoggedInUserHaveCapabilityForDirectivesPrivateSchemaTypeResolverDecoratorService',
            'PoPSchema\\UserRolesAccessControl\\ConditionalOnComponent\\CacheControl\\TypeResolverDecorators\\ValidateDoesLoggedInUserHaveCapabilityForFieldsPrivateSchemaTypeResolverDecorator' => 'getValidateDoesLoggedInUserHaveCapabilityForFieldsPrivateSchemaTypeResolverDecoratorService',
            'PoPSchema\\UserRolesAccessControl\\ConditionalOnComponent\\CacheControl\\TypeResolverDecorators\\ValidateDoesLoggedInUserHaveRoleForDirectivesPrivateSchemaTypeResolverDecorator' => 'getValidateDoesLoggedInUserHaveRoleForDirectivesPrivateSchemaTypeResolverDecoratorService',
            'PoPSchema\\UserRolesAccessControl\\ConditionalOnComponent\\CacheControl\\TypeResolverDecorators\\ValidateDoesLoggedInUserHaveRoleForFieldsPrivateSchemaTypeResolverDecorator' => 'getValidateDoesLoggedInUserHaveRoleForFieldsPrivateSchemaTypeResolverDecoratorService',
            'PoPSchema\\UserRolesAccessControl\\DirectiveResolvers\\ValidateDoesLoggedInUserHaveAnyCapabilityDirectiveResolver' => 'getValidateDoesLoggedInUserHaveAnyCapabilityDirectiveResolverService',
            'PoPSchema\\UserRolesAccessControl\\DirectiveResolvers\\ValidateDoesLoggedInUserHaveAnyCapabilityForDirectivesDirectiveResolver' => 'getValidateDoesLoggedInUserHaveAnyCapabilityForDirectivesDirectiveResolverService',
            'PoPSchema\\UserRolesAccessControl\\DirectiveResolvers\\ValidateDoesLoggedInUserHaveAnyRoleDirectiveResolver' => 'getValidateDoesLoggedInUserHaveAnyRoleDirectiveResolverService',
            'PoPSchema\\UserRolesAccessControl\\DirectiveResolvers\\ValidateDoesLoggedInUserHaveAnyRoleForDirectivesDirectiveResolver' => 'getValidateDoesLoggedInUserHaveAnyRoleForDirectivesDirectiveResolverService',
            'PoPSchema\\UserRolesAccessControl\\Hooks\\MaybeDisableDirectivesIfLoggedInUserDoesNotHaveCapabilityPrivateSchemaHookSet' => 'getMaybeDisableDirectivesIfLoggedInUserDoesNotHaveCapabilityPrivateSchemaHookSetService',
            'PoPSchema\\UserRolesAccessControl\\Hooks\\MaybeDisableDirectivesIfLoggedInUserDoesNotHaveRolePrivateSchemaHookSet' => 'getMaybeDisableDirectivesIfLoggedInUserDoesNotHaveRolePrivateSchemaHookSetService',
            'PoPSchema\\UserRolesAccessControl\\Hooks\\MaybeDisableFieldsIfLoggedInUserDoesNotHaveCapabilityPrivateSchemaHookSet' => 'getMaybeDisableFieldsIfLoggedInUserDoesNotHaveCapabilityPrivateSchemaHookSetService',
            'PoPSchema\\UserRolesAccessControl\\Hooks\\MaybeDisableFieldsIfLoggedInUserDoesNotHaveRolePrivateSchemaHookSet' => 'getMaybeDisableFieldsIfLoggedInUserDoesNotHaveRolePrivateSchemaHookSetService',
            'PoPSchema\\UserRolesAccessControl\\TypeResolverDecorators\\GlobalValidateIsUserLoggedInForDirectivesPublicSchemaTypeResolverDecorator' => 'getGlobalValidateIsUserLoggedInForDirectivesPublicSchemaTypeResolverDecoratorService',
            'PoPSchema\\UserRolesAccessControl\\TypeResolverDecorators\\GlobalValidateIsUserLoggedInForFieldsPublicSchemaTypeResolverDecorator' => 'getGlobalValidateIsUserLoggedInForFieldsPublicSchemaTypeResolverDecoratorService',
            'PoPSchema\\UserRolesAccessControl\\TypeResolverDecorators\\ValidateDoesLoggedInUserHaveCapabilityForDirectivesPublicSchemaTypeResolverDecorator' => 'getValidateDoesLoggedInUserHaveCapabilityForDirectivesPublicSchemaTypeResolverDecoratorService',
            'PoPSchema\\UserRolesAccessControl\\TypeResolverDecorators\\ValidateDoesLoggedInUserHaveCapabilityForFieldsPublicSchemaTypeResolverDecorator' => 'getValidateDoesLoggedInUserHaveCapabilityForFieldsPublicSchemaTypeResolverDecoratorService',
            'PoPSchema\\UserRolesAccessControl\\TypeResolverDecorators\\ValidateDoesLoggedInUserHaveRoleForDirectivesPublicSchemaTypeResolverDecorator' => 'getValidateDoesLoggedInUserHaveRoleForDirectivesPublicSchemaTypeResolverDecoratorService',
            'PoPSchema\\UserRolesAccessControl\\TypeResolverDecorators\\ValidateDoesLoggedInUserHaveRoleForFieldsPublicSchemaTypeResolverDecorator' => 'getValidateDoesLoggedInUserHaveRoleForFieldsPublicSchemaTypeResolverDecoratorService',
            'PoPSchema\\UserRolesWP\\FieldResolvers\\UserRoleFieldResolver' => 'getUserRoleFieldResolverService',
            'PoPSchema\\UserRolesWP\\TypeDataLoaders\\UserRoleTypeDataLoader' => 'getUserRoleTypeDataLoaderService',
            'PoPSchema\\UserRolesWP\\TypeResolvers\\UserRoleTypeResolver' => 'getUserRoleTypeResolverService',
            'PoPSchema\\UserRoles\\FieldResolvers\\RootRolesFieldResolver' => 'getRootRolesFieldResolverService',
            'PoPSchema\\UserRoles\\FieldResolvers\\UserFieldResolver' => 'getUserFieldResolver2Service',
            'PoPSchema\\UserRoles\\Hooks\\VarsHookSet' => 'getVarsHookSet8Service',
            'PoPSchema\\UserRoles\\TypeDataResolvers\\UserRoleTypeDataResolverInterface' => 'getUserRoleTypeDataResolverInterfaceService',
            'PoPSchema\\UserStateAccessControl\\ConditionalOnComponent\\CacheControl\\TypeResolverDecorators\\NoCacheUserStateTypeResolverDecorator' => 'getNoCacheUserStateTypeResolverDecoratorService',
            'PoPSchema\\UserStateAccessControl\\ConditionalOnComponent\\CacheControl\\TypeResolverDecorators\\ValidateUserLoggedInForDirectivesPrivateSchemaTypeResolverDecorator' => 'getValidateUserLoggedInForDirectivesPrivateSchemaTypeResolverDecoratorService',
            'PoPSchema\\UserStateAccessControl\\ConditionalOnComponent\\CacheControl\\TypeResolverDecorators\\ValidateUserLoggedInForFieldsPrivateSchemaTypeResolverDecorator' => 'getValidateUserLoggedInForFieldsPrivateSchemaTypeResolverDecoratorService',
            'PoPSchema\\UserStateAccessControl\\ConditionalOnComponent\\CacheControl\\TypeResolverDecorators\\ValidateUserNotLoggedInForDirectivesPrivateSchemaTypeResolverDecorator' => 'getValidateUserNotLoggedInForDirectivesPrivateSchemaTypeResolverDecoratorService',
            'PoPSchema\\UserStateAccessControl\\ConditionalOnComponent\\CacheControl\\TypeResolverDecorators\\ValidateUserNotLoggedInForFieldsPrivateSchemaTypeResolverDecorator' => 'getValidateUserNotLoggedInForFieldsPrivateSchemaTypeResolverDecoratorService',
            'PoPSchema\\UserStateAccessControl\\DirectiveResolvers\\ValidateIsUserLoggedInDirectiveResolver' => 'getValidateIsUserLoggedInDirectiveResolverService',
            'PoPSchema\\UserStateAccessControl\\DirectiveResolvers\\ValidateIsUserLoggedInForDirectivesDirectiveResolver' => 'getValidateIsUserLoggedInForDirectivesDirectiveResolverService',
            'PoPSchema\\UserStateAccessControl\\DirectiveResolvers\\ValidateIsUserNotLoggedInDirectiveResolver' => 'getValidateIsUserNotLoggedInDirectiveResolverService',
            'PoPSchema\\UserStateAccessControl\\DirectiveResolvers\\ValidateIsUserNotLoggedInForDirectivesDirectiveResolver' => 'getValidateIsUserNotLoggedInForDirectivesDirectiveResolverService',
            'PoPSchema\\UserStateAccessControl\\Hooks\\DisableDirectivesIfUserIsLoggedInConfigurableAccessControlForDirectivesInPrivateSchemaHookSet' => 'getDisableDirectivesIfUserIsLoggedInConfigurableAccessControlForDirectivesInPrivateSchemaHookSetService',
            'PoPSchema\\UserStateAccessControl\\Hooks\\DisableDirectivesIfUserIsNotLoggedInConfigurableAccessControlForDirectivesInPrivateSchemaHookSet' => 'getDisableDirectivesIfUserIsNotLoggedInConfigurableAccessControlForDirectivesInPrivateSchemaHookSetService',
            'PoPSchema\\UserStateAccessControl\\Hooks\\DisableFieldIfUserIsLoggedInConfigurableAccessControlForFieldsInPrivateSchemaHookSet' => 'getDisableFieldIfUserIsLoggedInConfigurableAccessControlForFieldsInPrivateSchemaHookSetService',
            'PoPSchema\\UserStateAccessControl\\Hooks\\DisableFieldIfUserIsNotLoggedInConfigurableAccessControlForFieldsInPrivateSchemaHookSet' => 'getDisableFieldIfUserIsNotLoggedInConfigurableAccessControlForFieldsInPrivateSchemaHookSetService',
            'PoPSchema\\UserStateAccessControl\\Hooks\\DisableUserStateFieldsIfUserIsNotLoggedInAccessControlForFieldsInPrivateSchemaHookSet' => 'getDisableUserStateFieldsIfUserIsNotLoggedInAccessControlForFieldsInPrivateSchemaHookSetService',
            'PoPSchema\\UserStateAccessControl\\TypeResolverDecorators\\ValidateUserLoggedInForDirectivesPublicSchemaTypeResolverDecorator' => 'getValidateUserLoggedInForDirectivesPublicSchemaTypeResolverDecoratorService',
            'PoPSchema\\UserStateAccessControl\\TypeResolverDecorators\\ValidateUserLoggedInForFieldsPublicSchemaTypeResolverDecorator' => 'getValidateUserLoggedInForFieldsPublicSchemaTypeResolverDecoratorService',
            'PoPSchema\\UserStateAccessControl\\TypeResolverDecorators\\ValidateUserNotLoggedInForDirectivesPublicSchemaTypeResolverDecorator' => 'getValidateUserNotLoggedInForDirectivesPublicSchemaTypeResolverDecoratorService',
            'PoPSchema\\UserStateAccessControl\\TypeResolverDecorators\\ValidateUserNotLoggedInForFieldsPublicSchemaTypeResolverDecorator' => 'getValidateUserNotLoggedInForFieldsPublicSchemaTypeResolverDecoratorService',
            'PoPSchema\\UserStateMutations\\FieldResolvers\\RootFieldResolver' => 'getRootFieldResolver10Service',
            'PoPSchema\\UserStateMutations\\MutationResolvers\\LoginMutationResolver' => 'getLoginMutationResolverService',
            'PoPSchema\\UserStateMutations\\MutationResolvers\\LogoutMutationResolver' => 'getLogoutMutationResolverService',
            'PoPSchema\\UserStateMutations\\MutationResolvers\\MutationInputProperties' => 'getMutationInputProperties3Service',
            'PoPSchema\\UserStateMutations\\TypeAPIs\\UserStateTypeMutationAPIInterface' => 'getUserStateTypeMutationAPIInterfaceService',
            'PoPSchema\\UserState\\CheckpointProcessors\\UserStateCheckpointProcessor' => 'getUserStateCheckpointProcessorService',
            'PoPSchema\\UserState\\DirectiveResolvers\\NoCacheCacheControlDirectiveResolver' => 'getNoCacheCacheControlDirectiveResolverService',
            'PoPSchema\\UserState\\FieldResolvers\\GlobalFieldResolver' => 'getGlobalFieldResolver2Service',
            'PoPSchema\\UserState\\FieldResolvers\\GlobalUserStateFieldResolver' => 'getGlobalUserStateFieldResolverService',
            'PoPSchema\\UserState\\FieldResolvers\\RootMeFieldResolver' => 'getRootMeFieldResolverService',
            'PoPSchema\\UserState\\Hooks\\DBEntriesHookSet' => 'getDBEntriesHookSet2Service',
            'PoPSchema\\UserState\\Hooks\\VarsHookSet' => 'getVarsHookSet9Service',
            'PoPSchema\\UserState\\TypeDataResolvers\\UserStateTypeDataResolverInterface' => 'getUserStateTypeDataResolverInterfaceService',
            'PoPSchema\\UsersWP\\ConditionalOnComponent\\CustomPosts\\LooseContracts\\LooseContractResolutionSet' => 'getLooseContractResolutionSet7Service',
            'PoPSchema\\UsersWP\\Hooks\\RoutingStateHookSet' => 'getRoutingStateHookSet5Service',
            'PoPSchema\\UsersWP\\LooseContracts\\LooseContractResolutionSet' => 'getLooseContractResolutionSet8Service',
            'PoPSchema\\Users\\ConditionalOnComponent\\API\\RouteModuleProcessors\\EntryRouteModuleProcessor' => 'getEntryRouteModuleProcessor7Service',
            'PoPSchema\\Users\\ConditionalOnComponent\\CustomPosts\\FieldResolvers\\CustomPostFieldResolver' => 'getCustomPostFieldResolver7Service',
            'PoPSchema\\Users\\ConditionalOnComponent\\CustomPosts\\FieldResolvers\\CustomPostListUserFieldResolver' => 'getCustomPostListUserFieldResolverService',
            'PoPSchema\\Users\\ConditionalOnComponent\\CustomPosts\\FieldResolvers\\CustomPostUserListFieldResolver' => 'getCustomPostUserListFieldResolverService',
            'PoPSchema\\Users\\ConditionalOnComponent\\CustomPosts\\Hooks\\QueryHookSet' => 'getQueryHookSet6Service',
            'PoPSchema\\Users\\ConditionalOnComponent\\CustomPosts\\LooseContracts\\LooseContractSet' => 'getLooseContractSet7Service',
            'PoPSchema\\Users\\ConditionalOnComponent\\CustomPosts\\ModuleProcessors\\FieldDataloadModuleProcessor' => 'getFieldDataloadModuleProcessor5Service',
            'PoPSchema\\Users\\ConditionalOnComponent\\CustomPosts\\TypeAPIs\\CustomPostUserTypeAPIInterface' => 'getCustomPostUserTypeAPIInterfaceService',
            'PoPSchema\\Users\\FieldInterfaceResolvers\\WithAuthorFieldInterfaceResolver' => 'getWithAuthorFieldInterfaceResolverService',
            'PoPSchema\\Users\\FieldResolvers\\RootUserFieldResolver' => 'getRootUserFieldResolverService',
            'PoPSchema\\Users\\FieldResolvers\\UserFieldResolver' => 'getUserFieldResolver3Service',
            'PoPSchema\\Users\\FilterInputProcessors\\FilterInputProcessor' => 'getFilterInputProcessor3Service',
            'PoPSchema\\Users\\Hooks\\RoutingHookSet' => 'getRoutingHookSet4Service',
            'PoPSchema\\Users\\Hooks\\VarsHookSet' => 'getVarsHookSet10Service',
            'PoPSchema\\Users\\LooseContracts\\LooseContractSet' => 'getLooseContractSet8Service',
            'PoPSchema\\Users\\ModuleProcessors\\FieldDataloadModuleProcessor' => 'getFieldDataloadModuleProcessor6Service',
            'PoPSchema\\Users\\ModuleProcessors\\FilterInnerModuleProcessor' => 'getFilterInnerModuleProcessor5Service',
            'PoPSchema\\Users\\ModuleProcessors\\FilterInputModuleProcessor' => 'getFilterInputModuleProcessor2Service',
            'PoPSchema\\Users\\TypeAPIs\\UserTypeAPIInterface' => 'getUserTypeAPIInterfaceService',
            'PoPSchema\\Users\\TypeDataLoaders\\UserTypeDataLoader' => 'getUserTypeDataLoaderService',
            'PoPSchema\\Users\\TypeResolvers\\UserTypeResolver' => 'getUserTypeResolverService',
            'PoP\\APIEndpointsForWP\\EndpointHandlers\\NativeAPIEndpointHandler' => 'getNativeAPIEndpointHandlerService',
            'PoP\\APIMirrorQuery\\DataStructureFormatters\\MirrorQueryDataStructureFormatter' => 'getMirrorQueryDataStructureFormatterService',
            'PoP\\APIMirrorQuery\\DataStructureFormatters\\PropertyMirrorQueryDataStructureFormatter' => 'getPropertyMirrorQueryDataStructureFormatterService',
            'PoP\\APIMirrorQuery\\DataStructureFormatters\\XMLMirrorQueryDataStructureFormatter' => 'getXMLMirrorQueryDataStructureFormatterService',
            'PoP\\API\\ConditionalOnComponent\\AccessControl\\Hooks\\ComponentConfigurationHookSet' => 'getComponentConfigurationHookSetService',
            'PoP\\API\\ConditionalOnComponent\\CacheControl\\ConditionalOnComponent\\AccessControl\\ConditionalOnContext\\PrivateSchema\\SchemaServices\\DirectiveResolvers\\SchemaNoCacheCacheControlDirectiveResolver' => 'getSchemaNoCacheCacheControlDirectiveResolver2Service',
            'PoP\\API\\DirectiveResolvers\\CopyRelationalResultsDirectiveResolver' => 'getCopyRelationalResultsDirectiveResolverService',
            'PoP\\API\\DirectiveResolvers\\DuplicatePropertyDirectiveResolver' => 'getDuplicatePropertyDirectiveResolverService',
            'PoP\\API\\DirectiveResolvers\\RenamePropertyDirectiveResolver' => 'getRenamePropertyDirectiveResolverService',
            'PoP\\API\\DirectiveResolvers\\SetPropertiesAsExpressionsDirectiveResolver' => 'getSetPropertiesAsExpressionsDirectiveResolverService',
            'PoP\\API\\DirectiveResolvers\\TransformArrayItemsDirectiveResolver' => 'getTransformArrayItemsDirectiveResolverService',
            'PoP\\API\\Enums\\SchemaFieldShapeEnum' => 'getSchemaFieldShapeEnumService',
            'PoP\\API\\FieldResolvers\\RootFieldResolver' => 'getRootFieldResolver11Service',
            'PoP\\API\\Hooks\\DBEntriesHookSet' => 'getDBEntriesHookSet3Service',
            'PoP\\API\\Hooks\\RoutingHookSet' => 'getRoutingHookSet5Service',
            'PoP\\API\\Hooks\\VarsHookSet' => 'getVarsHookSet11Service',
            'PoP\\API\\ModuleProcessors\\RelationalFieldQueryDataModuleProcessor' => 'getRelationalFieldQueryDataModuleProcessorService',
            'PoP\\API\\ModuleProcessors\\RootRelationalFieldDataloadModuleProcessor' => 'getRootRelationalFieldDataloadModuleProcessor2Service',
            'PoP\\API\\PersistedQueries\\PersistedFragmentManagerInterface' => 'getPersistedFragmentManagerInterfaceService',
            'PoP\\API\\PersistedQueries\\PersistedQueryManagerInterface' => 'getPersistedQueryManagerInterfaceService',
            'PoP\\API\\Registries\\SchemaDefinitionRegistryInterface' => 'getSchemaDefinitionRegistryInterfaceService',
            'PoP\\API\\RouteModuleProcessors\\EntryRouteModuleProcessor' => 'getEntryRouteModuleProcessor8Service',
            'PoP\\API\\Schema\\FieldQueryConvertorInterface' => 'getFieldQueryConvertorInterfaceService',
            'PoP\\API\\Schema\\FieldQueryInterpreterInterface' => 'getFieldQueryInterpreterInterfaceService',
            'PoP\\AccessControl\\DirectiveResolvers\\DisableAccessDirectiveResolver' => 'getDisableAccessDirectiveResolverService',
            'PoP\\AccessControl\\DirectiveResolvers\\DisableAccessForDirectivesDirectiveResolver' => 'getDisableAccessForDirectivesDirectiveResolverService',
            'PoP\\AccessControl\\Hooks\\DisableDirectiveConfigurableAccessControlForDirectivesInPrivateSchemaHookSet' => 'getDisableDirectiveConfigurableAccessControlForDirectivesInPrivateSchemaHookSetService',
            'PoP\\AccessControl\\Hooks\\DisableFieldConfigurableAccessControlForFieldsInPrivateSchemaHookSet' => 'getDisableFieldConfigurableAccessControlForFieldsInPrivateSchemaHookSetService',
            'PoP\\AccessControl\\Services\\AccessControlManagerInterface' => 'getAccessControlManagerInterfaceService',
            'PoP\\AccessControl\\TypeResolverDecorators\\DisableAccessConfigurableAccessControlForDirectivesInPublicSchemaTypeResolverDecorator' => 'getDisableAccessConfigurableAccessControlForDirectivesInPublicSchemaTypeResolverDecoratorService',
            'PoP\\AccessControl\\TypeResolverDecorators\\DisableAccessConfigurableAccessControlForFieldsInPublicSchemaTypeResolverDecorator' => 'getDisableAccessConfigurableAccessControlForFieldsInPublicSchemaTypeResolverDecoratorService',
            'PoP\\CacheControl\\DirectiveResolvers\\CacheControlDirectiveResolver' => 'getCacheControlDirectiveResolverService',
            'PoP\\CacheControl\\DirectiveResolvers\\NestedFieldCacheControlDirectiveResolver' => 'getNestedFieldCacheControlDirectiveResolverService',
            'PoP\\CacheControl\\Managers\\CacheControlEngineInterface' => 'getCacheControlEngineInterfaceService',
            'PoP\\CacheControl\\Managers\\CacheControlManagerInterface' => 'getCacheControlManagerInterfaceService',
            'PoP\\CacheControl\\TypeResolverDecorators\\ConfigurableCacheControlForDirectivesTypeResolverDecorator' => 'getConfigurableCacheControlForDirectivesTypeResolverDecoratorService',
            'PoP\\CacheControl\\TypeResolverDecorators\\ConfigurableCacheControlForFieldsTypeResolverDecorator' => 'getConfigurableCacheControlForFieldsTypeResolverDecoratorService',
            'PoP\\ComponentModel\\AttachableExtensions\\AttachExtensionServiceInterface' => 'getAttachExtensionServiceInterfaceService',
            'PoP\\ComponentModel\\AttachableExtensions\\AttachableExtensionManagerInterface' => 'getAttachableExtensionManagerInterfaceService',
            'PoP\\ComponentModel\\Cache\\CacheConfigurationManagerInterface' => 'getCacheConfigurationManagerInterfaceService',
            'PoP\\ComponentModel\\CheckpointProcessors\\CheckpointProcessorManager' => 'getCheckpointProcessorManagerService',
            'PoP\\ComponentModel\\CheckpointProcessors\\CheckpointProcessorManagerInterface' => 'getCheckpointProcessorManagerInterfaceService',
            'PoP\\ComponentModel\\CheckpointProcessors\\MutationCheckpointProcessor' => 'getMutationCheckpointProcessorService',
            'PoP\\ComponentModel\\Container\\ObjectDictionaryInterface' => 'getObjectDictionaryInterfaceService',
            'PoP\\ComponentModel\\DataStructure\\DataStructureManagerInterface' => 'getDataStructureManagerInterfaceService',
            'PoP\\ComponentModel\\DirectiveResolvers\\ResolveValueAndMergeDirectiveResolver' => 'getResolveValueAndMergeDirectiveResolverService',
            'PoP\\ComponentModel\\DirectiveResolvers\\ValidateDirectiveResolver' => 'getValidateDirectiveResolverService',
            'PoP\\ComponentModel\\Engine\\DataloadingEngineInterface' => 'getDataloadingEngineInterfaceService',
            'PoP\\ComponentModel\\Engine\\EngineInterface' => 'getEngineInterfaceService',
            'PoP\\ComponentModel\\EntryModule\\EntryModuleManagerInterface' => 'getEntryModuleManagerInterfaceService',
            'PoP\\ComponentModel\\ErrorHandling\\ErrorProviderInterface' => 'getErrorProviderInterfaceService',
            'PoP\\ComponentModel\\FieldInterfaceResolvers\\ElementalFieldInterfaceResolver' => 'getElementalFieldInterfaceResolverService',
            'PoP\\ComponentModel\\FieldResolvers\\CoreGlobalFieldResolver' => 'getCoreGlobalFieldResolverService',
            'PoP\\ComponentModel\\FieldResolvers\\ElementalFieldResolver' => 'getElementalFieldResolverService',
            'PoP\\ComponentModel\\FilterInputProcessors\\FilterInputProcessorManagerInterface' => 'getFilterInputProcessorManagerInterfaceService',
            'PoP\\ComponentModel\\FormInputs\\FormInput' => 'getFormInputService',
            'PoP\\ComponentModel\\FormInputs\\FormMultipleInput' => 'getFormMultipleInputService',
            'PoP\\ComponentModel\\HelperServices\\ApplicationStateHelperServiceInterface' => 'getApplicationStateHelperServiceInterfaceService',
            'PoP\\ComponentModel\\HelperServices\\DataloadHelperServiceInterface' => 'getDataloadHelperServiceInterfaceService',
            'PoP\\ComponentModel\\HelperServices\\FormInputHelperServiceInterface' => 'getFormInputHelperServiceInterfaceService',
            'PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface' => 'getRequestHelperServiceInterfaceService',
            'PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface' => 'getSemverHelperServiceInterfaceService',
            'PoP\\ComponentModel\\Info\\ApplicationInfoInterface' => 'getApplicationInfoInterfaceService',
            'PoP\\ComponentModel\\Instances\\InstanceManagerInterface' => 'getInstanceManagerInterfaceService',
            'PoP\\ComponentModel\\ModelInstance\\ModelInstanceInterface' => 'getModelInstanceInterfaceService',
            'PoP\\ComponentModel\\ModuleFiltering\\ModuleFilterManagerInterface' => 'getModuleFilterManagerInterfaceService',
            'PoP\\ComponentModel\\ModuleFilters\\ModulePaths' => 'getModulePathsService',
            'PoP\\ComponentModel\\ModulePath\\ModulePathHelpersInterface' => 'getModulePathHelpersInterfaceService',
            'PoP\\ComponentModel\\ModulePath\\ModulePathManagerInterface' => 'getModulePathManagerInterfaceService',
            'PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface' => 'getModuleProcessorManagerInterfaceService',
            'PoP\\ComponentModel\\MutationResolution\\MutationResolutionManagerInterface' => 'getMutationResolutionManagerInterfaceService',
            'PoP\\ComponentModel\\QueryInputOutputHandlers\\ActionExecutionQueryInputOutputHandler' => 'getActionExecutionQueryInputOutputHandlerService',
            'PoP\\ComponentModel\\QueryInputOutputHandlers\\ListQueryInputOutputHandler' => 'getListQueryInputOutputHandlerService',
            'PoP\\ComponentModel\\QueryInputOutputHandlers\\ResponseConstants' => 'getResponseConstantsService',
            'PoP\\ComponentModel\\Registries\\DirectiveRegistryInterface' => 'getDirectiveRegistryInterfaceService',
            'PoP\\ComponentModel\\Registries\\FieldInterfaceRegistryInterface' => 'getFieldInterfaceRegistryInterfaceService',
            'PoP\\ComponentModel\\Registries\\TypeRegistryInterface' => 'getTypeRegistryInterfaceService',
            'PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface' => 'getFeedbackMessageStoreInterfaceService',
            'PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface' => 'getFieldQueryInterpreterInterface2Service',
            'PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface' => 'getSchemaDefinitionServiceInterfaceService',
            'PoP\\ComponentModel\\Schema\\TypeCastingExecuterInterface' => 'getTypeCastingExecuterInterfaceService',
            'PoP\\Definitions\\DefinitionManagerInterface' => 'getDefinitionManagerInterfaceService',
            'PoP\\EngineWP\\Hooks\\TemplateHookSet' => 'getTemplateHookSetService',
            'PoP\\EngineWP\\LooseContracts\\LooseContractResolutionSet' => 'getLooseContractResolutionSet9Service',
            'PoP\\Engine\\CMS\\CMSServiceInterface' => 'getCMSServiceInterfaceService',
            'PoP\\Engine\\CheckpointProcessors\\RequestCheckpointProcessor' => 'getRequestCheckpointProcessorService',
            'PoP\\Engine\\ConditionalOnContext\\Guzzle\\SchemaServices\\DirectiveResolvers\\NoCacheCacheControlDirectiveResolver' => 'getNoCacheCacheControlDirectiveResolver2Service',
            'PoP\\Engine\\ConditionalOnContext\\Guzzle\\SchemaServices\\FieldResolvers\\OperatorGlobalFieldResolver' => 'getOperatorGlobalFieldResolverService',
            'PoP\\Engine\\DirectiveResolvers\\AddFeedbackForFieldDirectiveResolver' => 'getAddFeedbackForFieldDirectiveResolverService',
            'PoP\\Engine\\DirectiveResolvers\\AdvancePointerInArrayDirectiveResolver' => 'getAdvancePointerInArrayDirectiveResolverService',
            'PoP\\Engine\\DirectiveResolvers\\ApplyFunctionDirectiveResolver' => 'getApplyFunctionDirectiveResolverService',
            'PoP\\Engine\\DirectiveResolvers\\ForEachDirectiveResolver' => 'getForEachDirectiveResolverService',
            'PoP\\Engine\\DirectiveResolvers\\IncludeDirectiveResolver' => 'getIncludeDirectiveResolverService',
            'PoP\\Engine\\DirectiveResolvers\\NoCacheCacheControlDirectiveResolver' => 'getNoCacheCacheControlDirectiveResolver3Service',
            'PoP\\Engine\\DirectiveResolvers\\OneYearCacheControlDirectiveResolver' => 'getOneYearCacheControlDirectiveResolverService',
            'PoP\\Engine\\DirectiveResolvers\\SetSelfAsExpressionDirectiveResolver' => 'getSetSelfAsExpressionDirectiveResolverService',
            'PoP\\Engine\\DirectiveResolvers\\SkipDirectiveResolver' => 'getSkipDirectiveResolverService',
            'PoP\\Engine\\Enums\\FieldFeedbackTargetEnum' => 'getFieldFeedbackTargetEnumService',
            'PoP\\Engine\\Enums\\FieldFeedbackTypeEnum' => 'getFieldFeedbackTypeEnumService',
            'PoP\\Engine\\ErrorHandling\\ErrorHelperInterface' => 'getErrorHelperInterfaceService',
            'PoP\\Engine\\ErrorHandling\\ErrorManagerInterface' => 'getErrorManagerInterfaceService',
            'PoP\\Engine\\FieldResolvers\\FunctionGlobalFieldResolver' => 'getFunctionGlobalFieldResolverService',
            'PoP\\Engine\\FieldResolvers\\OperatorGlobalFieldResolver' => 'getOperatorGlobalFieldResolver2Service',
            'PoP\\Engine\\FormInputs\\BooleanFormInput' => 'getBooleanFormInputService',
            'PoP\\Engine\\FormInputs\\DateRangeFormInput' => 'getDateRangeFormInputService',
            'PoP\\Engine\\FormInputs\\DateRangeTimeFormInput' => 'getDateRangeTimeFormInputService',
            'PoP\\Engine\\FormInputs\\MultipleInputFormInput' => 'getMultipleInputFormInputService',
            'PoP\\Engine\\FormInputs\\MultipleSelectFormInput' => 'getMultipleSelectFormInputService',
            'PoP\\Engine\\FormInputs\\SelectFormInput' => 'getSelectFormInputService',
            'PoP\\Engine\\Formatters\\DateFormatterInterface' => 'getDateFormatterInterfaceService',
            'PoP\\Engine\\Hooks\\VarsHookSet' => 'getVarsHookSet12Service',
            'PoP\\Engine\\LooseContracts\\LooseContractSet' => 'getLooseContractSet9Service',
            'PoP\\Engine\\ModuleProcessors\\RootModuleProcessors' => 'getRootModuleProcessorsService',
            'PoP\\Engine\\ObjectModels\\Root' => 'getRootService',
            'PoP\\Engine\\RouteModuleProcessors\\EntryRouteModuleProcessor' => 'getEntryRouteModuleProcessor9Service',
            'PoP\\Engine\\Schema\\SchemaDefinitionServiceInterface' => 'getSchemaDefinitionServiceInterface2Service',
            'PoP\\Engine\\TypeDataLoaders\\RootTypeDataLoader' => 'getRootTypeDataLoaderService',
            'PoP\\Engine\\TypeResolvers\\RootTypeResolver' => 'getRootTypeResolverService',
            'PoP\\FieldQuery\\FeedbackMessageStoreInterface' => 'getFeedbackMessageStoreInterface2Service',
            'PoP\\FieldQuery\\FieldQueryInterpreterInterface' => 'getFieldQueryInterpreterInterface3Service',
            'PoP\\GraphQLAPI\\DataStructureFormatters\\GraphQLDataStructureFormatter' => 'getGraphQLDataStructureFormatterService',
            'PoP\\Hooks\\HooksAPIInterface' => 'getHooksAPIInterfaceService',
            'PoP\\LooseContracts\\LooseContractManagerInterface' => 'getLooseContractManagerInterfaceService',
            'PoP\\LooseContracts\\NameResolverInterface' => 'getNameResolverInterfaceService',
            'PoP\\ModuleRouting\\RouteModuleProcessorManagerInterface' => 'getRouteModuleProcessorManagerInterfaceService',
            'PoP\\QueryParsing\\QueryParserInterface' => 'getQueryParserInterfaceService',
            'PoP\\Root\\Container\\ServiceInstantiatorInterface' => 'getServiceInstantiatorInterfaceService',
            'PoP\\RoutingWP\\Hooks\\SetupCortexHookSet' => 'getSetupCortexHookSetService',
            'PoP\\Routing\\RoutingManagerInterface' => 'getRoutingManagerInterfaceService',
            'PoP\\Translation\\TranslationAPIInterface' => 'getTranslationAPIInterfaceService',
            'memory_cache' => 'getMemoryCacheService',
            'memory_cache_item_pool' => 'getMemoryCacheItemPoolService',
            'persistent_cache' => 'getPersistentCacheService',
            'persistent_cache_item_pool' => 'getPersistentCacheItemPoolService',
        ];

        $this->aliases = [];
    }

    public function compile(): void
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled(): bool
    {
        return true;
    }

    public function getRemovedIds(): array
    {
        return [
            'GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationSchemes\\DefaultUserAuthorizationSchemeServiceTagInterface' => true,
            'GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationSchemes\\UserAuthorizationSchemeInterface' => true,
            'GraphQLAPI\\GraphQLAPI\\Services\\ModuleTypeResolvers\\ModuleTypeResolverInterface' => true,
            'PoP\\ComponentModel\\FieldInterfaceResolvers\\FieldInterfaceResolverInterface' => true,
            'PoP\\ComponentModel\\FieldInterfaceResolvers\\FieldInterfaceSchemaDefinitionResolverInterface' => true,
            'PoP\\ComponentModel\\ModuleFilters\\ModuleFilterInterface' => true,
            'PrefixedByPoP\\Psr\\Container\\ContainerInterface' => true,
            'PrefixedByPoP\\Symfony\\Component\\DependencyInjection\\ContainerInterface' => true,
            'default_data_structure_formatter' => true,
        ];
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\ConditionalOnContext\Admin\ConditionalOnContext\Editor\SchemaServices\FieldResolvers\ListOfCPTEntitiesRootFieldResolver' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\ConditionalOnContext\Admin\ConditionalOnContext\Editor\SchemaServices\FieldResolvers\ListOfCPTEntitiesRootFieldResolver
     */
    protected function getListOfCPTEntitiesRootFieldResolverService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\ConditionalOnContext\\Admin\\ConditionalOnContext\\Editor\\SchemaServices\\FieldResolvers\\ListOfCPTEntitiesRootFieldResolver'] = new \GraphQLAPI\GraphQLAPI\ConditionalOnContext\Admin\ConditionalOnContext\Editor\SchemaServices\FieldResolvers\ListOfCPTEntitiesRootFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\ConditionalOnContext\Admin\Services\Clients\AdminGraphiQLWithExplorerClient' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\ConditionalOnContext\Admin\Services\Clients\AdminGraphiQLWithExplorerClient
     */
    protected function getAdminGraphiQLWithExplorerClientService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\ConditionalOnContext\\Admin\\Services\\Clients\\AdminGraphiQLWithExplorerClient'] = new \GraphQLAPI\GraphQLAPI\ConditionalOnContext\Admin\Services\Clients\AdminGraphiQLWithExplorerClient(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\EndpointHelpers'] ?? $this->getEndpointHelpersService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\ConditionalOnContext\Admin\Services\EndpointResolvers\AdminEndpointResolver' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\ConditionalOnContext\Admin\Services\EndpointResolvers\AdminEndpointResolver
     */
    protected function getAdminEndpointResolverService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\ConditionalOnContext\\Admin\\Services\\EndpointResolvers\\AdminEndpointResolver'] = new \GraphQLAPI\GraphQLAPI\ConditionalOnContext\Admin\Services\EndpointResolvers\AdminEndpointResolver(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\EndpointHelpers'] ?? $this->getEndpointHelpersService()), ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface'] ?? $this->getUserAuthorizationInterfaceService()), ($this->services['GraphQLByPoP\\GraphQLRequest\\Execution\\QueryRetrieverInterface'] ?? ($this->services['GraphQLByPoP\\GraphQLRequest\\Execution\\QueryRetrieverInterface'] = new \GraphQLByPoP\GraphQLRequest\Execution\QueryRetriever())));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\ContentProcessors\MarkdownContentParserInterface' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\ContentProcessors\MarkdownContentParser
     */
    protected function getMarkdownContentParserInterfaceService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\ContentProcessors\\MarkdownContentParserInterface'] = new \GraphQLAPI\GraphQLAPI\ContentProcessors\MarkdownContentParser(($this->services['PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface'] ?? $this->getRequestHelperServiceInterfaceService()), ($this->services['GraphQLAPI\\MarkdownConvertor\\MarkdownConvertorInterface'] ?? ($this->services['GraphQLAPI\\MarkdownConvertor\\MarkdownConvertorInterface'] = new \GraphQLAPI\MarkdownConvertor\MarkdownConvertor())));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\ModuleResolvers\AccessControlFunctionalityModuleResolver' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\ModuleResolvers\AccessControlFunctionalityModuleResolver
     */
    protected function getAccessControlFunctionalityModuleResolverService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\AccessControlFunctionalityModuleResolver'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\AccessControlFunctionalityModuleResolver'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\AccessControlFunctionalityModuleResolver'] = new \GraphQLAPI\GraphQLAPI\ModuleResolvers\AccessControlFunctionalityModuleResolver(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $a, ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\ModuleResolvers\ClientFunctionalityModuleResolver' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\ModuleResolvers\ClientFunctionalityModuleResolver
     */
    protected function getClientFunctionalityModuleResolverService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\ClientFunctionalityModuleResolver'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\ClientFunctionalityModuleResolver'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\ClientFunctionalityModuleResolver'] = new \GraphQLAPI\GraphQLAPI\ModuleResolvers\ClientFunctionalityModuleResolver(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $a, ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\ModuleResolvers\EndpointFunctionalityModuleResolver' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\ModuleResolvers\EndpointFunctionalityModuleResolver
     */
    protected function getEndpointFunctionalityModuleResolverService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\EndpointFunctionalityModuleResolver'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\EndpointFunctionalityModuleResolver'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\EndpointFunctionalityModuleResolver'] = new \GraphQLAPI\GraphQLAPI\ModuleResolvers\EndpointFunctionalityModuleResolver(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $a, ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\ModuleResolvers\MetaSchemaTypeModuleResolver' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\ModuleResolvers\MetaSchemaTypeModuleResolver
     */
    protected function getMetaSchemaTypeModuleResolverService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\MetaSchemaTypeModuleResolver'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\MetaSchemaTypeModuleResolver'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\MetaSchemaTypeModuleResolver'] = new \GraphQLAPI\GraphQLAPI\ModuleResolvers\MetaSchemaTypeModuleResolver(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $a, ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoPSchema\\Comments\\TypeResolvers\\CommentTypeResolver'] ?? $this->getCommentTypeResolverService()), ($this->services['PoPSchema\\PostTags\\TypeResolvers\\PostTagTypeResolver'] ?? $this->getPostTagTypeResolverService()), ($this->services['PoPSchema\\PostCategories\\TypeResolvers\\PostCategoryTypeResolver'] ?? $this->getPostCategoryTypeResolverService()), ($this->services['PoPSchema\\Posts\\TypeResolvers\\PostTypeResolver'] ?? $this->getPostTypeResolverService()), ($this->services['PoPSchema\\Users\\TypeResolvers\\UserTypeResolver'] ?? $this->getUserTypeResolverService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\ModuleResolvers\MutationSchemaTypeModuleResolver' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\ModuleResolvers\MutationSchemaTypeModuleResolver
     */
    protected function getMutationSchemaTypeModuleResolverService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\MutationSchemaTypeModuleResolver'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\MutationSchemaTypeModuleResolver'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\MutationSchemaTypeModuleResolver'] = new \GraphQLAPI\GraphQLAPI\ModuleResolvers\MutationSchemaTypeModuleResolver(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $a, ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\ModuleResolvers\PerformanceFunctionalityModuleResolver' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\ModuleResolvers\PerformanceFunctionalityModuleResolver
     */
    protected function getPerformanceFunctionalityModuleResolverService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\PerformanceFunctionalityModuleResolver'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\PerformanceFunctionalityModuleResolver'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\PerformanceFunctionalityModuleResolver'] = new \GraphQLAPI\GraphQLAPI\ModuleResolvers\PerformanceFunctionalityModuleResolver(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $a, ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\ModuleResolvers\PluginManagementFunctionalityModuleResolver' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\ModuleResolvers\PluginManagementFunctionalityModuleResolver
     */
    protected function getPluginManagementFunctionalityModuleResolverService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\PluginManagementFunctionalityModuleResolver'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\PluginManagementFunctionalityModuleResolver'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\PluginManagementFunctionalityModuleResolver'] = new \GraphQLAPI\GraphQLAPI\ModuleResolvers\PluginManagementFunctionalityModuleResolver(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $a, ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\ModuleResolvers\SchemaConfigurationFunctionalityModuleResolver' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\ModuleResolvers\SchemaConfigurationFunctionalityModuleResolver
     */
    protected function getSchemaConfigurationFunctionalityModuleResolverService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\SchemaConfigurationFunctionalityModuleResolver'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\SchemaConfigurationFunctionalityModuleResolver'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\SchemaConfigurationFunctionalityModuleResolver'] = new \GraphQLAPI\GraphQLAPI\ModuleResolvers\SchemaConfigurationFunctionalityModuleResolver(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $a, ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\ModuleResolvers\SchemaTypeModuleResolver' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\ModuleResolvers\SchemaTypeModuleResolver
     */
    protected function getSchemaTypeModuleResolverService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\SchemaTypeModuleResolver'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\SchemaTypeModuleResolver'];
        }
        $b = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\CustomPostTypeRegistryInterface'] ?? $this->getCustomPostTypeRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\SchemaTypeModuleResolver'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\SchemaTypeModuleResolver'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\SchemaTypeModuleResolver'] = new \GraphQLAPI\GraphQLAPI\ModuleResolvers\SchemaTypeModuleResolver(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $a, ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoPSchema\\Comments\\TypeResolvers\\CommentTypeResolver'] ?? $this->getCommentTypeResolverService()), ($this->services['PoPSchema\\CustomPosts\\TypeResolvers\\CustomPostUnionTypeResolver'] ?? $this->getCustomPostUnionTypeResolverService()), ($this->services['PoPSchema\\GenericCustomPosts\\TypeResolvers\\GenericCustomPostTypeResolver'] ?? $this->getGenericCustomPostTypeResolverService()), ($this->services['PoPSchema\\Media\\TypeResolvers\\MediaTypeResolver'] ?? $this->getMediaTypeResolverService()), ($this->services['PoPSchema\\Pages\\TypeResolvers\\PageTypeResolver'] ?? $this->getPageTypeResolverService()), ($this->services['PoPSchema\\PostTags\\TypeResolvers\\PostTagTypeResolver'] ?? $this->getPostTagTypeResolverService()), ($this->services['PoPSchema\\PostCategories\\TypeResolvers\\PostCategoryTypeResolver'] ?? $this->getPostCategoryTypeResolverService()), ($this->services['PoPSchema\\Menus\\TypeResolvers\\MenuTypeResolver'] ?? $this->getMenuTypeResolverService()), ($this->services['PoPSchema\\Posts\\TypeResolvers\\PostTypeResolver'] ?? $this->getPostTypeResolverService()), ($this->services['PoPSchema\\UserRolesWP\\TypeResolvers\\UserRoleTypeResolver'] ?? $this->getUserRoleTypeResolverService()), ($this->services['PoPSchema\\Users\\TypeResolvers\\UserTypeResolver'] ?? $this->getUserTypeResolverService()), $b);
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\ModuleResolvers\UserInterfaceFunctionalityModuleResolver' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\ModuleResolvers\UserInterfaceFunctionalityModuleResolver
     */
    protected function getUserInterfaceFunctionalityModuleResolverService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\UserInterfaceFunctionalityModuleResolver'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\UserInterfaceFunctionalityModuleResolver'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\UserInterfaceFunctionalityModuleResolver'] = new \GraphQLAPI\GraphQLAPI\ModuleResolvers\UserInterfaceFunctionalityModuleResolver(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $a, ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Registries\AccessControlRuleBlockRegistryInterface' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Registries\AccessControlRuleBlockRegistry
     */
    protected function getAccessControlRuleBlockRegistryInterfaceService()
    {
        $this->services['GraphQLAPI\\GraphQLAPI\\Registries\\AccessControlRuleBlockRegistryInterface'] = $instance = new \GraphQLAPI\GraphQLAPI\Registries\AccessControlRuleBlockRegistry();

        $instance->addAccessControlRuleBlock(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\AccessControlRuleBlocks\\AccessControlDisableAccessBlock'] ?? $this->getAccessControlDisableAccessBlockService()), 'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\AccessControlRuleBlocks\\AccessControlDisableAccessBlock');
        $instance->addAccessControlRuleBlock(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\AccessControlRuleBlocks\\AccessControlUserCapabilitiesBlock'] ?? $this->getAccessControlUserCapabilitiesBlockService()), 'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\AccessControlRuleBlocks\\AccessControlUserCapabilitiesBlock');
        $instance->addAccessControlRuleBlock(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\AccessControlRuleBlocks\\AccessControlUserRolesBlock'] ?? $this->getAccessControlUserRolesBlockService()), 'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\AccessControlRuleBlocks\\AccessControlUserRolesBlock');
        $instance->addAccessControlRuleBlock(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\AccessControlRuleBlocks\\AccessControlUserStateBlock'] ?? $this->getAccessControlUserStateBlockService()), 'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\AccessControlRuleBlocks\\AccessControlUserStateBlock');

        return $instance;
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Registries\CustomEndpointAnnotatorRegistryInterface' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Registries\CustomEndpointAnnotatorRegistry
     */
    protected function getCustomEndpointAnnotatorRegistryInterfaceService()
    {
        $this->services['GraphQLAPI\\GraphQLAPI\\Registries\\CustomEndpointAnnotatorRegistryInterface'] = $instance = new \GraphQLAPI\GraphQLAPI\Registries\CustomEndpointAnnotatorRegistry();

        $instance->addEndpointAnnotator(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointAnnotators\\GraphiQLClientEndpointAnnotator'] ?? $this->getGraphiQLClientEndpointAnnotatorService()), 'GraphQLAPI\\GraphQLAPI\\Services\\EndpointAnnotators\\GraphiQLClientEndpointAnnotator');
        $instance->addEndpointAnnotator(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointAnnotators\\VoyagerClientEndpointAnnotator'] ?? $this->getVoyagerClientEndpointAnnotatorService()), 'GraphQLAPI\\GraphQLAPI\\Services\\EndpointAnnotators\\VoyagerClientEndpointAnnotator');

        return $instance;
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Registries\CustomEndpointExecuterRegistryInterface' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Registries\CustomEndpointExecuterRegistry
     */
    protected function getCustomEndpointExecuterRegistryInterfaceService()
    {
        $this->services['GraphQLAPI\\GraphQLAPI\\Registries\\CustomEndpointExecuterRegistryInterface'] = $instance = new \GraphQLAPI\GraphQLAPI\Registries\CustomEndpointExecuterRegistry();

        $instance->addEndpointExecuter(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\CustomEndpointGraphQLQueryResolutionEndpointExecuter'] ?? $this->getCustomEndpointGraphQLQueryResolutionEndpointExecuterService()), 'GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\CustomEndpointGraphQLQueryResolutionEndpointExecuter');
        $instance->addEndpointExecuter(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\GraphiQLClientEndpointExecuter'] ?? $this->getGraphiQLClientEndpointExecuterService()), 'GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\GraphiQLClientEndpointExecuter');
        $instance->addEndpointExecuter(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\ViewCustomEndpointSourceEndpointExecuter'] ?? $this->getViewCustomEndpointSourceEndpointExecuterService()), 'GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\ViewCustomEndpointSourceEndpointExecuter');
        $instance->addEndpointExecuter(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\VoyagerClientEndpointExecuter'] ?? $this->getVoyagerClientEndpointExecuterService()), 'GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\VoyagerClientEndpointExecuter');

        return $instance;
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Registries\CustomPostTypeRegistryInterface' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Registries\CustomPostTypeRegistry
     */
    protected function getCustomPostTypeRegistryInterfaceService()
    {
        $this->services['GraphQLAPI\\GraphQLAPI\\Registries\\CustomPostTypeRegistryInterface'] = $instance = new \GraphQLAPI\GraphQLAPI\Registries\CustomPostTypeRegistry();

        $instance->addCustomPostType(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLAccessControlListCustomPostType'] ?? $this->getGraphQLAccessControlListCustomPostTypeService()), 'GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLAccessControlListCustomPostType');
        $instance->addCustomPostType(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLCacheControlListCustomPostType'] ?? $this->getGraphQLCacheControlListCustomPostTypeService()), 'GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLCacheControlListCustomPostType');
        $instance->addCustomPostType(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLCustomEndpointCustomPostType'] ?? $this->getGraphQLCustomEndpointCustomPostTypeService()), 'GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLCustomEndpointCustomPostType');
        $instance->addCustomPostType(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLPersistedQueryEndpointCustomPostType'] ?? $this->getGraphQLPersistedQueryEndpointCustomPostTypeService()), 'GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLPersistedQueryEndpointCustomPostType');
        $instance->addCustomPostType(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLSchemaConfigurationCustomPostType'] ?? $this->getGraphQLSchemaConfigurationCustomPostTypeService()), 'GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLSchemaConfigurationCustomPostType');

        return $instance;
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Registries\EndpointBlockRegistryInterface' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Registries\EndpointBlockRegistry
     */
    protected function getEndpointBlockRegistryInterfaceService()
    {
        $this->services['GraphQLAPI\\GraphQLAPI\\Registries\\EndpointBlockRegistryInterface'] = $instance = new \GraphQLAPI\GraphQLAPI\Registries\EndpointBlockRegistry();

        $instance->addBlock(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\CustomEndpointOptionsBlock'] ?? $this->getCustomEndpointOptionsBlockService()), 'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\CustomEndpointOptionsBlock');
        $instance->addBlock(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\EndpointGraphiQLBlock'] ?? $this->getEndpointGraphiQLBlockService()), 'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\EndpointGraphiQLBlock');
        $instance->addBlock(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\EndpointSchemaConfigurationBlock'] ?? $this->getEndpointSchemaConfigurationBlockService()), 'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\EndpointSchemaConfigurationBlock');
        $instance->addBlock(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\EndpointVoyagerBlock'] ?? $this->getEndpointVoyagerBlockService()), 'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\EndpointVoyagerBlock');

        return $instance;
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Registries\EndpointSchemaConfigurationExecuterRegistryInterface' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Registries\EndpointSchemaConfigurationExecuterRegistry
     */
    protected function getEndpointSchemaConfigurationExecuterRegistryInterfaceService()
    {
        $this->services['GraphQLAPI\\GraphQLAPI\\Registries\\EndpointSchemaConfigurationExecuterRegistryInterface'] = $instance = new \GraphQLAPI\GraphQLAPI\Registries\EndpointSchemaConfigurationExecuterRegistry();

        $instance->addSchemaConfigurationExecuter(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurationExecuters\\AccessControlSchemaConfigurationExecuter'] ?? $this->getAccessControlSchemaConfigurationExecuterService()), 'GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurationExecuters\\AccessControlSchemaConfigurationExecuter');
        $instance->addSchemaConfigurationExecuter(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurationExecuters\\AdminSchemaSchemaConfigurationExecuter'] ?? $this->getAdminSchemaSchemaConfigurationExecuterService()), 'GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurationExecuters\\AdminSchemaSchemaConfigurationExecuter');
        $instance->addSchemaConfigurationExecuter(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurationExecuters\\DefaultSchemaModeSchemaConfigurationExecuter'] ?? $this->getDefaultSchemaModeSchemaConfigurationExecuterService()), 'GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurationExecuters\\DefaultSchemaModeSchemaConfigurationExecuter');
        $instance->addSchemaConfigurationExecuter(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurationExecuters\\MutationSchemeSchemaConfigurationExecuter'] ?? $this->getMutationSchemeSchemaConfigurationExecuterService()), 'GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurationExecuters\\MutationSchemeSchemaConfigurationExecuter');
        $instance->addSchemaConfigurationExecuter(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurationExecuters\\NamespacingSchemaConfigurationExecuter'] ?? $this->getNamespacingSchemaConfigurationExecuterService()), 'GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurationExecuters\\NamespacingSchemaConfigurationExecuter');

        return $instance;
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Registries\ModuleRegistryInterface' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Registries\ModuleRegistry
     */
    protected function getModuleRegistryInterfaceService()
    {
        $this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] = $instance = new \GraphQLAPI\GraphQLAPI\Registries\ModuleRegistry();

        $instance->addModuleResolver(($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\AccessControlFunctionalityModuleResolver'] ?? $this->getAccessControlFunctionalityModuleResolverService()), 'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\AccessControlFunctionalityModuleResolver');
        $instance->addModuleResolver(($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\ClientFunctionalityModuleResolver'] ?? $this->getClientFunctionalityModuleResolverService()), 'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\ClientFunctionalityModuleResolver');
        $instance->addModuleResolver(($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\EndpointFunctionalityModuleResolver'] ?? $this->getEndpointFunctionalityModuleResolverService()), 'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\EndpointFunctionalityModuleResolver');
        $instance->addModuleResolver(($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\MetaSchemaTypeModuleResolver'] ?? $this->getMetaSchemaTypeModuleResolverService()), 'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\MetaSchemaTypeModuleResolver');
        $instance->addModuleResolver(($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\MutationSchemaTypeModuleResolver'] ?? $this->getMutationSchemaTypeModuleResolverService()), 'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\MutationSchemaTypeModuleResolver');
        $instance->addModuleResolver(($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\PerformanceFunctionalityModuleResolver'] ?? $this->getPerformanceFunctionalityModuleResolverService()), 'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\PerformanceFunctionalityModuleResolver');
        $instance->addModuleResolver(($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\PluginManagementFunctionalityModuleResolver'] ?? $this->getPluginManagementFunctionalityModuleResolverService()), 'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\PluginManagementFunctionalityModuleResolver');
        $instance->addModuleResolver(($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\SchemaConfigurationFunctionalityModuleResolver'] ?? $this->getSchemaConfigurationFunctionalityModuleResolverService()), 'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\SchemaConfigurationFunctionalityModuleResolver');
        $instance->addModuleResolver(($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\SchemaTypeModuleResolver'] ?? $this->getSchemaTypeModuleResolverService()), 'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\SchemaTypeModuleResolver');
        $instance->addModuleResolver(($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\UserInterfaceFunctionalityModuleResolver'] ?? $this->getUserInterfaceFunctionalityModuleResolverService()), 'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\UserInterfaceFunctionalityModuleResolver');

        return $instance;
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Registries\ModuleTypeRegistryInterface' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Registries\ModuleTypeRegistry
     */
    protected function getModuleTypeRegistryInterfaceService()
    {
        $this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleTypeRegistryInterface'] = $instance = new \GraphQLAPI\GraphQLAPI\Registries\ModuleTypeRegistry();

        $instance->addModuleTypeResolver(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\ModuleTypeResolvers\\ModuleTypeResolver'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\ModuleTypeResolvers\\ModuleTypeResolver'] = new \GraphQLAPI\GraphQLAPI\Services\ModuleTypeResolvers\ModuleTypeResolver())), 'GraphQLAPI\\GraphQLAPI\\Services\\ModuleTypeResolvers\\ModuleTypeResolver');

        return $instance;
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Registries\PersistedQueryEndpointAnnotatorRegistryInterface' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Registries\PersistedQueryEndpointAnnotatorRegistry
     */
    protected function getPersistedQueryEndpointAnnotatorRegistryInterfaceService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Registries\\PersistedQueryEndpointAnnotatorRegistryInterface'] = new \GraphQLAPI\GraphQLAPI\Registries\PersistedQueryEndpointAnnotatorRegistry();
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Registries\PersistedQueryEndpointBlockRegistryInterface' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Registries\PersistedQueryEndpointBlockRegistry
     */
    protected function getPersistedQueryEndpointBlockRegistryInterfaceService()
    {
        $this->services['GraphQLAPI\\GraphQLAPI\\Registries\\PersistedQueryEndpointBlockRegistryInterface'] = $instance = new \GraphQLAPI\GraphQLAPI\Registries\PersistedQueryEndpointBlockRegistry();

        $instance->addBlock(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\EndpointSchemaConfigurationBlock'] ?? $this->getEndpointSchemaConfigurationBlockService()), 'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\EndpointSchemaConfigurationBlock');
        $instance->addBlock(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\PersistedQueryEndpointAPIHierarchyBlock'] ?? $this->getPersistedQueryEndpointAPIHierarchyBlockService()), 'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\PersistedQueryEndpointAPIHierarchyBlock');
        $instance->addBlock(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\PersistedQueryEndpointGraphiQLBlock'] ?? $this->getPersistedQueryEndpointGraphiQLBlockService()), 'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\PersistedQueryEndpointGraphiQLBlock');
        $instance->addBlock(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\PersistedQueryEndpointOptionsBlock'] ?? $this->getPersistedQueryEndpointOptionsBlockService()), 'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\PersistedQueryEndpointOptionsBlock');

        return $instance;
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Registries\PersistedQueryEndpointExecuterRegistryInterface' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Registries\PersistedQueryEndpointExecuterRegistry
     */
    protected function getPersistedQueryEndpointExecuterRegistryInterfaceService()
    {
        $this->services['GraphQLAPI\\GraphQLAPI\\Registries\\PersistedQueryEndpointExecuterRegistryInterface'] = $instance = new \GraphQLAPI\GraphQLAPI\Registries\PersistedQueryEndpointExecuterRegistry();

        $instance->addEndpointExecuter(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\PersistedQueryEndpointGraphQLQueryResolutionEndpointExecuter'] ?? $this->getPersistedQueryEndpointGraphQLQueryResolutionEndpointExecuterService()), 'GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\PersistedQueryEndpointGraphQLQueryResolutionEndpointExecuter');
        $instance->addEndpointExecuter(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\ViewPersistedQueryEndpointSourceEndpointExecuter'] ?? $this->getViewPersistedQueryEndpointSourceEndpointExecuterService()), 'GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\ViewPersistedQueryEndpointSourceEndpointExecuter');

        return $instance;
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Registries\PersistedQueryEndpointSchemaConfigurationExecuterRegistryInterface' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Registries\PersistedQueryEndpointSchemaConfigurationExecuterRegistry
     */
    protected function getPersistedQueryEndpointSchemaConfigurationExecuterRegistryInterfaceService()
    {
        $this->services['GraphQLAPI\\GraphQLAPI\\Registries\\PersistedQueryEndpointSchemaConfigurationExecuterRegistryInterface'] = $instance = new \GraphQLAPI\GraphQLAPI\Registries\PersistedQueryEndpointSchemaConfigurationExecuterRegistry();

        $instance->addSchemaConfigurationExecuter(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurationExecuters\\AccessControlSchemaConfigurationExecuter'] ?? $this->getAccessControlSchemaConfigurationExecuterService()), 'GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurationExecuters\\AccessControlSchemaConfigurationExecuter');
        $instance->addSchemaConfigurationExecuter(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurationExecuters\\AdminSchemaSchemaConfigurationExecuter'] ?? $this->getAdminSchemaSchemaConfigurationExecuterService()), 'GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurationExecuters\\AdminSchemaSchemaConfigurationExecuter');
        $instance->addSchemaConfigurationExecuter(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurationExecuters\\CacheControlSchemaConfigurationExecuter'] ?? $this->getCacheControlSchemaConfigurationExecuterService()), 'GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurationExecuters\\CacheControlSchemaConfigurationExecuter');
        $instance->addSchemaConfigurationExecuter(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurationExecuters\\DefaultSchemaModeSchemaConfigurationExecuter'] ?? $this->getDefaultSchemaModeSchemaConfigurationExecuterService()), 'GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurationExecuters\\DefaultSchemaModeSchemaConfigurationExecuter');
        $instance->addSchemaConfigurationExecuter(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurationExecuters\\MutationSchemeSchemaConfigurationExecuter'] ?? $this->getMutationSchemeSchemaConfigurationExecuterService()), 'GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurationExecuters\\MutationSchemeSchemaConfigurationExecuter');
        $instance->addSchemaConfigurationExecuter(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurationExecuters\\NamespacingSchemaConfigurationExecuter'] ?? $this->getNamespacingSchemaConfigurationExecuterService()), 'GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurationExecuters\\NamespacingSchemaConfigurationExecuter');

        return $instance;
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Registries\SchemaConfigBlockRegistryInterface' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Registries\SchemaConfigBlockRegistry
     */
    protected function getSchemaConfigBlockRegistryInterfaceService()
    {
        $this->services['GraphQLAPI\\GraphQLAPI\\Registries\\SchemaConfigBlockRegistryInterface'] = $instance = new \GraphQLAPI\GraphQLAPI\Registries\SchemaConfigBlockRegistry();

        $instance->addBlock(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigAccessControlListBlock'] ?? $this->getSchemaConfigAccessControlListBlockService()), 'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigAccessControlListBlock');
        $instance->addBlock(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigAdminSchemaBlock'] ?? $this->getSchemaConfigAdminSchemaBlockService()), 'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigAdminSchemaBlock');
        $instance->addBlock(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigCacheControlListBlock'] ?? $this->getSchemaConfigCacheControlListBlockService()), 'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigCacheControlListBlock');
        $instance->addBlock(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigMutationSchemeBlock'] ?? $this->getSchemaConfigMutationSchemeBlockService()), 'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigMutationSchemeBlock');
        $instance->addBlock(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigNamespacingBlock'] ?? $this->getSchemaConfigNamespacingBlockService()), 'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigNamespacingBlock');
        $instance->addBlock(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigSchemaModeBlock'] ?? $this->getSchemaConfigSchemaModeBlockService()), 'GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigSchemaModeBlock');

        return $instance;
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Registries\UserAuthorizationSchemeRegistryInterface' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Registries\UserAuthorizationSchemeRegistry
     */
    protected function getUserAuthorizationSchemeRegistryInterfaceService()
    {
        $this->services['GraphQLAPI\\GraphQLAPI\\Registries\\UserAuthorizationSchemeRegistryInterface'] = $instance = new \GraphQLAPI\GraphQLAPI\Registries\UserAuthorizationSchemeRegistry();

        $instance->addUserAuthorizationScheme(($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationSchemes\\ManageOptionsUserAuthorizationScheme'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationSchemes\\ManageOptionsUserAuthorizationScheme'] = new \GraphQLAPI\GraphQLAPI\Security\UserAuthorizationSchemes\ManageOptionsUserAuthorizationScheme())), 'GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationSchemes\\ManageOptionsUserAuthorizationScheme');

        return $instance;
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Security\UserAuthorizationInterface' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Security\UserAuthorization
     */
    protected function getUserAuthorizationInterfaceService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface'] = new \GraphQLAPI\GraphQLAPI\Security\UserAuthorization(($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\UserAuthorizationSchemeRegistryInterface'] ?? $this->getUserAuthorizationSchemeRegistryInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Security\UserAuthorizationSchemes\ManageOptionsUserAuthorizationScheme' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Security\UserAuthorizationSchemes\ManageOptionsUserAuthorizationScheme
     */
    protected function getManageOptionsUserAuthorizationSchemeService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationSchemes\\ManageOptionsUserAuthorizationScheme'] = new \GraphQLAPI\GraphQLAPI\Security\UserAuthorizationSchemes\ManageOptionsUserAuthorizationScheme();
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\BlockAccessors\PersistedQueryEndpointAPIHierarchyBlockAccessor' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\BlockAccessors\PersistedQueryEndpointAPIHierarchyBlockAccessor
     */
    protected function getPersistedQueryEndpointAPIHierarchyBlockAccessorService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\PersistedQueryEndpointAPIHierarchyBlock'] ?? $this->getPersistedQueryEndpointAPIHierarchyBlockService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\BlockAccessors\\PersistedQueryEndpointAPIHierarchyBlockAccessor'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\BlockAccessors\\PersistedQueryEndpointAPIHierarchyBlockAccessor'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\BlockAccessors\\PersistedQueryEndpointAPIHierarchyBlockAccessor'] = new \GraphQLAPI\GraphQLAPI\Services\BlockAccessors\PersistedQueryEndpointAPIHierarchyBlockAccessor(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\BlockHelpers'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\BlockHelpers'] = new \GraphQLAPI\GraphQLAPI\Services\Helpers\BlockHelpers())), $a);
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\BlockAccessors\PersistedQueryEndpointGraphiQLBlockAccessor' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\BlockAccessors\PersistedQueryEndpointGraphiQLBlockAccessor
     */
    protected function getPersistedQueryEndpointGraphiQLBlockAccessorService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\PersistedQueryEndpointGraphiQLBlock'] ?? $this->getPersistedQueryEndpointGraphiQLBlockService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\BlockAccessors\\PersistedQueryEndpointGraphiQLBlockAccessor'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\BlockAccessors\\PersistedQueryEndpointGraphiQLBlockAccessor'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\BlockAccessors\\PersistedQueryEndpointGraphiQLBlockAccessor'] = new \GraphQLAPI\GraphQLAPI\Services\BlockAccessors\PersistedQueryEndpointGraphiQLBlockAccessor(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\BlockHelpers'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\BlockHelpers'] = new \GraphQLAPI\GraphQLAPI\Services\Helpers\BlockHelpers())), $a);
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\BlockCategories\AccessControlBlockCategory' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\BlockCategories\AccessControlBlockCategory
     */
    protected function getAccessControlBlockCategoryService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\BlockCategories\\AccessControlBlockCategory'] = new \GraphQLAPI\GraphQLAPI\Services\BlockCategories\AccessControlBlockCategory(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\BlockCategories\CacheControlBlockCategory' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\BlockCategories\CacheControlBlockCategory
     */
    protected function getCacheControlBlockCategoryService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\BlockCategories\\CacheControlBlockCategory'] = new \GraphQLAPI\GraphQLAPI\Services\BlockCategories\CacheControlBlockCategory(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\BlockCategories\CustomEndpointBlockCategory' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\BlockCategories\CustomEndpointBlockCategory
     */
    protected function getCustomEndpointBlockCategoryService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\BlockCategories\\CustomEndpointBlockCategory'] = new \GraphQLAPI\GraphQLAPI\Services\BlockCategories\CustomEndpointBlockCategory(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\BlockCategories\EndpointBlockCategory' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\BlockCategories\EndpointBlockCategory
     */
    protected function getEndpointBlockCategoryService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\BlockCategories\\EndpointBlockCategory'] = new \GraphQLAPI\GraphQLAPI\Services\BlockCategories\EndpointBlockCategory(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\BlockCategories\PersistedQueryEndpointBlockCategory' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\BlockCategories\PersistedQueryEndpointBlockCategory
     */
    protected function getPersistedQueryEndpointBlockCategoryService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\BlockCategories\\PersistedQueryEndpointBlockCategory'] = new \GraphQLAPI\GraphQLAPI\Services\BlockCategories\PersistedQueryEndpointBlockCategory(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\BlockCategories\SchemaConfigurationBlockCategory' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\BlockCategories\SchemaConfigurationBlockCategory
     */
    protected function getSchemaConfigurationBlockCategoryService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\BlockCategories\\SchemaConfigurationBlockCategory'] = new \GraphQLAPI\GraphQLAPI\Services\BlockCategories\SchemaConfigurationBlockCategory(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Blocks\AccessControlBlock' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Blocks\AccessControlBlock
     */
    protected function getAccessControlBlockService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\AccessControlBlock'] = new \GraphQLAPI\GraphQLAPI\Services\Blocks\AccessControlBlock(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService()), ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface'] ?? $this->getUserAuthorizationInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Blocks\AccessControlRuleBlocks\AccessControlDisableAccessBlock' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Blocks\AccessControlRuleBlocks\AccessControlDisableAccessBlock
     */
    protected function getAccessControlDisableAccessBlockService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\AccessControlRuleBlocks\\AccessControlDisableAccessBlock'] = new \GraphQLAPI\GraphQLAPI\Services\Blocks\AccessControlRuleBlocks\AccessControlDisableAccessBlock(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService()), ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface'] ?? $this->getUserAuthorizationInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Blocks\AccessControlRuleBlocks\AccessControlUserCapabilitiesBlock' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Blocks\AccessControlRuleBlocks\AccessControlUserCapabilitiesBlock
     */
    protected function getAccessControlUserCapabilitiesBlockService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\AccessControlRuleBlocks\\AccessControlUserCapabilitiesBlock'] = new \GraphQLAPI\GraphQLAPI\Services\Blocks\AccessControlRuleBlocks\AccessControlUserCapabilitiesBlock(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService()), ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface'] ?? $this->getUserAuthorizationInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Blocks\AccessControlRuleBlocks\AccessControlUserRolesBlock' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Blocks\AccessControlRuleBlocks\AccessControlUserRolesBlock
     */
    protected function getAccessControlUserRolesBlockService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\AccessControlRuleBlocks\\AccessControlUserRolesBlock'] = new \GraphQLAPI\GraphQLAPI\Services\Blocks\AccessControlRuleBlocks\AccessControlUserRolesBlock(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService()), ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface'] ?? $this->getUserAuthorizationInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Blocks\AccessControlRuleBlocks\AccessControlUserStateBlock' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Blocks\AccessControlRuleBlocks\AccessControlUserStateBlock
     */
    protected function getAccessControlUserStateBlockService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\AccessControlRuleBlocks\\AccessControlUserStateBlock'] = new \GraphQLAPI\GraphQLAPI\Services\Blocks\AccessControlRuleBlocks\AccessControlUserStateBlock(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService()), ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface'] ?? $this->getUserAuthorizationInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Blocks\CacheControlBlock' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Blocks\CacheControlBlock
     */
    protected function getCacheControlBlockService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\CacheControlBlock'] = new \GraphQLAPI\GraphQLAPI\Services\Blocks\CacheControlBlock(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService()), ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface'] ?? $this->getUserAuthorizationInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Blocks\CustomEndpointOptionsBlock' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Blocks\CustomEndpointOptionsBlock
     */
    protected function getCustomEndpointOptionsBlockService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\CustomEndpointOptionsBlock'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\CustomEndpointOptionsBlock'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\CustomEndpointOptionsBlock'] = new \GraphQLAPI\GraphQLAPI\Services\Blocks\CustomEndpointOptionsBlock(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $a, ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface'] ?? $this->getUserAuthorizationInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Blocks\EndpointGraphiQLBlock' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Blocks\EndpointGraphiQLBlock
     */
    protected function getEndpointGraphiQLBlockService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\EndpointGraphiQLBlock'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\EndpointGraphiQLBlock'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\EndpointGraphiQLBlock'] = new \GraphQLAPI\GraphQLAPI\Services\Blocks\EndpointGraphiQLBlock(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $a, ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface'] ?? $this->getUserAuthorizationInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Blocks\EndpointSchemaConfigurationBlock' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Blocks\EndpointSchemaConfigurationBlock
     */
    protected function getEndpointSchemaConfigurationBlockService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\EndpointSchemaConfigurationBlock'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\EndpointSchemaConfigurationBlock'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\EndpointSchemaConfigurationBlock'] = new \GraphQLAPI\GraphQLAPI\Services\Blocks\EndpointSchemaConfigurationBlock(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $a, ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface'] ?? $this->getUserAuthorizationInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Blocks\EndpointVoyagerBlock' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Blocks\EndpointVoyagerBlock
     */
    protected function getEndpointVoyagerBlockService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\EndpointVoyagerBlock'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\EndpointVoyagerBlock'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\EndpointVoyagerBlock'] = new \GraphQLAPI\GraphQLAPI\Services\Blocks\EndpointVoyagerBlock(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $a, ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface'] ?? $this->getUserAuthorizationInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Blocks\PersistedQueryEndpointAPIHierarchyBlock' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Blocks\PersistedQueryEndpointAPIHierarchyBlock
     */
    protected function getPersistedQueryEndpointAPIHierarchyBlockService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\PersistedQueryEndpointAPIHierarchyBlock'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\PersistedQueryEndpointAPIHierarchyBlock'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\PersistedQueryEndpointAPIHierarchyBlock'] = new \GraphQLAPI\GraphQLAPI\Services\Blocks\PersistedQueryEndpointAPIHierarchyBlock(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $a, ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface'] ?? $this->getUserAuthorizationInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Blocks\PersistedQueryEndpointGraphiQLBlock' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\ConditionalOnContext\GraphiQLExplorerInAdminPersistedQueries\Overrides\Services\Blocks\PersistedQueryEndpointGraphiQLWithExplorerBlock
     */
    protected function getPersistedQueryEndpointGraphiQLBlockService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\EndpointHelpers'] ?? $this->getEndpointHelpersService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\PersistedQueryEndpointGraphiQLBlock'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\PersistedQueryEndpointGraphiQLBlock'];
        }
        $b = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\PersistedQueryEndpointGraphiQLBlock'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\PersistedQueryEndpointGraphiQLBlock'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\PersistedQueryEndpointGraphiQLBlock'] = new \GraphQLAPI\GraphQLAPI\ConditionalOnContext\GraphiQLExplorerInAdminPersistedQueries\Overrides\Services\Blocks\PersistedQueryEndpointGraphiQLWithExplorerBlock(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $b, ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface'] ?? $this->getUserAuthorizationInterfaceService()), $a);
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Blocks\PersistedQueryEndpointOptionsBlock' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Blocks\PersistedQueryEndpointOptionsBlock
     */
    protected function getPersistedQueryEndpointOptionsBlockService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\PersistedQueryEndpointOptionsBlock'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\PersistedQueryEndpointOptionsBlock'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\PersistedQueryEndpointOptionsBlock'] = new \GraphQLAPI\GraphQLAPI\Services\Blocks\PersistedQueryEndpointOptionsBlock(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $a, ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface'] ?? $this->getUserAuthorizationInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Blocks\SchemaConfigAccessControlListBlock' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Blocks\SchemaConfigAccessControlListBlock
     */
    protected function getSchemaConfigAccessControlListBlockService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigAccessControlListBlock'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigAccessControlListBlock'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigAccessControlListBlock'] = new \GraphQLAPI\GraphQLAPI\Services\Blocks\SchemaConfigAccessControlListBlock(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $a, ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface'] ?? $this->getUserAuthorizationInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Blocks\SchemaConfigAdminSchemaBlock' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Blocks\SchemaConfigAdminSchemaBlock
     */
    protected function getSchemaConfigAdminSchemaBlockService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigAdminSchemaBlock'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigAdminSchemaBlock'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigAdminSchemaBlock'] = new \GraphQLAPI\GraphQLAPI\Services\Blocks\SchemaConfigAdminSchemaBlock(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $a, ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface'] ?? $this->getUserAuthorizationInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Blocks\SchemaConfigCacheControlListBlock' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Blocks\SchemaConfigCacheControlListBlock
     */
    protected function getSchemaConfigCacheControlListBlockService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigCacheControlListBlock'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigCacheControlListBlock'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigCacheControlListBlock'] = new \GraphQLAPI\GraphQLAPI\Services\Blocks\SchemaConfigCacheControlListBlock(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $a, ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface'] ?? $this->getUserAuthorizationInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Blocks\SchemaConfigMutationSchemeBlock' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Blocks\SchemaConfigMutationSchemeBlock
     */
    protected function getSchemaConfigMutationSchemeBlockService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigMutationSchemeBlock'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigMutationSchemeBlock'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigMutationSchemeBlock'] = new \GraphQLAPI\GraphQLAPI\Services\Blocks\SchemaConfigMutationSchemeBlock(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $a, ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface'] ?? $this->getUserAuthorizationInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Blocks\SchemaConfigNamespacingBlock' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Blocks\SchemaConfigNamespacingBlock
     */
    protected function getSchemaConfigNamespacingBlockService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigNamespacingBlock'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigNamespacingBlock'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigNamespacingBlock'] = new \GraphQLAPI\GraphQLAPI\Services\Blocks\SchemaConfigNamespacingBlock(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $a, ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface'] ?? $this->getUserAuthorizationInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Blocks\SchemaConfigSchemaModeBlock' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Blocks\SchemaConfigSchemaModeBlock
     */
    protected function getSchemaConfigSchemaModeBlockService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigSchemaModeBlock'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigSchemaModeBlock'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigSchemaModeBlock'] = new \GraphQLAPI\GraphQLAPI\Services\Blocks\SchemaConfigSchemaModeBlock(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $a, ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface'] ?? $this->getUserAuthorizationInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Clients\CustomEndpointGraphiQLClient' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\ConditionalOnContext\GraphiQLExplorerInCustomEndpointPublicClient\Overrides\Services\Clients\CustomEndpointGraphiQLWithExplorerClient
     */
    protected function getCustomEndpointGraphiQLClientService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Clients\\CustomEndpointGraphiQLClient'] = new \GraphQLAPI\GraphQLAPI\ConditionalOnContext\GraphiQLExplorerInCustomEndpointPublicClient\Overrides\Services\Clients\CustomEndpointGraphiQLWithExplorerClient();
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Clients\CustomEndpointVoyagerClient' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Clients\CustomEndpointVoyagerClient
     */
    protected function getCustomEndpointVoyagerClientService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Clients\\CustomEndpointVoyagerClient'] = new \GraphQLAPI\GraphQLAPI\Services\Clients\CustomEndpointVoyagerClient();
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\CustomPostTypes\GraphQLAccessControlListCustomPostType' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\CustomPostTypes\GraphQLAccessControlListCustomPostType
     */
    protected function getGraphQLAccessControlListCustomPostTypeService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLAccessControlListCustomPostType'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLAccessControlListCustomPostType'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLAccessControlListCustomPostType'] = new \GraphQLAPI\GraphQLAPI\Services\CustomPostTypes\GraphQLAccessControlListCustomPostType(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $a, ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface'] ?? $this->getUserAuthorizationInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\CustomPostTypes\GraphQLCacheControlListCustomPostType' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\CustomPostTypes\GraphQLCacheControlListCustomPostType
     */
    protected function getGraphQLCacheControlListCustomPostTypeService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLCacheControlListCustomPostType'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLCacheControlListCustomPostType'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLCacheControlListCustomPostType'] = new \GraphQLAPI\GraphQLAPI\Services\CustomPostTypes\GraphQLCacheControlListCustomPostType(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $a, ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface'] ?? $this->getUserAuthorizationInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\CustomPostTypes\GraphQLCustomEndpointCustomPostType' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\CustomPostTypes\GraphQLCustomEndpointCustomPostType
     */
    protected function getGraphQLCustomEndpointCustomPostTypeService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLCustomEndpointCustomPostType'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLCustomEndpointCustomPostType'];
        }
        $b = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\EndpointBlockRegistryInterface'] ?? $this->getEndpointBlockRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLCustomEndpointCustomPostType'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLCustomEndpointCustomPostType'];
        }
        $c = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\CustomEndpointExecuterRegistryInterface'] ?? $this->getCustomEndpointExecuterRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLCustomEndpointCustomPostType'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLCustomEndpointCustomPostType'];
        }
        $d = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\CustomEndpointAnnotatorRegistryInterface'] ?? $this->getCustomEndpointAnnotatorRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLCustomEndpointCustomPostType'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLCustomEndpointCustomPostType'];
        }
        $e = ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\CustomEndpointOptionsBlock'] ?? $this->getCustomEndpointOptionsBlockService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLCustomEndpointCustomPostType'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLCustomEndpointCustomPostType'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLCustomEndpointCustomPostType'] = new \GraphQLAPI\GraphQLAPI\Services\CustomPostTypes\GraphQLCustomEndpointCustomPostType(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $a, ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface'] ?? $this->getUserAuthorizationInterfaceService()), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\BlockHelpers'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\BlockHelpers'] = new \GraphQLAPI\GraphQLAPI\Services\Helpers\BlockHelpers())), $b, $c, $d, $e);
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\CustomPostTypes\GraphQLPersistedQueryEndpointCustomPostType' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\CustomPostTypes\GraphQLPersistedQueryEndpointCustomPostType
     */
    protected function getGraphQLPersistedQueryEndpointCustomPostTypeService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLPersistedQueryEndpointCustomPostType'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLPersistedQueryEndpointCustomPostType'];
        }
        $b = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\PersistedQueryEndpointBlockRegistryInterface'] ?? $this->getPersistedQueryEndpointBlockRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLPersistedQueryEndpointCustomPostType'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLPersistedQueryEndpointCustomPostType'];
        }
        $c = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\PersistedQueryEndpointExecuterRegistryInterface'] ?? $this->getPersistedQueryEndpointExecuterRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLPersistedQueryEndpointCustomPostType'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLPersistedQueryEndpointCustomPostType'];
        }
        $d = ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\PersistedQueryEndpointOptionsBlock'] ?? $this->getPersistedQueryEndpointOptionsBlockService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLPersistedQueryEndpointCustomPostType'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLPersistedQueryEndpointCustomPostType'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLPersistedQueryEndpointCustomPostType'] = new \GraphQLAPI\GraphQLAPI\Services\CustomPostTypes\GraphQLPersistedQueryEndpointCustomPostType(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $a, ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface'] ?? $this->getUserAuthorizationInterfaceService()), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\BlockHelpers'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\BlockHelpers'] = new \GraphQLAPI\GraphQLAPI\Services\Helpers\BlockHelpers())), $b, $c, ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\PersistedQueryEndpointAnnotatorRegistryInterface'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\PersistedQueryEndpointAnnotatorRegistryInterface'] = new \GraphQLAPI\GraphQLAPI\Registries\PersistedQueryEndpointAnnotatorRegistry())), $d);
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\CustomPostTypes\GraphQLSchemaConfigurationCustomPostType' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\CustomPostTypes\GraphQLSchemaConfigurationCustomPostType
     */
    protected function getGraphQLSchemaConfigurationCustomPostTypeService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLSchemaConfigurationCustomPostType'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLSchemaConfigurationCustomPostType'];
        }
        $b = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\SchemaConfigBlockRegistryInterface'] ?? $this->getSchemaConfigBlockRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLSchemaConfigurationCustomPostType'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLSchemaConfigurationCustomPostType'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLSchemaConfigurationCustomPostType'] = new \GraphQLAPI\GraphQLAPI\Services\CustomPostTypes\GraphQLSchemaConfigurationCustomPostType(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $a, ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface'] ?? $this->getUserAuthorizationInterfaceService()), $b);
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\CustomPostTypes\Hooks' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\CustomPostTypes\Hooks
     */
    protected function getHooksService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\Hooks'] = new \GraphQLAPI\GraphQLAPI\Services\CustomPostTypes\Hooks();
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\EditorScripts\EndpointComponentEditorScript' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\EditorScripts\EndpointComponentEditorScript
     */
    protected function getEndpointComponentEditorScriptService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\EditorScripts\\EndpointComponentEditorScript'] = new \GraphQLAPI\GraphQLAPI\Services\EditorScripts\EndpointComponentEditorScript(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\EditorScripts\PersistedQueryEndpointComponentEditorScript' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\EditorScripts\PersistedQueryEndpointComponentEditorScript
     */
    protected function getPersistedQueryEndpointComponentEditorScriptService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\EditorScripts\\PersistedQueryEndpointComponentEditorScript'] = new \GraphQLAPI\GraphQLAPI\Services\EditorScripts\PersistedQueryEndpointComponentEditorScript(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\EndpointAnnotators\GraphiQLClientEndpointAnnotator' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\EndpointAnnotators\GraphiQLClientEndpointAnnotator
     */
    protected function getGraphiQLClientEndpointAnnotatorService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointAnnotators\\GraphiQLClientEndpointAnnotator'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointAnnotators\\GraphiQLClientEndpointAnnotator'];
        }
        $b = ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLCustomEndpointCustomPostType'] ?? $this->getGraphQLCustomEndpointCustomPostTypeService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointAnnotators\\GraphiQLClientEndpointAnnotator'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointAnnotators\\GraphiQLClientEndpointAnnotator'];
        }
        $c = ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\EndpointGraphiQLBlock'] ?? $this->getEndpointGraphiQLBlockService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointAnnotators\\GraphiQLClientEndpointAnnotator'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointAnnotators\\GraphiQLClientEndpointAnnotator'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointAnnotators\\GraphiQLClientEndpointAnnotator'] = new \GraphQLAPI\GraphQLAPI\Services\EndpointAnnotators\GraphiQLClientEndpointAnnotator(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $a, ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\BlockHelpers'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\BlockHelpers'] = new \GraphQLAPI\GraphQLAPI\Services\Helpers\BlockHelpers())), $b, $c);
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\EndpointAnnotators\VoyagerClientEndpointAnnotator' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\EndpointAnnotators\VoyagerClientEndpointAnnotator
     */
    protected function getVoyagerClientEndpointAnnotatorService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointAnnotators\\VoyagerClientEndpointAnnotator'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointAnnotators\\VoyagerClientEndpointAnnotator'];
        }
        $b = ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLCustomEndpointCustomPostType'] ?? $this->getGraphQLCustomEndpointCustomPostTypeService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointAnnotators\\VoyagerClientEndpointAnnotator'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointAnnotators\\VoyagerClientEndpointAnnotator'];
        }
        $c = ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\EndpointVoyagerBlock'] ?? $this->getEndpointVoyagerBlockService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointAnnotators\\VoyagerClientEndpointAnnotator'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointAnnotators\\VoyagerClientEndpointAnnotator'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointAnnotators\\VoyagerClientEndpointAnnotator'] = new \GraphQLAPI\GraphQLAPI\Services\EndpointAnnotators\VoyagerClientEndpointAnnotator(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $a, ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\BlockHelpers'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\BlockHelpers'] = new \GraphQLAPI\GraphQLAPI\Services\Helpers\BlockHelpers())), $b, $c);
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\EndpointExecuters\CustomEndpointGraphQLQueryResolutionEndpointExecuter' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\EndpointExecuters\CustomEndpointGraphQLQueryResolutionEndpointExecuter
     */
    protected function getCustomEndpointGraphQLQueryResolutionEndpointExecuterService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\CustomEndpointGraphQLQueryResolutionEndpointExecuter'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\CustomEndpointGraphQLQueryResolutionEndpointExecuter'];
        }
        $b = ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLCustomEndpointCustomPostType'] ?? $this->getGraphQLCustomEndpointCustomPostTypeService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\CustomEndpointGraphQLQueryResolutionEndpointExecuter'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\CustomEndpointGraphQLQueryResolutionEndpointExecuter'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\CustomEndpointGraphQLQueryResolutionEndpointExecuter'] = new \GraphQLAPI\GraphQLAPI\Services\EndpointExecuters\CustomEndpointGraphQLQueryResolutionEndpointExecuter(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $a, $b, ($this->services['GraphQLByPoP\\GraphQLRequest\\Execution\\QueryRetrieverInterface'] ?? ($this->services['GraphQLByPoP\\GraphQLRequest\\Execution\\QueryRetrieverInterface'] = new \GraphQLByPoP\GraphQLRequest\Execution\QueryRetriever())));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\EndpointExecuters\GraphiQLClientEndpointExecuter' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\EndpointExecuters\GraphiQLClientEndpointExecuter
     */
    protected function getGraphiQLClientEndpointExecuterService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\GraphiQLClientEndpointExecuter'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\GraphiQLClientEndpointExecuter'];
        }
        $b = ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLCustomEndpointCustomPostType'] ?? $this->getGraphQLCustomEndpointCustomPostTypeService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\GraphiQLClientEndpointExecuter'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\GraphiQLClientEndpointExecuter'];
        }
        $c = ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointAnnotators\\GraphiQLClientEndpointAnnotator'] ?? $this->getGraphiQLClientEndpointAnnotatorService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\GraphiQLClientEndpointExecuter'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\GraphiQLClientEndpointExecuter'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\GraphiQLClientEndpointExecuter'] = new \GraphQLAPI\GraphQLAPI\Services\EndpointExecuters\GraphiQLClientEndpointExecuter(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $a, $b, ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Clients\\CustomEndpointGraphiQLClient'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Clients\\CustomEndpointGraphiQLClient'] = new \GraphQLAPI\GraphQLAPI\ConditionalOnContext\GraphiQLExplorerInCustomEndpointPublicClient\Overrides\Services\Clients\CustomEndpointGraphiQLWithExplorerClient())), $c);
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\EndpointExecuters\PersistedQueryEndpointGraphQLQueryResolutionEndpointExecuter' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\EndpointExecuters\PersistedQueryEndpointGraphQLQueryResolutionEndpointExecuter
     */
    protected function getPersistedQueryEndpointGraphQLQueryResolutionEndpointExecuterService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\PersistedQueryEndpointGraphQLQueryResolutionEndpointExecuter'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\PersistedQueryEndpointGraphQLQueryResolutionEndpointExecuter'];
        }
        $b = ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLPersistedQueryEndpointCustomPostType'] ?? $this->getGraphQLPersistedQueryEndpointCustomPostTypeService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\PersistedQueryEndpointGraphQLQueryResolutionEndpointExecuter'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\PersistedQueryEndpointGraphQLQueryResolutionEndpointExecuter'];
        }
        $c = ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\GraphQLQueryPostTypeHelpers'] ?? $this->getGraphQLQueryPostTypeHelpersService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\PersistedQueryEndpointGraphQLQueryResolutionEndpointExecuter'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\PersistedQueryEndpointGraphQLQueryResolutionEndpointExecuter'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\PersistedQueryEndpointGraphQLQueryResolutionEndpointExecuter'] = new \GraphQLAPI\GraphQLAPI\Services\EndpointExecuters\PersistedQueryEndpointGraphQLQueryResolutionEndpointExecuter(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $a, $b, $c);
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\EndpointExecuters\ViewCustomEndpointSourceEndpointExecuter' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\EndpointExecuters\ViewCustomEndpointSourceEndpointExecuter
     */
    protected function getViewCustomEndpointSourceEndpointExecuterService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\ViewCustomEndpointSourceEndpointExecuter'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\ViewCustomEndpointSourceEndpointExecuter'];
        }
        $b = ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLCustomEndpointCustomPostType'] ?? $this->getGraphQLCustomEndpointCustomPostTypeService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\ViewCustomEndpointSourceEndpointExecuter'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\ViewCustomEndpointSourceEndpointExecuter'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\ViewCustomEndpointSourceEndpointExecuter'] = new \GraphQLAPI\GraphQLAPI\Services\EndpointExecuters\ViewCustomEndpointSourceEndpointExecuter(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $a, $b);
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\EndpointExecuters\ViewPersistedQueryEndpointSourceEndpointExecuter' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\EndpointExecuters\ViewPersistedQueryEndpointSourceEndpointExecuter
     */
    protected function getViewPersistedQueryEndpointSourceEndpointExecuterService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\ViewPersistedQueryEndpointSourceEndpointExecuter'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\ViewPersistedQueryEndpointSourceEndpointExecuter'];
        }
        $b = ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLPersistedQueryEndpointCustomPostType'] ?? $this->getGraphQLPersistedQueryEndpointCustomPostTypeService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\ViewPersistedQueryEndpointSourceEndpointExecuter'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\ViewPersistedQueryEndpointSourceEndpointExecuter'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\ViewPersistedQueryEndpointSourceEndpointExecuter'] = new \GraphQLAPI\GraphQLAPI\Services\EndpointExecuters\ViewPersistedQueryEndpointSourceEndpointExecuter(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $a, $b, ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface'] ?? $this->getUserAuthorizationInterfaceService()), ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\GraphQLQueryPostTypeHelpers'] ?? $this->getGraphQLQueryPostTypeHelpersService()), ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\BlockAccessors\\PersistedQueryEndpointAPIHierarchyBlockAccessor'] ?? $this->getPersistedQueryEndpointAPIHierarchyBlockAccessorService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\EndpointExecuters\VoyagerClientEndpointExecuter' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\EndpointExecuters\VoyagerClientEndpointExecuter
     */
    protected function getVoyagerClientEndpointExecuterService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\VoyagerClientEndpointExecuter'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\VoyagerClientEndpointExecuter'];
        }
        $b = ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLCustomEndpointCustomPostType'] ?? $this->getGraphQLCustomEndpointCustomPostTypeService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\VoyagerClientEndpointExecuter'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\VoyagerClientEndpointExecuter'];
        }
        $c = ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointAnnotators\\VoyagerClientEndpointAnnotator'] ?? $this->getVoyagerClientEndpointAnnotatorService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\VoyagerClientEndpointExecuter'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\VoyagerClientEndpointExecuter'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\EndpointExecuters\\VoyagerClientEndpointExecuter'] = new \GraphQLAPI\GraphQLAPI\Services\EndpointExecuters\VoyagerClientEndpointExecuter(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), $a, $b, ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Clients\\CustomEndpointVoyagerClient'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Clients\\CustomEndpointVoyagerClient'] = new \GraphQLAPI\GraphQLAPI\Services\Clients\CustomEndpointVoyagerClient())), $c);
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Helpers\BlockHelpers' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Helpers\BlockHelpers
     */
    protected function getBlockHelpersService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\BlockHelpers'] = new \GraphQLAPI\GraphQLAPI\Services\Helpers\BlockHelpers();
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Helpers\BlockRenderingHelpers' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Helpers\BlockRenderingHelpers
     */
    protected function getBlockRenderingHelpersService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\BlockRenderingHelpers'] = new \GraphQLAPI\GraphQLAPI\Services\Helpers\BlockRenderingHelpers();
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Helpers\CPTUtils' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Helpers\CPTUtils
     */
    protected function getCPTUtilsService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\CPTUtils'] = new \GraphQLAPI\GraphQLAPI\Services\Helpers\CPTUtils();
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Helpers\EditorHelpers' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Helpers\EditorHelpers
     */
    protected function getEditorHelpersService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\EditorHelpers'] = new \GraphQLAPI\GraphQLAPI\Services\Helpers\EditorHelpers();
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Helpers\EndpointHelpers' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Helpers\EndpointHelpers
     */
    protected function getEndpointHelpersService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\EndpointHelpers'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\EndpointHelpers'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\EndpointHelpers'] = new \GraphQLAPI\GraphQLAPI\Services\Helpers\EndpointHelpers(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Menus\\PluginMenu'] ?? $this->getPluginMenuService()), $a);
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Helpers\GeneralUtils' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Helpers\GeneralUtils
     */
    protected function getGeneralUtilsService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\GeneralUtils'] = new \GraphQLAPI\GraphQLAPI\Services\Helpers\GeneralUtils();
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Helpers\GraphQLQueryPostTypeHelpers' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Helpers\GraphQLQueryPostTypeHelpers
     */
    protected function getGraphQLQueryPostTypeHelpersService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\BlockAccessors\\PersistedQueryEndpointGraphiQLBlockAccessor'] ?? $this->getPersistedQueryEndpointGraphiQLBlockAccessorService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\GraphQLQueryPostTypeHelpers'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\GraphQLQueryPostTypeHelpers'];
        }
        $b = ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\BlockAccessors\\PersistedQueryEndpointAPIHierarchyBlockAccessor'] ?? $this->getPersistedQueryEndpointAPIHierarchyBlockAccessorService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\GraphQLQueryPostTypeHelpers'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\GraphQLQueryPostTypeHelpers'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\GraphQLQueryPostTypeHelpers'] = new \GraphQLAPI\GraphQLAPI\Services\Helpers\GraphQLQueryPostTypeHelpers($a, $b);
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Helpers\LocaleHelper' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Helpers\LocaleHelper
     */
    protected function getLocaleHelperService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\LocaleHelper'] = new \GraphQLAPI\GraphQLAPI\Services\Helpers\LocaleHelper();
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Helpers\MenuPageHelper' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Helpers\MenuPageHelper
     */
    protected function getMenuPageHelperService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\MenuPageHelper'] = new \GraphQLAPI\GraphQLAPI\Services\Helpers\MenuPageHelper();
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Helpers\URLParamHelpers' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Helpers\URLParamHelpers
     */
    protected function getURLParamHelpersService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\URLParamHelpers'] = new \GraphQLAPI\GraphQLAPI\Services\Helpers\URLParamHelpers();
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Hooks\ApplicationStateHookSet' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Hooks\ApplicationStateHookSet
     */
    protected function getApplicationStateHookSetService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Hooks\\ApplicationStateHookSet'] = new \GraphQLAPI\GraphQLAPI\Services\Hooks\ApplicationStateHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Hooks\QueryHookSet' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Hooks\QueryHookSet
     */
    protected function getQueryHookSetService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Hooks\\QueryHookSet'] = new \GraphQLAPI\GraphQLAPI\Services\Hooks\QueryHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\CustomPostTypeRegistryInterface'] ?? $this->getCustomPostTypeRegistryInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Hooks\VarsHookSet' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Hooks\VarsHookSet
     */
    protected function getVarsHookSetService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Hooks\\VarsHookSet'] = new \GraphQLAPI\GraphQLAPI\Services\Hooks\VarsHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\MenuPageAttachers\BottomMenuPageAttacher' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\MenuPageAttachers\BottomMenuPageAttacher
     */
    protected function getBottomMenuPageAttacherService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\MenuPageAttachers\\BottomMenuPageAttacher'] = new \GraphQLAPI\GraphQLAPI\Services\MenuPageAttachers\BottomMenuPageAttacher(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\MenuPageHelper'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\MenuPageHelper'] = new \GraphQLAPI\GraphQLAPI\Services\Helpers\MenuPageHelper())), ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService()), ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface'] ?? $this->getUserAuthorizationInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\MenuPageAttachers\TopMenuPageAttacher' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\MenuPageAttachers\TopMenuPageAttacher
     */
    protected function getTopMenuPageAttacherService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\MenuPageAttachers\\TopMenuPageAttacher'] = new \GraphQLAPI\GraphQLAPI\Services\MenuPageAttachers\TopMenuPageAttacher(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\MenuPageHelper'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\MenuPageHelper'] = new \GraphQLAPI\GraphQLAPI\Services\Helpers\MenuPageHelper())), ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService()), ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface'] ?? $this->getUserAuthorizationInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\MenuPages\AboutMenuPage' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\MenuPages\AboutMenuPage
     */
    protected function getAboutMenuPageService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\MenuPages\\AboutMenuPage'] = new \GraphQLAPI\GraphQLAPI\Services\MenuPages\AboutMenuPage(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\MenuPageHelper'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\MenuPageHelper'] = new \GraphQLAPI\GraphQLAPI\Services\Helpers\MenuPageHelper())), ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\EndpointHelpers'] ?? $this->getEndpointHelpersService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\MenuPages\GraphQLVoyagerMenuPage' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\MenuPages\GraphQLVoyagerMenuPage
     */
    protected function getGraphQLVoyagerMenuPageService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\MenuPages\\GraphQLVoyagerMenuPage'] = new \GraphQLAPI\GraphQLAPI\Services\MenuPages\GraphQLVoyagerMenuPage(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\MenuPageHelper'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\MenuPageHelper'] = new \GraphQLAPI\GraphQLAPI\Services\Helpers\MenuPageHelper())), ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\EndpointHelpers'] ?? $this->getEndpointHelpersService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\MenuPages\GraphiQLMenuPage' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\ConditionalOnContext\Admin\ConditionalOnContext\GraphiQLExplorerInAdminClient\Overrides\Services\MenuPages\GraphiQLMenuPage
     */
    protected function getGraphiQLMenuPageService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\MenuPages\\GraphiQLMenuPage'] = new \GraphQLAPI\GraphQLAPI\ConditionalOnContext\Admin\ConditionalOnContext\GraphiQLExplorerInAdminClient\Overrides\Services\MenuPages\GraphiQLMenuPage(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\MenuPageHelper'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\MenuPageHelper'] = new \GraphQLAPI\GraphQLAPI\Services\Helpers\MenuPageHelper())), ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\EndpointHelpers'] ?? $this->getEndpointHelpersService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\MenuPages\ModuleDocumentationMenuPage' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\MenuPages\ModuleDocumentationMenuPage
     */
    protected function getModuleDocumentationMenuPageService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\MenuPages\\ModuleDocumentationMenuPage'] = new \GraphQLAPI\GraphQLAPI\Services\MenuPages\ModuleDocumentationMenuPage(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\MenuPageHelper'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\MenuPageHelper'] = new \GraphQLAPI\GraphQLAPI\Services\Helpers\MenuPageHelper())), ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\EndpointHelpers'] ?? $this->getEndpointHelpersService()), ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\MenuPages\ModulesMenuPage' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\MenuPages\ModulesMenuPage
     */
    protected function getModulesMenuPageService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\MenuPages\\ModulesMenuPage'] = new \GraphQLAPI\GraphQLAPI\Services\MenuPages\ModulesMenuPage(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\MenuPageHelper'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\MenuPageHelper'] = new \GraphQLAPI\GraphQLAPI\Services\Helpers\MenuPageHelper())), ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\EndpointHelpers'] ?? $this->getEndpointHelpersService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\MenuPages\ReleaseNotesAboutMenuPage' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\MenuPages\ReleaseNotesAboutMenuPage
     */
    protected function getReleaseNotesAboutMenuPageService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\MenuPages\\ReleaseNotesAboutMenuPage'] = new \GraphQLAPI\GraphQLAPI\Services\MenuPages\ReleaseNotesAboutMenuPage(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\MenuPageHelper'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\MenuPageHelper'] = new \GraphQLAPI\GraphQLAPI\Services\Helpers\MenuPageHelper())), ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\EndpointHelpers'] ?? $this->getEndpointHelpersService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\MenuPages\SettingsMenuPage' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\MenuPages\SettingsMenuPage
     */
    protected function getSettingsMenuPageService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\MenuPages\\SettingsMenuPage'] = new \GraphQLAPI\GraphQLAPI\Services\MenuPages\SettingsMenuPage(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\MenuPageHelper'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\MenuPageHelper'] = new \GraphQLAPI\GraphQLAPI\Services\Helpers\MenuPageHelper())), ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\EndpointHelpers'] ?? $this->getEndpointHelpersService()), ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Menus\PluginMenu' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Menus\PluginMenu
     */
    protected function getPluginMenuService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Menus\\PluginMenu'] = new \GraphQLAPI\GraphQLAPI\Services\Menus\PluginMenu(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface'] ?? $this->getUserAuthorizationInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\ModuleTypeResolvers\ModuleTypeResolver' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\ModuleTypeResolvers\ModuleTypeResolver
     */
    protected function getModuleTypeResolverService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\ModuleTypeResolvers\\ModuleTypeResolver'] = new \GraphQLAPI\GraphQLAPI\Services\ModuleTypeResolvers\ModuleTypeResolver();
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\SchemaConfigurationExecuters\AccessControlSchemaConfigurationExecuter' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\SchemaConfigurationExecuters\AccessControlSchemaConfigurationExecuter
     */
    protected function getAccessControlSchemaConfigurationExecuterService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurationExecuters\\AccessControlSchemaConfigurationExecuter'] = new \GraphQLAPI\GraphQLAPI\Services\SchemaConfigurationExecuters\AccessControlSchemaConfigurationExecuter(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService()), ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurators\\AccessControlGraphQLQueryConfigurator'] ?? $this->getAccessControlGraphQLQueryConfiguratorService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\SchemaConfigurationExecuters\AdminSchemaSchemaConfigurationExecuter' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\SchemaConfigurationExecuters\AdminSchemaSchemaConfigurationExecuter
     */
    protected function getAdminSchemaSchemaConfigurationExecuterService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurationExecuters\\AdminSchemaSchemaConfigurationExecuter'] = new \GraphQLAPI\GraphQLAPI\Services\SchemaConfigurationExecuters\AdminSchemaSchemaConfigurationExecuter(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\SchemaConfigurationExecuters\CacheControlSchemaConfigurationExecuter' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\SchemaConfigurationExecuters\CacheControlSchemaConfigurationExecuter
     */
    protected function getCacheControlSchemaConfigurationExecuterService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurationExecuters\\CacheControlSchemaConfigurationExecuter'] = new \GraphQLAPI\GraphQLAPI\Services\SchemaConfigurationExecuters\CacheControlSchemaConfigurationExecuter(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService()), ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurators\\CacheControlGraphQLQueryConfigurator'] ?? $this->getCacheControlGraphQLQueryConfiguratorService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\SchemaConfigurationExecuters\DefaultSchemaModeSchemaConfigurationExecuter' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\SchemaConfigurationExecuters\DefaultSchemaModeSchemaConfigurationExecuter
     */
    protected function getDefaultSchemaModeSchemaConfigurationExecuterService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurationExecuters\\DefaultSchemaModeSchemaConfigurationExecuter'] = new \GraphQLAPI\GraphQLAPI\Services\SchemaConfigurationExecuters\DefaultSchemaModeSchemaConfigurationExecuter(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\SchemaConfigurationExecuters\MutationSchemeSchemaConfigurationExecuter' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\SchemaConfigurationExecuters\MutationSchemeSchemaConfigurationExecuter
     */
    protected function getMutationSchemeSchemaConfigurationExecuterService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurationExecuters\\MutationSchemeSchemaConfigurationExecuter'] = new \GraphQLAPI\GraphQLAPI\Services\SchemaConfigurationExecuters\MutationSchemeSchemaConfigurationExecuter(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\SchemaConfigurationExecuters\NamespacingSchemaConfigurationExecuter' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\SchemaConfigurationExecuters\NamespacingSchemaConfigurationExecuter
     */
    protected function getNamespacingSchemaConfigurationExecuterService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurationExecuters\\NamespacingSchemaConfigurationExecuter'] = new \GraphQLAPI\GraphQLAPI\Services\SchemaConfigurationExecuters\NamespacingSchemaConfigurationExecuter(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\SchemaConfiguratorExecuters\EditingPersistedQueryEndpointSchemaConfiguratorExecuter' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\SchemaConfiguratorExecuters\EditingPersistedQueryEndpointSchemaConfiguratorExecuter
     */
    protected function getEditingPersistedQueryEndpointSchemaConfiguratorExecuterService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfiguratorExecuters\\EditingPersistedQueryEndpointSchemaConfiguratorExecuter'] = new \GraphQLAPI\GraphQLAPI\Services\SchemaConfiguratorExecuters\EditingPersistedQueryEndpointSchemaConfiguratorExecuter(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\EndpointHelpers'] ?? $this->getEndpointHelpersService()), ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurators\\PersistedQueryEndpointSchemaConfigurator'] ?? $this->getPersistedQueryEndpointSchemaConfiguratorService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\SchemaConfiguratorExecuters\EndpointSchemaConfiguratorExecuter' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\SchemaConfiguratorExecuters\EndpointSchemaConfiguratorExecuter
     */
    protected function getEndpointSchemaConfiguratorExecuterService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfiguratorExecuters\\EndpointSchemaConfiguratorExecuter'] = new \GraphQLAPI\GraphQLAPI\Services\SchemaConfiguratorExecuters\EndpointSchemaConfiguratorExecuter(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurators\\EndpointSchemaConfigurator'] ?? $this->getEndpointSchemaConfiguratorService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\SchemaConfiguratorExecuters\PersistedQueryEndpointSchemaConfiguratorExecuter' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\SchemaConfiguratorExecuters\PersistedQueryEndpointSchemaConfiguratorExecuter
     */
    protected function getPersistedQueryEndpointSchemaConfiguratorExecuterService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfiguratorExecuters\\PersistedQueryEndpointSchemaConfiguratorExecuter'] = new \GraphQLAPI\GraphQLAPI\Services\SchemaConfiguratorExecuters\PersistedQueryEndpointSchemaConfiguratorExecuter(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurators\\PersistedQueryEndpointSchemaConfigurator'] ?? $this->getPersistedQueryEndpointSchemaConfiguratorService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\SchemaConfigurators\AccessControlGraphQLQueryConfigurator' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\SchemaConfigurators\AccessControlGraphQLQueryConfigurator
     */
    protected function getAccessControlGraphQLQueryConfiguratorService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurators\\AccessControlGraphQLQueryConfigurator'] = new \GraphQLAPI\GraphQLAPI\Services\SchemaConfigurators\AccessControlGraphQLQueryConfigurator(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\SchemaConfigurators\CacheControlGraphQLQueryConfigurator' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\SchemaConfigurators\CacheControlGraphQLQueryConfigurator
     */
    protected function getCacheControlGraphQLQueryConfiguratorService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurators\\CacheControlGraphQLQueryConfigurator'] = new \GraphQLAPI\GraphQLAPI\Services\SchemaConfigurators\CacheControlGraphQLQueryConfigurator(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\SchemaConfigurators\EndpointSchemaConfigurator' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\SchemaConfigurators\EndpointSchemaConfigurator
     */
    protected function getEndpointSchemaConfiguratorService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurators\\EndpointSchemaConfigurator'] = new \GraphQLAPI\GraphQLAPI\Services\SchemaConfigurators\EndpointSchemaConfigurator(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService()), ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\EndpointSchemaConfigurationExecuterRegistryInterface'] ?? $this->getEndpointSchemaConfigurationExecuterRegistryInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\SchemaConfigurators\PersistedQueryEndpointSchemaConfigurator' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\SchemaConfigurators\PersistedQueryEndpointSchemaConfigurator
     */
    protected function getPersistedQueryEndpointSchemaConfiguratorService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfigurators\\PersistedQueryEndpointSchemaConfigurator'] = new \GraphQLAPI\GraphQLAPI\Services\SchemaConfigurators\PersistedQueryEndpointSchemaConfigurator(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService()), ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\PersistedQueryEndpointSchemaConfigurationExecuterRegistryInterface'] ?? $this->getPersistedQueryEndpointSchemaConfigurationExecuterRegistryInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Taxonomies\GraphQLQueryTaxonomy' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Taxonomies\GraphQLQueryTaxonomy
     */
    protected function getGraphQLQueryTaxonomyService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Taxonomies\\GraphQLQueryTaxonomy'] = new \GraphQLAPI\GraphQLAPI\Services\Taxonomies\GraphQLQueryTaxonomy();
    }

    /**
     * Gets the public 'GraphQLAPI\MarkdownConvertor\MarkdownConvertorInterface' shared autowired service.
     *
     * @return \GraphQLAPI\MarkdownConvertor\MarkdownConvertor
     */
    protected function getMarkdownConvertorInterfaceService()
    {
        return $this->services['GraphQLAPI\\MarkdownConvertor\\MarkdownConvertorInterface'] = new \GraphQLAPI\MarkdownConvertor\MarkdownConvertor();
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLClientsForWP\Clients\GraphiQLClient' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLClientsForWP\ConditionalOnContext\UseGraphiQLExplorer\Overrides\Services\Clients\GraphiQLWithExplorerClient
     */
    protected function getGraphiQLClientService()
    {
        return $this->services['GraphQLByPoP\\GraphQLClientsForWP\\Clients\\GraphiQLClient'] = new \GraphQLByPoP\GraphQLClientsForWP\ConditionalOnContext\UseGraphiQLExplorer\Overrides\Services\Clients\GraphiQLWithExplorerClient();
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLClientsForWP\Clients\VoyagerClient' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLClientsForWP\Clients\VoyagerClient
     */
    protected function getVoyagerClientService()
    {
        return $this->services['GraphQLByPoP\\GraphQLClientsForWP\\Clients\\VoyagerClient'] = new \GraphQLByPoP\GraphQLClientsForWP\Clients\VoyagerClient();
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLEndpointForWP\EndpointHandlers\GraphQLEndpointHandler' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLEndpointForWP\EndpointHandlers\GraphQLEndpointHandler
     */
    protected function getGraphQLEndpointHandlerService()
    {
        return $this->services['GraphQLByPoP\\GraphQLEndpointForWP\\EndpointHandlers\\GraphQLEndpointHandler'] = new \GraphQLByPoP\GraphQLEndpointForWP\EndpointHandlers\GraphQLEndpointHandler();
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLQuery\Schema\GraphQLQueryConvertorInterface' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLQuery\Schema\GraphQLQueryConvertor
     */
    protected function getGraphQLQueryConvertorInterfaceService()
    {
        return $this->services['GraphQLByPoP\\GraphQLQuery\\Schema\\GraphQLQueryConvertorInterface'] = new \GraphQLByPoP\GraphQLQuery\Schema\GraphQLQueryConvertor(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()));
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLRequest\Execution\QueryRetrieverInterface' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLRequest\Execution\QueryRetriever
     */
    protected function getQueryRetrieverInterfaceService()
    {
        return $this->services['GraphQLByPoP\\GraphQLRequest\\Execution\\QueryRetrieverInterface'] = new \GraphQLByPoP\GraphQLRequest\Execution\QueryRetriever();
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLRequest\Hooks\VarsHookSet' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLRequest\Hooks\VarsHookSet
     */
    protected function getVarsHookSet2Service()
    {
        return $this->services['GraphQLByPoP\\GraphQLRequest\\Hooks\\VarsHookSet'] = new \GraphQLByPoP\GraphQLRequest\Hooks\VarsHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['GraphQLByPoP\\GraphQLRequest\\Execution\\QueryRetrieverInterface'] ?? ($this->services['GraphQLByPoP\\GraphQLRequest\\Execution\\QueryRetrieverInterface'] = new \GraphQLByPoP\GraphQLRequest\Execution\QueryRetriever())));
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLRequest\PersistedQueries\GraphQLPersistedQueryManagerInterface' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLRequest\PersistedQueries\GraphQLPersistedQueryManager
     */
    protected function getGraphQLPersistedQueryManagerInterfaceService()
    {
        return $this->services['GraphQLByPoP\\GraphQLRequest\\PersistedQueries\\GraphQLPersistedQueryManagerInterface'] = new \GraphQLByPoP\GraphQLRequest\PersistedQueries\GraphQLPersistedQueryManager();
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\ConditionalOnComponent\CacheControl\ConditionalOnComponent\AccessControl\ConditionalOnContext\PrivateSchema\SchemaServices\DirectiveResolvers\SchemaNoCacheCacheControlDirectiveResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\ConditionalOnComponent\CacheControl\ConditionalOnComponent\AccessControl\ConditionalOnContext\PrivateSchema\SchemaServices\DirectiveResolvers\SchemaNoCacheCacheControlDirectiveResolver
     */
    protected function getSchemaNoCacheCacheControlDirectiveResolverService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\ConditionalOnComponent\\CacheControl\\ConditionalOnComponent\\AccessControl\\ConditionalOnContext\\PrivateSchema\\SchemaServices\\DirectiveResolvers\\SchemaNoCacheCacheControlDirectiveResolver'] = new \GraphQLByPoP\GraphQLServer\ConditionalOnComponent\CacheControl\ConditionalOnComponent\AccessControl\ConditionalOnContext\PrivateSchema\SchemaServices\DirectiveResolvers\SchemaNoCacheCacheControlDirectiveResolver();
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\Enums\DirectiveLocationEnum' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\Enums\DirectiveLocationEnum
     */
    protected function getDirectiveLocationEnumService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\Enums\\DirectiveLocationEnum'] = new \GraphQLByPoP\GraphQLServer\Enums\DirectiveLocationEnum();
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\Enums\DirectiveTypeEnum' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\Enums\DirectiveTypeEnum
     */
    protected function getDirectiveTypeEnumService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\Enums\\DirectiveTypeEnum'] = new \GraphQLByPoP\GraphQLServer\Enums\DirectiveTypeEnum();
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\Enums\TypeKindEnum' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\Enums\TypeKindEnum
     */
    protected function getTypeKindEnumService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\Enums\\TypeKindEnum'] = new \GraphQLByPoP\GraphQLServer\Enums\TypeKindEnum();
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\FieldResolvers\DirectiveFieldResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\FieldResolvers\DirectiveFieldResolver
     */
    protected function getDirectiveFieldResolverService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\DirectiveFieldResolver'] = new \GraphQLByPoP\GraphQLServer\FieldResolvers\DirectiveFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\FieldResolvers\EmbeddableFields\EchoOperatorGlobalFieldResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\FieldResolvers\EmbeddableFields\EchoOperatorGlobalFieldResolver
     */
    protected function getEchoOperatorGlobalFieldResolverService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\EmbeddableFields\\EchoOperatorGlobalFieldResolver'] = new \GraphQLByPoP\GraphQLServer\FieldResolvers\EmbeddableFields\EchoOperatorGlobalFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\FieldResolvers\EnumValueFieldResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\FieldResolvers\EnumValueFieldResolver
     */
    protected function getEnumValueFieldResolverService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\EnumValueFieldResolver'] = new \GraphQLByPoP\GraphQLServer\FieldResolvers\EnumValueFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\FieldResolvers\Extensions\FilterSystemDirectiveSchemaFieldResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\FieldResolvers\Extensions\FilterSystemDirectiveSchemaFieldResolver
     */
    protected function getFilterSystemDirectiveSchemaFieldResolverService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\Extensions\\FilterSystemDirectiveSchemaFieldResolver'] = new \GraphQLByPoP\GraphQLServer\FieldResolvers\Extensions\FilterSystemDirectiveSchemaFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\FieldResolvers\Extensions\NamespacedTypeFieldResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\FieldResolvers\Extensions\NamespacedTypeFieldResolver
     */
    protected function getNamespacedTypeFieldResolverService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\Extensions\\NamespacedTypeFieldResolver'] = new \GraphQLByPoP\GraphQLServer\FieldResolvers\Extensions\NamespacedTypeFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\FieldResolvers\FieldFieldResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\FieldResolvers\FieldFieldResolver
     */
    protected function getFieldFieldResolverService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\FieldFieldResolver'] = new \GraphQLByPoP\GraphQLServer\FieldResolvers\FieldFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\FieldResolvers\GlobalFieldResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\FieldResolvers\GlobalFieldResolver
     */
    protected function getGlobalFieldResolverService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\GlobalFieldResolver'] = new \GraphQLByPoP\GraphQLServer\FieldResolvers\GlobalFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\FieldResolvers\InputValueFieldResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\FieldResolvers\InputValueFieldResolver
     */
    protected function getInputValueFieldResolverService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\InputValueFieldResolver'] = new \GraphQLByPoP\GraphQLServer\FieldResolvers\InputValueFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\FieldResolvers\RegisterQueryAndMutationRootsRootFieldResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\FieldResolvers\RegisterQueryAndMutationRootsRootFieldResolver
     */
    protected function getRegisterQueryAndMutationRootsRootFieldResolverService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\RegisterQueryAndMutationRootsRootFieldResolver'] = new \GraphQLByPoP\GraphQLServer\FieldResolvers\RegisterQueryAndMutationRootsRootFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\FieldResolvers\RootFieldResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\FieldResolvers\RootFieldResolver
     */
    protected function getRootFieldResolverService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\RootFieldResolver'] = new \GraphQLByPoP\GraphQLServer\FieldResolvers\RootFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\FieldResolvers\SchemaFieldResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\FieldResolvers\SchemaFieldResolver
     */
    protected function getSchemaFieldResolverService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\SchemaFieldResolver'] = new \GraphQLByPoP\GraphQLServer\FieldResolvers\SchemaFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\FieldResolvers\TypeFieldResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\FieldResolvers\TypeFieldResolver
     */
    protected function getTypeFieldResolverService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\TypeFieldResolver'] = new \GraphQLByPoP\GraphQLServer\FieldResolvers\TypeFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\Hooks\DBEntriesHookSet' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\Hooks\DBEntriesHookSet
     */
    protected function getDBEntriesHookSetService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\Hooks\\DBEntriesHookSet'] = new \GraphQLByPoP\GraphQLServer\Hooks\DBEntriesHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\Hooks\NestedMutationHookSet' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\Hooks\NestedMutationHookSet
     */
    protected function getNestedMutationHookSetService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\Hooks\\NestedMutationHookSet'] = new \GraphQLByPoP\GraphQLServer\Hooks\NestedMutationHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\Hooks\SchemaCacheHookSet' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\Hooks\SchemaCacheHookSet
     */
    protected function getSchemaCacheHookSetService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\Hooks\\SchemaCacheHookSet'] = new \GraphQLByPoP\GraphQLServer\Hooks\SchemaCacheHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\Hooks\VarsHookSet' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\Hooks\VarsHookSet
     */
    protected function getVarsHookSet3Service()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\Hooks\\VarsHookSet'] = new \GraphQLByPoP\GraphQLServer\Hooks\VarsHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\ModuleProcessors\RootRelationalFieldDataloadModuleProcessor' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\ModuleProcessors\RootRelationalFieldDataloadModuleProcessor
     */
    protected function getRootRelationalFieldDataloadModuleProcessorService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\ModuleProcessors\\RootRelationalFieldDataloadModuleProcessor'] = new \GraphQLByPoP\GraphQLServer\ModuleProcessors\RootRelationalFieldDataloadModuleProcessor(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathHelpersInterface'] ?? $this->getModulePathHelpersInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleFiltering\\ModuleFilterManagerInterface'] ?? $this->getModuleFilterManagerInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] = new \PoP\ComponentModel\ModuleProcessors\ModuleProcessorManager())), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\DataloadHelperServiceInterface'] ?? $this->getDataloadHelperServiceInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface'] ?? $this->getRequestHelperServiceInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\ObjectModels\MutationRoot' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\ObjectModels\MutationRoot
     */
    protected function getMutationRootService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\ObjectModels\\MutationRoot'] = new \GraphQLByPoP\GraphQLServer\ObjectModels\MutationRoot();
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\ObjectModels\QueryRoot' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\ObjectModels\QueryRoot
     */
    protected function getQueryRootService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\ObjectModels\\QueryRoot'] = new \GraphQLByPoP\GraphQLServer\ObjectModels\QueryRoot();
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\Registries\SchemaDefinitionReferenceRegistryInterface' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\Registries\SchemaDefinitionReferenceRegistry
     */
    protected function getSchemaDefinitionReferenceRegistryInterfaceService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\Registries\\SchemaDefinitionReferenceRegistryInterface'] = new \GraphQLByPoP\GraphQLServer\Registries\SchemaDefinitionReferenceRegistry(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] = new \GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionService())));
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\RouteModuleProcessors\EntryRouteModuleProcessor' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\RouteModuleProcessors\EntryRouteModuleProcessor
     */
    protected function getEntryRouteModuleProcessorService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\RouteModuleProcessors\\EntryRouteModuleProcessor'] = new \GraphQLByPoP\GraphQLServer\RouteModuleProcessors\EntryRouteModuleProcessor(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())));
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionServiceInterface' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionService
     */
    protected function getGraphQLSchemaDefinitionServiceInterfaceService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\Schema\\GraphQLSchemaDefinitionServiceInterface'] = new \GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionService();
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\TypeDataLoaders\MutationRootTypeDataLoader' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\TypeDataLoaders\MutationRootTypeDataLoader
     */
    protected function getMutationRootTypeDataLoaderService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\TypeDataLoaders\\MutationRootTypeDataLoader'] = new \GraphQLByPoP\GraphQLServer\TypeDataLoaders\MutationRootTypeDataLoader(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\TypeDataLoaders\QueryRootTypeDataLoader' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\TypeDataLoaders\QueryRootTypeDataLoader
     */
    protected function getQueryRootTypeDataLoaderService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\TypeDataLoaders\\QueryRootTypeDataLoader'] = new \GraphQLByPoP\GraphQLServer\TypeDataLoaders\QueryRootTypeDataLoader(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\TypeDataLoaders\SchemaDefinitionReferenceTypeDataLoader' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\TypeDataLoaders\SchemaDefinitionReferenceTypeDataLoader
     */
    protected function getSchemaDefinitionReferenceTypeDataLoaderService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\TypeDataLoaders\\SchemaDefinitionReferenceTypeDataLoader'] = new \GraphQLByPoP\GraphQLServer\TypeDataLoaders\SchemaDefinitionReferenceTypeDataLoader(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\TypeDataLoaders\SchemaTypeDataLoader' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\TypeDataLoaders\SchemaTypeDataLoader
     */
    protected function getSchemaTypeDataLoaderService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\TypeDataLoaders\\SchemaTypeDataLoader'] = new \GraphQLByPoP\GraphQLServer\TypeDataLoaders\SchemaTypeDataLoader(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\TypeResolvers\DirectiveTypeResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\TypeResolvers\DirectiveTypeResolver
     */
    protected function getDirectiveTypeResolverService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\DirectiveTypeResolver'] = new \GraphQLByPoP\GraphQLServer\TypeResolvers\DirectiveTypeResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ErrorHandling\\ErrorProviderInterface'] ?? $this->getErrorProviderInterfaceService()), ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] = new \GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionService())));
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\TypeResolvers\EnumValueTypeResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\TypeResolvers\EnumValueTypeResolver
     */
    protected function getEnumValueTypeResolverService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\EnumValueTypeResolver'] = new \GraphQLByPoP\GraphQLServer\TypeResolvers\EnumValueTypeResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ErrorHandling\\ErrorProviderInterface'] ?? $this->getErrorProviderInterfaceService()), ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] = new \GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionService())));
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\TypeResolvers\FieldTypeResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\TypeResolvers\FieldTypeResolver
     */
    protected function getFieldTypeResolverService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\FieldTypeResolver'] = new \GraphQLByPoP\GraphQLServer\TypeResolvers\FieldTypeResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ErrorHandling\\ErrorProviderInterface'] ?? $this->getErrorProviderInterfaceService()), ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] = new \GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionService())));
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\TypeResolvers\InputValueTypeResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\TypeResolvers\InputValueTypeResolver
     */
    protected function getInputValueTypeResolverService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\InputValueTypeResolver'] = new \GraphQLByPoP\GraphQLServer\TypeResolvers\InputValueTypeResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ErrorHandling\\ErrorProviderInterface'] ?? $this->getErrorProviderInterfaceService()), ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] = new \GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionService())));
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\TypeResolvers\MutationRootTypeResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\TypeResolvers\MutationRootTypeResolver
     */
    protected function getMutationRootTypeResolverService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\MutationRootTypeResolver'] = new \GraphQLByPoP\GraphQLServer\TypeResolvers\MutationRootTypeResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ErrorHandling\\ErrorProviderInterface'] ?? $this->getErrorProviderInterfaceService()), ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] = new \GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionService())));
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\TypeResolvers\QueryRootTypeResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\TypeResolvers\QueryRootTypeResolver
     */
    protected function getQueryRootTypeResolverService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\QueryRootTypeResolver'] = new \GraphQLByPoP\GraphQLServer\TypeResolvers\QueryRootTypeResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ErrorHandling\\ErrorProviderInterface'] ?? $this->getErrorProviderInterfaceService()), ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] = new \GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionService())));
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\TypeResolvers\SchemaTypeResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\TypeResolvers\SchemaTypeResolver
     */
    protected function getSchemaTypeResolverService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\SchemaTypeResolver'] = new \GraphQLByPoP\GraphQLServer\TypeResolvers\SchemaTypeResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ErrorHandling\\ErrorProviderInterface'] ?? $this->getErrorProviderInterfaceService()), ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] = new \GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionService())));
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\TypeResolvers\TypeTypeResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\TypeResolvers\TypeTypeResolver
     */
    protected function getTypeTypeResolverService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\TypeTypeResolver'] = new \GraphQLByPoP\GraphQLServer\TypeResolvers\TypeTypeResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ErrorHandling\\ErrorProviderInterface'] ?? $this->getErrorProviderInterfaceService()), ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] = new \GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionService())));
    }

    /**
     * Gets the public 'PoPSchema\CategoriesWP\Hooks\RoutingStateHookSet' shared autowired service.
     *
     * @return \PoPSchema\CategoriesWP\Hooks\RoutingStateHookSet
     */
    protected function getRoutingStateHookSetService()
    {
        return $this->services['PoPSchema\\CategoriesWP\\Hooks\\RoutingStateHookSet'] = new \PoPSchema\CategoriesWP\Hooks\RoutingStateHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'PoPSchema\CategoriesWP\LooseContracts\LooseContractResolutionSet' shared autowired service.
     *
     * @return \PoPSchema\CategoriesWP\LooseContracts\LooseContractResolutionSet
     */
    protected function getLooseContractResolutionSetService()
    {
        return $this->services['PoPSchema\\CategoriesWP\\LooseContracts\\LooseContractResolutionSet'] = new \PoPSchema\CategoriesWP\LooseContracts\LooseContractResolutionSet(($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] ?? ($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] = new \PoP\LooseContracts\LooseContractManager())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())));
    }

    /**
     * Gets the public 'PoPSchema\Categories\Hooks\VarsHookSet' shared autowired service.
     *
     * @return \PoPSchema\Categories\Hooks\VarsHookSet
     */
    protected function getVarsHookSet4Service()
    {
        return $this->services['PoPSchema\\Categories\\Hooks\\VarsHookSet'] = new \PoPSchema\Categories\Hooks\VarsHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'PoPSchema\Categories\LooseContracts\LooseContractSet' shared autowired service.
     *
     * @return \PoPSchema\Categories\LooseContracts\LooseContractSet
     */
    protected function getLooseContractSetService()
    {
        return $this->services['PoPSchema\\Categories\\LooseContracts\\LooseContractSet'] = new \PoPSchema\Categories\LooseContracts\LooseContractSet(($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] ?? ($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] = new \PoP\LooseContracts\LooseContractManager())));
    }

    /**
     * Gets the public 'PoPSchema\Categories\ModuleProcessors\FilterInnerModuleProcessor' shared autowired service.
     *
     * @return \PoPSchema\Categories\ModuleProcessors\FilterInnerModuleProcessor
     */
    protected function getFilterInnerModuleProcessorService()
    {
        return $this->services['PoPSchema\\Categories\\ModuleProcessors\\FilterInnerModuleProcessor'] = new \PoPSchema\Categories\ModuleProcessors\FilterInnerModuleProcessor(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathHelpersInterface'] ?? $this->getModulePathHelpersInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleFiltering\\ModuleFilterManagerInterface'] ?? $this->getModuleFilterManagerInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] = new \PoP\ComponentModel\ModuleProcessors\ModuleProcessorManager())), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\DataloadHelperServiceInterface'] ?? $this->getDataloadHelperServiceInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface'] ?? $this->getRequestHelperServiceInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\CommentMetaWP\Hooks\QueryHookSet' shared autowired service.
     *
     * @return \PoPSchema\CommentMetaWP\Hooks\QueryHookSet
     */
    protected function getQueryHookSet2Service()
    {
        return $this->services['PoPSchema\\CommentMetaWP\\Hooks\\QueryHookSet'] = new \PoPSchema\CommentMetaWP\Hooks\QueryHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'PoPSchema\CommentMeta\FieldResolvers\CommentFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\CommentMeta\FieldResolvers\CommentFieldResolver
     */
    protected function getCommentFieldResolverService()
    {
        return $this->services['PoPSchema\\CommentMeta\\FieldResolvers\\CommentFieldResolver'] = new \PoPSchema\CommentMeta\FieldResolvers\CommentFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\CommentMeta\TypeAPIs\CommentMetaTypeAPIInterface' shared autowired service.
     *
     * @return \PoPSchema\CommentMetaWP\TypeAPIs\CommentMetaTypeAPI
     */
    protected function getCommentMetaTypeAPIInterfaceService()
    {
        return $this->services['PoPSchema\\CommentMeta\\TypeAPIs\\CommentMetaTypeAPIInterface'] = new \PoPSchema\CommentMetaWP\TypeAPIs\CommentMetaTypeAPI();
    }

    /**
     * Gets the public 'PoPSchema\CommentMutations\FieldResolvers\CommentFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\CommentMutations\FieldResolvers\CommentFieldResolver
     */
    protected function getCommentFieldResolver2Service()
    {
        return $this->services['PoPSchema\\CommentMutations\\FieldResolvers\\CommentFieldResolver'] = new \PoPSchema\CommentMutations\FieldResolvers\CommentFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())), ($this->services['PoPSchema\\Comments\\TypeAPIs\\CommentTypeAPIInterface'] ?? $this->getCommentTypeAPIInterface2Service()));
    }

    /**
     * Gets the public 'PoPSchema\CommentMutations\FieldResolvers\CustomPostFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\CommentMutations\FieldResolvers\CustomPostFieldResolver
     */
    protected function getCustomPostFieldResolverService()
    {
        return $this->services['PoPSchema\\CommentMutations\\FieldResolvers\\CustomPostFieldResolver'] = new \PoPSchema\CommentMutations\FieldResolvers\CustomPostFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\CommentMutations\FieldResolvers\RootFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\CommentMutations\FieldResolvers\RootFieldResolver
     */
    protected function getRootFieldResolver2Service()
    {
        return $this->services['PoPSchema\\CommentMutations\\FieldResolvers\\RootFieldResolver'] = new \PoPSchema\CommentMutations\FieldResolvers\RootFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\CommentMutations\MutationResolvers\AddCommentToCustomPostMutationResolver' shared autowired service.
     *
     * @return \PoPSchema\CommentMutations\MutationResolvers\AddCommentToCustomPostMutationResolver
     */
    protected function getAddCommentToCustomPostMutationResolverService()
    {
        return $this->services['PoPSchema\\CommentMutations\\MutationResolvers\\AddCommentToCustomPostMutationResolver'] = new \PoPSchema\CommentMutations\MutationResolvers\AddCommentToCustomPostMutationResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoPSchema\\Comments\\TypeAPIs\\CommentTypeAPIInterface'] ?? $this->getCommentTypeAPIInterface2Service()), ($this->services['PoPSchema\\CommentMutations\\TypeAPIs\\CommentTypeMutationAPIInterface'] ?? ($this->services['PoPSchema\\CommentMutations\\TypeAPIs\\CommentTypeMutationAPIInterface'] = new \PoPSchema\CommentMutationsWP\TypeAPIs\CommentTypeMutationAPI())), ($this->services['PoPSchema\\Users\\TypeAPIs\\UserTypeAPIInterface'] ?? $this->getUserTypeAPIInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\CommentMutations\MutationResolvers\MutationInputProperties' shared autowired service.
     *
     * @return \PoPSchema\CommentMutations\MutationResolvers\MutationInputProperties
     */
    protected function getMutationInputPropertiesService()
    {
        return $this->services['PoPSchema\\CommentMutations\\MutationResolvers\\MutationInputProperties'] = new \PoPSchema\CommentMutations\MutationResolvers\MutationInputProperties();
    }

    /**
     * Gets the public 'PoPSchema\CommentMutations\TypeAPIs\CommentTypeMutationAPIInterface' shared autowired service.
     *
     * @return \PoPSchema\CommentMutationsWP\TypeAPIs\CommentTypeMutationAPI
     */
    protected function getCommentTypeMutationAPIInterfaceService()
    {
        return $this->services['PoPSchema\\CommentMutations\\TypeAPIs\\CommentTypeMutationAPIInterface'] = new \PoPSchema\CommentMutationsWP\TypeAPIs\CommentTypeMutationAPI();
    }

    /**
     * Gets the public 'PoPSchema\CommentsWP\LooseContracts\LooseContractResolutionSet' shared autowired service.
     *
     * @return \PoPSchema\CommentsWP\LooseContracts\LooseContractResolutionSet
     */
    protected function getLooseContractResolutionSet2Service()
    {
        return $this->services['PoPSchema\\CommentsWP\\LooseContracts\\LooseContractResolutionSet'] = new \PoPSchema\CommentsWP\LooseContracts\LooseContractResolutionSet(($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] ?? ($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] = new \PoP\LooseContracts\LooseContractManager())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())));
    }

    /**
     * Gets the public 'PoPSchema\Comments\ConditionalOnComponent\Users\FieldResolvers\CommentFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\Comments\ConditionalOnComponent\Users\FieldResolvers\CommentFieldResolver
     */
    protected function getCommentFieldResolver3Service()
    {
        return $this->services['PoPSchema\\Comments\\ConditionalOnComponent\\Users\\FieldResolvers\\CommentFieldResolver'] = new \PoPSchema\Comments\ConditionalOnComponent\Users\FieldResolvers\CommentFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())), ($this->services['PoPSchema\\Comments\\TypeAPIs\\CommentTypeAPIInterface'] ?? $this->getCommentTypeAPIInterface2Service()), ($this->services['PoPSchema\\Comments\\ConditionalOnComponent\\Users\\TypeAPIs\\CommentTypeAPIInterface'] ?? ($this->services['PoPSchema\\Comments\\ConditionalOnComponent\\Users\\TypeAPIs\\CommentTypeAPIInterface'] = new \PoPSchema\CommentsWP\ConditionalOnComponent\Users\TypeAPIs\CommentTypeAPI())), ($this->services['PoPSchema\\Users\\TypeAPIs\\UserTypeAPIInterface'] ?? $this->getUserTypeAPIInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\Comments\ConditionalOnComponent\Users\FieldResolvers\CommentUserFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\Comments\ConditionalOnComponent\Users\FieldResolvers\CommentUserFieldResolver
     */
    protected function getCommentUserFieldResolverService()
    {
        return $this->services['PoPSchema\\Comments\\ConditionalOnComponent\\Users\\FieldResolvers\\CommentUserFieldResolver'] = new \PoPSchema\Comments\ConditionalOnComponent\Users\FieldResolvers\CommentUserFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())), ($this->services['PoPSchema\\Comments\\ConditionalOnComponent\\Users\\TypeAPIs\\CommentTypeAPIInterface'] ?? ($this->services['PoPSchema\\Comments\\ConditionalOnComponent\\Users\\TypeAPIs\\CommentTypeAPIInterface'] = new \PoPSchema\CommentsWP\ConditionalOnComponent\Users\TypeAPIs\CommentTypeAPI())));
    }

    /**
     * Gets the public 'PoPSchema\Comments\ConditionalOnComponent\Users\TypeAPIs\CommentTypeAPIInterface' shared autowired service.
     *
     * @return \PoPSchema\CommentsWP\ConditionalOnComponent\Users\TypeAPIs\CommentTypeAPI
     */
    protected function getCommentTypeAPIInterfaceService()
    {
        return $this->services['PoPSchema\\Comments\\ConditionalOnComponent\\Users\\TypeAPIs\\CommentTypeAPIInterface'] = new \PoPSchema\CommentsWP\ConditionalOnComponent\Users\TypeAPIs\CommentTypeAPI();
    }

    /**
     * Gets the public 'PoPSchema\Comments\FieldInterfaceResolvers\CommentableFieldInterfaceResolver' shared autowired service.
     *
     * @return \PoPSchema\Comments\FieldInterfaceResolvers\CommentableFieldInterfaceResolver
     */
    protected function getCommentableFieldInterfaceResolverService()
    {
        return $this->services['PoPSchema\\Comments\\FieldInterfaceResolvers\\CommentableFieldInterfaceResolver'] = new \PoPSchema\Comments\FieldInterfaceResolvers\CommentableFieldInterfaceResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())));
    }

    /**
     * Gets the public 'PoPSchema\Comments\FieldResolvers\CommentFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\Comments\FieldResolvers\CommentFieldResolver
     */
    protected function getCommentFieldResolver4Service()
    {
        return $this->services['PoPSchema\\Comments\\FieldResolvers\\CommentFieldResolver'] = new \PoPSchema\Comments\FieldResolvers\CommentFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())), ($this->services['PoPSchema\\Comments\\TypeAPIs\\CommentTypeAPIInterface'] ?? $this->getCommentTypeAPIInterface2Service()));
    }

    /**
     * Gets the public 'PoPSchema\Comments\FieldResolvers\CustomPostFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\Comments\FieldResolvers\CustomPostFieldResolver
     */
    protected function getCustomPostFieldResolver2Service()
    {
        return $this->services['PoPSchema\\Comments\\FieldResolvers\\CustomPostFieldResolver'] = new \PoPSchema\Comments\FieldResolvers\CustomPostFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())), ($this->services['PoPSchema\\Comments\\TypeAPIs\\CommentTypeAPIInterface'] ?? $this->getCommentTypeAPIInterface2Service()));
    }

    /**
     * Gets the public 'PoPSchema\Comments\Hooks\WhitelistParamHookSet' shared autowired service.
     *
     * @return \PoPSchema\Comments\Hooks\WhitelistParamHookSet
     */
    protected function getWhitelistParamHookSetService()
    {
        return $this->services['PoPSchema\\Comments\\Hooks\\WhitelistParamHookSet'] = new \PoPSchema\Comments\Hooks\WhitelistParamHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'PoPSchema\Comments\LooseContracts\LooseContractSet' shared autowired service.
     *
     * @return \PoPSchema\Comments\LooseContracts\LooseContractSet
     */
    protected function getLooseContractSet2Service()
    {
        return $this->services['PoPSchema\\Comments\\LooseContracts\\LooseContractSet'] = new \PoPSchema\Comments\LooseContracts\LooseContractSet(($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] ?? ($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] = new \PoP\LooseContracts\LooseContractManager())));
    }

    /**
     * Gets the public 'PoPSchema\Comments\ModuleProcessors\CommentFilterInnerModuleProcessor' shared autowired service.
     *
     * @return \PoPSchema\Comments\ModuleProcessors\CommentFilterInnerModuleProcessor
     */
    protected function getCommentFilterInnerModuleProcessorService()
    {
        return $this->services['PoPSchema\\Comments\\ModuleProcessors\\CommentFilterInnerModuleProcessor'] = new \PoPSchema\Comments\ModuleProcessors\CommentFilterInnerModuleProcessor(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathHelpersInterface'] ?? $this->getModulePathHelpersInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleFiltering\\ModuleFilterManagerInterface'] ?? $this->getModuleFilterManagerInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] = new \PoP\ComponentModel\ModuleProcessors\ModuleProcessorManager())), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\DataloadHelperServiceInterface'] ?? $this->getDataloadHelperServiceInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface'] ?? $this->getRequestHelperServiceInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\Comments\ModuleProcessors\CommentRelationalFieldDataloadModuleProcessor' shared autowired service.
     *
     * @return \PoPSchema\Comments\ModuleProcessors\CommentRelationalFieldDataloadModuleProcessor
     */
    protected function getCommentRelationalFieldDataloadModuleProcessorService()
    {
        return $this->services['PoPSchema\\Comments\\ModuleProcessors\\CommentRelationalFieldDataloadModuleProcessor'] = new \PoPSchema\Comments\ModuleProcessors\CommentRelationalFieldDataloadModuleProcessor(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathHelpersInterface'] ?? $this->getModulePathHelpersInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleFiltering\\ModuleFilterManagerInterface'] ?? $this->getModuleFilterManagerInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] = new \PoP\ComponentModel\ModuleProcessors\ModuleProcessorManager())), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\DataloadHelperServiceInterface'] ?? $this->getDataloadHelperServiceInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface'] ?? $this->getRequestHelperServiceInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\Comments\TypeAPIs\CommentTypeAPIInterface' shared autowired service.
     *
     * @return \PoPSchema\CommentsWP\TypeAPIs\CommentTypeAPI
     */
    protected function getCommentTypeAPIInterface2Service()
    {
        return $this->services['PoPSchema\\Comments\\TypeAPIs\\CommentTypeAPIInterface'] = new \PoPSchema\CommentsWP\TypeAPIs\CommentTypeAPI(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())));
    }

    /**
     * Gets the public 'PoPSchema\Comments\TypeDataLoaders\CommentTypeDataLoader' shared autowired service.
     *
     * @return \PoPSchema\Comments\TypeDataLoaders\CommentTypeDataLoader
     */
    protected function getCommentTypeDataLoaderService()
    {
        return $this->services['PoPSchema\\Comments\\TypeDataLoaders\\CommentTypeDataLoader'] = new \PoPSchema\Comments\TypeDataLoaders\CommentTypeDataLoader(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoPSchema\\Comments\\TypeAPIs\\CommentTypeAPIInterface'] ?? $this->getCommentTypeAPIInterface2Service()));
    }

    /**
     * Gets the public 'PoPSchema\Comments\TypeResolvers\CommentTypeResolver' shared autowired service.
     *
     * @return \PoPSchema\Comments\TypeResolvers\CommentTypeResolver
     */
    protected function getCommentTypeResolverService()
    {
        return $this->services['PoPSchema\\Comments\\TypeResolvers\\CommentTypeResolver'] = new \PoPSchema\Comments\TypeResolvers\CommentTypeResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ErrorHandling\\ErrorProviderInterface'] ?? $this->getErrorProviderInterfaceService()), ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] = new \GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionService())), ($this->services['PoPSchema\\Comments\\TypeAPIs\\CommentTypeAPIInterface'] ?? $this->getCommentTypeAPIInterface2Service()));
    }

    /**
     * Gets the public 'PoPSchema\CustomPostMediaMutations\FieldResolvers\CustomPostFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\CustomPostMediaMutations\FieldResolvers\CustomPostFieldResolver
     */
    protected function getCustomPostFieldResolver3Service()
    {
        return $this->services['PoPSchema\\CustomPostMediaMutations\\FieldResolvers\\CustomPostFieldResolver'] = new \PoPSchema\CustomPostMediaMutations\FieldResolvers\CustomPostFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())), ($this->services['PoPSchema\\Media\\TypeResolvers\\MediaTypeResolver'] ?? $this->getMediaTypeResolverService()));
    }

    /**
     * Gets the public 'PoPSchema\CustomPostMediaMutations\FieldResolvers\RootFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\CustomPostMediaMutations\FieldResolvers\RootFieldResolver
     */
    protected function getRootFieldResolver3Service()
    {
        return $this->services['PoPSchema\\CustomPostMediaMutations\\FieldResolvers\\RootFieldResolver'] = new \PoPSchema\CustomPostMediaMutations\FieldResolvers\RootFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())), ($this->services['PoPSchema\\Media\\TypeResolvers\\MediaTypeResolver'] ?? $this->getMediaTypeResolverService()));
    }

    /**
     * Gets the public 'PoPSchema\CustomPostMediaMutations\Hooks\CustomPostMutationResolverHookSet' shared autowired service.
     *
     * @return \PoPSchema\CustomPostMediaMutations\Hooks\CustomPostMutationResolverHookSet
     */
    protected function getCustomPostMutationResolverHookSetService()
    {
        return $this->services['PoPSchema\\CustomPostMediaMutations\\Hooks\\CustomPostMutationResolverHookSet'] = new \PoPSchema\CustomPostMediaMutations\Hooks\CustomPostMutationResolverHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoPSchema\\Media\\TypeResolvers\\MediaTypeResolver'] ?? $this->getMediaTypeResolverService()));
    }

    /**
     * Gets the public 'PoPSchema\CustomPostMediaMutations\MutationResolvers\MutationInputProperties' shared autowired service.
     *
     * @return \PoPSchema\CustomPostMediaMutations\MutationResolvers\MutationInputProperties
     */
    protected function getMutationInputProperties2Service()
    {
        return $this->services['PoPSchema\\CustomPostMediaMutations\\MutationResolvers\\MutationInputProperties'] = new \PoPSchema\CustomPostMediaMutations\MutationResolvers\MutationInputProperties();
    }

    /**
     * Gets the public 'PoPSchema\CustomPostMediaMutations\MutationResolvers\RemoveFeaturedImageOnCustomPostMutationResolver' shared autowired service.
     *
     * @return \PoPSchema\CustomPostMediaMutations\MutationResolvers\RemoveFeaturedImageOnCustomPostMutationResolver
     */
    protected function getRemoveFeaturedImageOnCustomPostMutationResolverService()
    {
        return $this->services['PoPSchema\\CustomPostMediaMutations\\MutationResolvers\\RemoveFeaturedImageOnCustomPostMutationResolver'] = new \PoPSchema\CustomPostMediaMutations\MutationResolvers\RemoveFeaturedImageOnCustomPostMutationResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())));
    }

    /**
     * Gets the public 'PoPSchema\CustomPostMediaMutations\MutationResolvers\SetFeaturedImageOnCustomPostMutationResolver' shared autowired service.
     *
     * @return \PoPSchema\CustomPostMediaMutations\MutationResolvers\SetFeaturedImageOnCustomPostMutationResolver
     */
    protected function getSetFeaturedImageOnCustomPostMutationResolverService()
    {
        return $this->services['PoPSchema\\CustomPostMediaMutations\\MutationResolvers\\SetFeaturedImageOnCustomPostMutationResolver'] = new \PoPSchema\CustomPostMediaMutations\MutationResolvers\SetFeaturedImageOnCustomPostMutationResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())));
    }

    /**
     * Gets the public 'PoPSchema\CustomPostMediaMutations\TypeAPIs\CustomPostMediaTypeMutationAPIInterface' shared autowired service.
     *
     * @return \PoPSchema\CustomPostMediaMutationsWP\TypeAPIs\CustomPostMediaTypeMutationAPI
     */
    protected function getCustomPostMediaTypeMutationAPIInterfaceService()
    {
        return $this->services['PoPSchema\\CustomPostMediaMutations\\TypeAPIs\\CustomPostMediaTypeMutationAPIInterface'] = new \PoPSchema\CustomPostMediaMutationsWP\TypeAPIs\CustomPostMediaTypeMutationAPI();
    }

    /**
     * Gets the public 'PoPSchema\CustomPostMedia\FieldInterfaceResolvers\SupportingFeaturedImageFieldInterfaceResolver' shared autowired service.
     *
     * @return \PoPSchema\CustomPostMedia\FieldInterfaceResolvers\SupportingFeaturedImageFieldInterfaceResolver
     */
    protected function getSupportingFeaturedImageFieldInterfaceResolverService()
    {
        return $this->services['PoPSchema\\CustomPostMedia\\FieldInterfaceResolvers\\SupportingFeaturedImageFieldInterfaceResolver'] = new \PoPSchema\CustomPostMedia\FieldInterfaceResolvers\SupportingFeaturedImageFieldInterfaceResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())));
    }

    /**
     * Gets the public 'PoPSchema\CustomPostMedia\FieldResolvers\CustomPostFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\CustomPostMedia\FieldResolvers\CustomPostFieldResolver
     */
    protected function getCustomPostFieldResolver4Service()
    {
        return $this->services['PoPSchema\\CustomPostMedia\\FieldResolvers\\CustomPostFieldResolver'] = new \PoPSchema\CustomPostMedia\FieldResolvers\CustomPostFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())), ($this->services['PoPSchema\\CustomPostMedia\\TypeAPIs\\CustomPostMediaTypeAPIInterface'] ?? ($this->services['PoPSchema\\CustomPostMedia\\TypeAPIs\\CustomPostMediaTypeAPIInterface'] = new \PoPSchema\CustomPostMediaWP\TypeAPIs\CustomPostMediaTypeAPI())));
    }

    /**
     * Gets the public 'PoPSchema\CustomPostMedia\TypeAPIs\CustomPostMediaTypeAPIInterface' shared autowired service.
     *
     * @return \PoPSchema\CustomPostMediaWP\TypeAPIs\CustomPostMediaTypeAPI
     */
    protected function getCustomPostMediaTypeAPIInterfaceService()
    {
        return $this->services['PoPSchema\\CustomPostMedia\\TypeAPIs\\CustomPostMediaTypeAPIInterface'] = new \PoPSchema\CustomPostMediaWP\TypeAPIs\CustomPostMediaTypeAPI();
    }

    /**
     * Gets the public 'PoPSchema\CustomPostMetaWP\Hooks\QueryHookSet' shared autowired service.
     *
     * @return \PoPSchema\CustomPostMetaWP\Hooks\QueryHookSet
     */
    protected function getQueryHookSet3Service()
    {
        return $this->services['PoPSchema\\CustomPostMetaWP\\Hooks\\QueryHookSet'] = new \PoPSchema\CustomPostMetaWP\Hooks\QueryHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'PoPSchema\CustomPostMeta\FieldResolvers\CustomPostFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\CustomPostMeta\FieldResolvers\CustomPostFieldResolver
     */
    protected function getCustomPostFieldResolver5Service()
    {
        return $this->services['PoPSchema\\CustomPostMeta\\FieldResolvers\\CustomPostFieldResolver'] = new \PoPSchema\CustomPostMeta\FieldResolvers\CustomPostFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\CustomPostMeta\TypeAPIs\CustomPostMetaTypeAPIInterface' shared autowired service.
     *
     * @return \PoPSchema\CustomPostMetaWP\TypeAPIs\CustomPostMetaTypeAPI
     */
    protected function getCustomPostMetaTypeAPIInterfaceService()
    {
        return $this->services['PoPSchema\\CustomPostMeta\\TypeAPIs\\CustomPostMetaTypeAPIInterface'] = new \PoPSchema\CustomPostMetaWP\TypeAPIs\CustomPostMetaTypeAPI();
    }

    /**
     * Gets the public 'PoPSchema\CustomPostMutationsWP\LooseContracts\LooseContractResolutionSet' shared autowired service.
     *
     * @return \PoPSchema\CustomPostMutationsWP\LooseContracts\LooseContractResolutionSet
     */
    protected function getLooseContractResolutionSet3Service()
    {
        return $this->services['PoPSchema\\CustomPostMutationsWP\\LooseContracts\\LooseContractResolutionSet'] = new \PoPSchema\CustomPostMutationsWP\LooseContracts\LooseContractResolutionSet(($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] ?? ($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] = new \PoP\LooseContracts\LooseContractManager())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())));
    }

    /**
     * Gets the public 'PoPSchema\CustomPostMutations\LooseContracts\LooseContractSet' shared autowired service.
     *
     * @return \PoPSchema\CustomPostMutations\LooseContracts\LooseContractSet
     */
    protected function getLooseContractSet3Service()
    {
        return $this->services['PoPSchema\\CustomPostMutations\\LooseContracts\\LooseContractSet'] = new \PoPSchema\CustomPostMutations\LooseContracts\LooseContractSet(($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] ?? ($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] = new \PoP\LooseContracts\LooseContractManager())));
    }

    /**
     * Gets the public 'PoPSchema\CustomPostMutations\TypeAPIs\CustomPostTypeMutationAPIInterface' shared autowired service.
     *
     * @return \PoPSchema\CustomPostMutationsWP\TypeAPIs\CustomPostTypeMutationAPI
     */
    protected function getCustomPostTypeMutationAPIInterfaceService()
    {
        return $this->services['PoPSchema\\CustomPostMutations\\TypeAPIs\\CustomPostTypeMutationAPIInterface'] = new \PoPSchema\CustomPostMutationsWP\TypeAPIs\CustomPostTypeMutationAPI();
    }

    /**
     * Gets the public 'PoPSchema\CustomPostsWP\Hooks\RoutingStateHookSet' shared autowired service.
     *
     * @return \PoPSchema\CustomPostsWP\Hooks\RoutingStateHookSet
     */
    protected function getRoutingStateHookSet2Service()
    {
        return $this->services['PoPSchema\\CustomPostsWP\\Hooks\\RoutingStateHookSet'] = new \PoPSchema\CustomPostsWP\Hooks\RoutingStateHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'PoPSchema\CustomPostsWP\LooseContracts\LooseContractResolutionSet' shared autowired service.
     *
     * @return \PoPSchema\CustomPostsWP\LooseContracts\LooseContractResolutionSet
     */
    protected function getLooseContractResolutionSet4Service()
    {
        return $this->services['PoPSchema\\CustomPostsWP\\LooseContracts\\LooseContractResolutionSet'] = new \PoPSchema\CustomPostsWP\LooseContracts\LooseContractResolutionSet(($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] ?? ($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] = new \PoP\LooseContracts\LooseContractManager())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())));
    }

    /**
     * Gets the public 'PoPSchema\CustomPosts\Enums\CustomPostContentFormatEnum' shared autowired service.
     *
     * @return \PoPSchema\CustomPosts\Enums\CustomPostContentFormatEnum
     */
    protected function getCustomPostContentFormatEnumService()
    {
        return $this->services['PoPSchema\\CustomPosts\\Enums\\CustomPostContentFormatEnum'] = new \PoPSchema\CustomPosts\Enums\CustomPostContentFormatEnum();
    }

    /**
     * Gets the public 'PoPSchema\CustomPosts\Enums\CustomPostStatusEnum' shared autowired service.
     *
     * @return \PoPSchema\CustomPosts\Enums\CustomPostStatusEnum
     */
    protected function getCustomPostStatusEnumService()
    {
        return $this->services['PoPSchema\\CustomPosts\\Enums\\CustomPostStatusEnum'] = new \PoPSchema\CustomPosts\Enums\CustomPostStatusEnum();
    }

    /**
     * Gets the public 'PoPSchema\CustomPosts\FieldInterfaceResolvers\IsCustomPostFieldInterfaceResolver' shared autowired service.
     *
     * @return \PoPSchema\CustomPosts\FieldInterfaceResolvers\IsCustomPostFieldInterfaceResolver
     */
    protected function getIsCustomPostFieldInterfaceResolverService()
    {
        return $this->services['PoPSchema\\CustomPosts\\FieldInterfaceResolvers\\IsCustomPostFieldInterfaceResolver'] = new \PoPSchema\CustomPosts\FieldInterfaceResolvers\IsCustomPostFieldInterfaceResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())));
    }

    /**
     * Gets the public 'PoPSchema\CustomPosts\FieldResolvers\CustomPostFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\CustomPosts\FieldResolvers\CustomPostFieldResolver
     */
    protected function getCustomPostFieldResolver6Service()
    {
        return $this->services['PoPSchema\\CustomPosts\\FieldResolvers\\CustomPostFieldResolver'] = new \PoPSchema\CustomPosts\FieldResolvers\CustomPostFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\CustomPosts\FieldResolvers\RootCustomPostListFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\CustomPosts\FieldResolvers\RootCustomPostListFieldResolver
     */
    protected function getRootCustomPostListFieldResolverService()
    {
        return $this->services['PoPSchema\\CustomPosts\\FieldResolvers\\RootCustomPostListFieldResolver'] = new \PoPSchema\CustomPosts\FieldResolvers\RootCustomPostListFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\CustomPosts\FilterInputProcessors\FilterInputProcessor' shared autowired service.
     *
     * @return \PoPSchema\CustomPosts\FilterInputProcessors\FilterInputProcessor
     */
    protected function getFilterInputProcessorService()
    {
        return $this->services['PoPSchema\\CustomPosts\\FilterInputProcessors\\FilterInputProcessor'] = new \PoPSchema\CustomPosts\FilterInputProcessors\FilterInputProcessor(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'PoPSchema\CustomPosts\Hooks\VarsHookSet' shared autowired service.
     *
     * @return \PoPSchema\CustomPosts\Hooks\VarsHookSet
     */
    protected function getVarsHookSet5Service()
    {
        return $this->services['PoPSchema\\CustomPosts\\Hooks\\VarsHookSet'] = new \PoPSchema\CustomPosts\Hooks\VarsHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'PoPSchema\CustomPosts\LooseContracts\LooseContractSet' shared autowired service.
     *
     * @return \PoPSchema\CustomPosts\LooseContracts\LooseContractSet
     */
    protected function getLooseContractSet4Service()
    {
        return $this->services['PoPSchema\\CustomPosts\\LooseContracts\\LooseContractSet'] = new \PoPSchema\CustomPosts\LooseContracts\LooseContractSet(($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] ?? ($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] = new \PoP\LooseContracts\LooseContractManager())));
    }

    /**
     * Gets the public 'PoPSchema\CustomPosts\ModuleProcessors\CustomPostFilterInnerModuleProcessor' shared autowired service.
     *
     * @return \PoPSchema\CustomPosts\ModuleProcessors\CustomPostFilterInnerModuleProcessor
     */
    protected function getCustomPostFilterInnerModuleProcessorService()
    {
        return $this->services['PoPSchema\\CustomPosts\\ModuleProcessors\\CustomPostFilterInnerModuleProcessor'] = new \PoPSchema\CustomPosts\ModuleProcessors\CustomPostFilterInnerModuleProcessor(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathHelpersInterface'] ?? $this->getModulePathHelpersInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleFiltering\\ModuleFilterManagerInterface'] ?? $this->getModuleFilterManagerInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] = new \PoP\ComponentModel\ModuleProcessors\ModuleProcessorManager())), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\DataloadHelperServiceInterface'] ?? $this->getDataloadHelperServiceInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface'] ?? $this->getRequestHelperServiceInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\CustomPosts\ModuleProcessors\CustomPostRelationalFieldDataloadModuleProcessor' shared autowired service.
     *
     * @return \PoPSchema\CustomPosts\ModuleProcessors\CustomPostRelationalFieldDataloadModuleProcessor
     */
    protected function getCustomPostRelationalFieldDataloadModuleProcessorService()
    {
        return $this->services['PoPSchema\\CustomPosts\\ModuleProcessors\\CustomPostRelationalFieldDataloadModuleProcessor'] = new \PoPSchema\CustomPosts\ModuleProcessors\CustomPostRelationalFieldDataloadModuleProcessor(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathHelpersInterface'] ?? $this->getModulePathHelpersInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleFiltering\\ModuleFilterManagerInterface'] ?? $this->getModuleFilterManagerInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] = new \PoP\ComponentModel\ModuleProcessors\ModuleProcessorManager())), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\DataloadHelperServiceInterface'] ?? $this->getDataloadHelperServiceInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface'] ?? $this->getRequestHelperServiceInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\CustomPosts\ModuleProcessors\FormInputs\FilterInputModuleProcessor' shared autowired service.
     *
     * @return \PoPSchema\CustomPosts\ModuleProcessors\FormInputs\FilterInputModuleProcessor
     */
    protected function getFilterInputModuleProcessorService()
    {
        return $this->services['PoPSchema\\CustomPosts\\ModuleProcessors\\FormInputs\\FilterInputModuleProcessor'] = new \PoPSchema\CustomPosts\ModuleProcessors\FormInputs\FilterInputModuleProcessor(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathHelpersInterface'] ?? $this->getModulePathHelpersInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleFiltering\\ModuleFilterManagerInterface'] ?? $this->getModuleFilterManagerInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] = new \PoP\ComponentModel\ModuleProcessors\ModuleProcessorManager())), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\DataloadHelperServiceInterface'] ?? $this->getDataloadHelperServiceInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface'] ?? $this->getRequestHelperServiceInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\CustomPosts\ModuleProcessors\FormInputs\FilterMultipleInputModuleProcessor' shared autowired service.
     *
     * @return \PoPSchema\CustomPosts\ModuleProcessors\FormInputs\FilterMultipleInputModuleProcessor
     */
    protected function getFilterMultipleInputModuleProcessorService()
    {
        return $this->services['PoPSchema\\CustomPosts\\ModuleProcessors\\FormInputs\\FilterMultipleInputModuleProcessor'] = new \PoPSchema\CustomPosts\ModuleProcessors\FormInputs\FilterMultipleInputModuleProcessor(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathHelpersInterface'] ?? $this->getModulePathHelpersInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleFiltering\\ModuleFilterManagerInterface'] ?? $this->getModuleFilterManagerInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] = new \PoP\ComponentModel\ModuleProcessors\ModuleProcessorManager())), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\DataloadHelperServiceInterface'] ?? $this->getDataloadHelperServiceInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface'] ?? $this->getRequestHelperServiceInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\CustomPosts\TypeAPIs\CustomPostTypeAPIInterface' shared autowired service.
     *
     * @return \PoPSchema\CustomPostsWP\TypeAPIs\CustomPostTypeAPI
     */
    protected function getCustomPostTypeAPIInterfaceService()
    {
        return $this->services['PoPSchema\\CustomPosts\\TypeAPIs\\CustomPostTypeAPIInterface'] = new \PoPSchema\CustomPostsWP\TypeAPIs\CustomPostTypeAPI(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoPSchema\\QueriedObject\\Helpers\\QueriedObjectHelperServiceInterface'] ?? ($this->services['PoPSchema\\QueriedObject\\Helpers\\QueriedObjectHelperServiceInterface'] = new \PoPSchema\QueriedObject\Helpers\QueriedObjectHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\CustomPosts\TypeDataLoaders\CustomPostTypeDataLoader' shared autowired service.
     *
     * @return \PoPSchema\CustomPosts\TypeDataLoaders\CustomPostTypeDataLoader
     */
    protected function getCustomPostTypeDataLoaderService()
    {
        return $this->services['PoPSchema\\CustomPosts\\TypeDataLoaders\\CustomPostTypeDataLoader'] = new \PoPSchema\CustomPosts\TypeDataLoaders\CustomPostTypeDataLoader(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\CustomPosts\TypeDataLoaders\CustomPostUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPSchema\CustomPostsWP\Overrides\TypeDataLoaders\CustomPostUnionTypeDataLoader
     */
    protected function getCustomPostUnionTypeDataLoaderService()
    {
        return $this->services['PoPSchema\\CustomPosts\\TypeDataLoaders\\CustomPostUnionTypeDataLoader'] = new \PoPSchema\CustomPostsWP\Overrides\TypeDataLoaders\CustomPostUnionTypeDataLoader(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\CustomPosts\TypeResolvers\CustomPostTypeResolver' shared autowired service.
     *
     * @return \PoPSchema\CustomPosts\TypeResolvers\CustomPostTypeResolver
     */
    protected function getCustomPostTypeResolverService()
    {
        return $this->services['PoPSchema\\CustomPosts\\TypeResolvers\\CustomPostTypeResolver'] = new \PoPSchema\CustomPosts\TypeResolvers\CustomPostTypeResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ErrorHandling\\ErrorProviderInterface'] ?? $this->getErrorProviderInterfaceService()), ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] = new \GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionService())));
    }

    /**
     * Gets the public 'PoPSchema\CustomPosts\TypeResolvers\CustomPostUnionTypeResolver' shared autowired service.
     *
     * @return \PoPSchema\CustomPostsWP\Overrides\TypeResolvers\CustomPostUnionTypeResolver
     */
    protected function getCustomPostUnionTypeResolverService()
    {
        return $this->services['PoPSchema\\CustomPosts\\TypeResolvers\\CustomPostUnionTypeResolver'] = new \PoPSchema\CustomPostsWP\Overrides\TypeResolvers\CustomPostUnionTypeResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ErrorHandling\\ErrorProviderInterface'] ?? $this->getErrorProviderInterfaceService()), ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] = new \GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionService())));
    }

    /**
     * Gets the public 'PoPSchema\GenericCustomPosts\FieldResolvers\RootGenericCustomPostFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\GenericCustomPosts\FieldResolvers\RootGenericCustomPostFieldResolver
     */
    protected function getRootGenericCustomPostFieldResolverService()
    {
        return $this->services['PoPSchema\\GenericCustomPosts\\FieldResolvers\\RootGenericCustomPostFieldResolver'] = new \PoPSchema\GenericCustomPosts\FieldResolvers\RootGenericCustomPostFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\GenericCustomPosts\ModuleProcessors\GenericCustomPostFilterInnerModuleProcessor' shared autowired service.
     *
     * @return \PoPSchema\GenericCustomPosts\ModuleProcessors\GenericCustomPostFilterInnerModuleProcessor
     */
    protected function getGenericCustomPostFilterInnerModuleProcessorService()
    {
        return $this->services['PoPSchema\\GenericCustomPosts\\ModuleProcessors\\GenericCustomPostFilterInnerModuleProcessor'] = new \PoPSchema\GenericCustomPosts\ModuleProcessors\GenericCustomPostFilterInnerModuleProcessor(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathHelpersInterface'] ?? $this->getModulePathHelpersInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleFiltering\\ModuleFilterManagerInterface'] ?? $this->getModuleFilterManagerInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] = new \PoP\ComponentModel\ModuleProcessors\ModuleProcessorManager())), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\DataloadHelperServiceInterface'] ?? $this->getDataloadHelperServiceInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface'] ?? $this->getRequestHelperServiceInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\GenericCustomPosts\ModuleProcessors\GenericCustomPostRelationalFieldDataloadModuleProcessor' shared autowired service.
     *
     * @return \PoPSchema\GenericCustomPosts\ModuleProcessors\GenericCustomPostRelationalFieldDataloadModuleProcessor
     */
    protected function getGenericCustomPostRelationalFieldDataloadModuleProcessorService()
    {
        return $this->services['PoPSchema\\GenericCustomPosts\\ModuleProcessors\\GenericCustomPostRelationalFieldDataloadModuleProcessor'] = new \PoPSchema\GenericCustomPosts\ModuleProcessors\GenericCustomPostRelationalFieldDataloadModuleProcessor(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathHelpersInterface'] ?? $this->getModulePathHelpersInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleFiltering\\ModuleFilterManagerInterface'] ?? $this->getModuleFilterManagerInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] = new \PoP\ComponentModel\ModuleProcessors\ModuleProcessorManager())), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\DataloadHelperServiceInterface'] ?? $this->getDataloadHelperServiceInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface'] ?? $this->getRequestHelperServiceInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\GenericCustomPosts\TypeDataLoaders\GenericCustomPostTypeDataLoader' shared autowired service.
     *
     * @return \PoPSchema\GenericCustomPosts\TypeDataLoaders\GenericCustomPostTypeDataLoader
     */
    protected function getGenericCustomPostTypeDataLoaderService()
    {
        return $this->services['PoPSchema\\GenericCustomPosts\\TypeDataLoaders\\GenericCustomPostTypeDataLoader'] = new \PoPSchema\GenericCustomPosts\TypeDataLoaders\GenericCustomPostTypeDataLoader(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\GenericCustomPosts\TypeResolvers\GenericCustomPostTypeResolver' shared autowired service.
     *
     * @return \PoPSchema\GenericCustomPosts\TypeResolvers\GenericCustomPostTypeResolver
     */
    protected function getGenericCustomPostTypeResolverService()
    {
        return $this->services['PoPSchema\\GenericCustomPosts\\TypeResolvers\\GenericCustomPostTypeResolver'] = new \PoPSchema\GenericCustomPosts\TypeResolvers\GenericCustomPostTypeResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ErrorHandling\\ErrorProviderInterface'] ?? $this->getErrorProviderInterfaceService()), ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] = new \GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionService())));
    }

    /**
     * Gets the public 'PoPSchema\Media\ConditionalOnComponent\Users\FieldResolvers\MediaUserFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\Media\ConditionalOnComponent\Users\FieldResolvers\MediaUserFieldResolver
     */
    protected function getMediaUserFieldResolverService()
    {
        return $this->services['PoPSchema\\Media\\ConditionalOnComponent\\Users\\FieldResolvers\\MediaUserFieldResolver'] = new \PoPSchema\Media\ConditionalOnComponent\Users\FieldResolvers\MediaUserFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())), ($this->services['PoPSchema\\Media\\ConditionalOnComponent\\Users\\TypeAPIs\\MediaTypeAPIInterface'] ?? ($this->services['PoPSchema\\Media\\ConditionalOnComponent\\Users\\TypeAPIs\\MediaTypeAPIInterface'] = new \PoPSchema\MediaWP\ConditionalOnComponent\Users\TypeAPIs\MediaTypeAPI())));
    }

    /**
     * Gets the public 'PoPSchema\Media\ConditionalOnComponent\Users\TypeAPIs\MediaTypeAPIInterface' shared autowired service.
     *
     * @return \PoPSchema\MediaWP\ConditionalOnComponent\Users\TypeAPIs\MediaTypeAPI
     */
    protected function getMediaTypeAPIInterfaceService()
    {
        return $this->services['PoPSchema\\Media\\ConditionalOnComponent\\Users\\TypeAPIs\\MediaTypeAPIInterface'] = new \PoPSchema\MediaWP\ConditionalOnComponent\Users\TypeAPIs\MediaTypeAPI();
    }

    /**
     * Gets the public 'PoPSchema\Media\Enums\MediaDeviceEnum' shared autowired service.
     *
     * @return \PoPSchema\Media\Enums\MediaDeviceEnum
     */
    protected function getMediaDeviceEnumService()
    {
        return $this->services['PoPSchema\\Media\\Enums\\MediaDeviceEnum'] = new \PoPSchema\Media\Enums\MediaDeviceEnum();
    }

    /**
     * Gets the public 'PoPSchema\Media\FieldResolvers\MediaFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\Media\FieldResolvers\MediaFieldResolver
     */
    protected function getMediaFieldResolverService()
    {
        return $this->services['PoPSchema\\Media\\FieldResolvers\\MediaFieldResolver'] = new \PoPSchema\Media\FieldResolvers\MediaFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())), ($this->services['PoPSchema\\Media\\TypeAPIs\\MediaTypeAPIInterface'] ?? $this->getMediaTypeAPIInterface2Service()));
    }

    /**
     * Gets the public 'PoPSchema\Media\FieldResolvers\RootFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\Media\FieldResolvers\RootFieldResolver
     */
    protected function getRootFieldResolver4Service()
    {
        return $this->services['PoPSchema\\Media\\FieldResolvers\\RootFieldResolver'] = new \PoPSchema\Media\FieldResolvers\RootFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())), ($this->services['PoPSchema\\CustomPosts\\TypeResolvers\\CustomPostTypeResolver'] ?? $this->getCustomPostTypeResolverService()), ($this->services['PoPSchema\\Media\\TypeAPIs\\MediaTypeAPIInterface'] ?? $this->getMediaTypeAPIInterface2Service()));
    }

    /**
     * Gets the public 'PoPSchema\Media\TypeAPIs\MediaTypeAPIInterface' shared autowired service.
     *
     * @return \PoPSchema\MediaWP\TypeAPIs\MediaTypeAPI
     */
    protected function getMediaTypeAPIInterface2Service()
    {
        return $this->services['PoPSchema\\Media\\TypeAPIs\\MediaTypeAPIInterface'] = new \PoPSchema\MediaWP\TypeAPIs\MediaTypeAPI(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoPSchema\\QueriedObject\\Helpers\\QueriedObjectHelperServiceInterface'] ?? ($this->services['PoPSchema\\QueriedObject\\Helpers\\QueriedObjectHelperServiceInterface'] = new \PoPSchema\QueriedObject\Helpers\QueriedObjectHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\Media\TypeDataLoaders\MediaTypeDataLoader' shared autowired service.
     *
     * @return \PoPSchema\Media\TypeDataLoaders\MediaTypeDataLoader
     */
    protected function getMediaTypeDataLoaderService()
    {
        return $this->services['PoPSchema\\Media\\TypeDataLoaders\\MediaTypeDataLoader'] = new \PoPSchema\Media\TypeDataLoaders\MediaTypeDataLoader(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoPSchema\\Media\\TypeAPIs\\MediaTypeAPIInterface'] ?? $this->getMediaTypeAPIInterface2Service()));
    }

    /**
     * Gets the public 'PoPSchema\Media\TypeResolvers\MediaTypeResolver' shared autowired service.
     *
     * @return \PoPSchema\Media\TypeResolvers\MediaTypeResolver
     */
    protected function getMediaTypeResolverService()
    {
        return $this->services['PoPSchema\\Media\\TypeResolvers\\MediaTypeResolver'] = new \PoPSchema\Media\TypeResolvers\MediaTypeResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ErrorHandling\\ErrorProviderInterface'] ?? $this->getErrorProviderInterfaceService()), ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] = new \GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionService())), ($this->services['PoPSchema\\Media\\TypeAPIs\\MediaTypeAPIInterface'] ?? $this->getMediaTypeAPIInterface2Service()));
    }

    /**
     * Gets the public 'PoPSchema\Menus\FieldResolvers\MenuFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\Menus\FieldResolvers\MenuFieldResolver
     */
    protected function getMenuFieldResolverService()
    {
        return $this->services['PoPSchema\\Menus\\FieldResolvers\\MenuFieldResolver'] = new \PoPSchema\Menus\FieldResolvers\MenuFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\Menus\FieldResolvers\MenuItemFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\Menus\FieldResolvers\MenuItemFieldResolver
     */
    protected function getMenuItemFieldResolverService()
    {
        return $this->services['PoPSchema\\Menus\\FieldResolvers\\MenuItemFieldResolver'] = new \PoPSchema\Menus\FieldResolvers\MenuItemFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\Menus\FieldResolvers\RootFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\Menus\FieldResolvers\RootFieldResolver
     */
    protected function getRootFieldResolver5Service()
    {
        return $this->services['PoPSchema\\Menus\\FieldResolvers\\RootFieldResolver'] = new \PoPSchema\Menus\FieldResolvers\RootFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\Menus\TypeAPIs\MenuItemTypeAPIInterface' shared autowired service.
     *
     * @return \PoPSchema\MenusWP\TypeAPIs\MenuItemTypeAPI
     */
    protected function getMenuItemTypeAPIInterfaceService()
    {
        return $this->services['PoPSchema\\Menus\\TypeAPIs\\MenuItemTypeAPIInterface'] = new \PoPSchema\MenusWP\TypeAPIs\MenuItemTypeAPI();
    }

    /**
     * Gets the public 'PoPSchema\Menus\TypeAPIs\MenuTypeAPIInterface' shared autowired service.
     *
     * @return \PoPSchema\MenusWP\TypeAPIs\MenuTypeAPI
     */
    protected function getMenuTypeAPIInterfaceService()
    {
        return $this->services['PoPSchema\\Menus\\TypeAPIs\\MenuTypeAPIInterface'] = new \PoPSchema\MenusWP\TypeAPIs\MenuTypeAPI();
    }

    /**
     * Gets the public 'PoPSchema\Menus\TypeDataLoaders\MenuItemTypeDataLoader' shared autowired service.
     *
     * @return \PoPSchema\Menus\TypeDataLoaders\MenuItemTypeDataLoader
     */
    protected function getMenuItemTypeDataLoaderService()
    {
        return $this->services['PoPSchema\\Menus\\TypeDataLoaders\\MenuItemTypeDataLoader'] = new \PoPSchema\Menus\TypeDataLoaders\MenuItemTypeDataLoader(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\Menus\TypeDataLoaders\MenuTypeDataLoader' shared autowired service.
     *
     * @return \PoPSchema\Menus\TypeDataLoaders\MenuTypeDataLoader
     */
    protected function getMenuTypeDataLoaderService()
    {
        return $this->services['PoPSchema\\Menus\\TypeDataLoaders\\MenuTypeDataLoader'] = new \PoPSchema\Menus\TypeDataLoaders\MenuTypeDataLoader(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\Menus\TypeResolvers\MenuItemTypeResolver' shared autowired service.
     *
     * @return \PoPSchema\Menus\TypeResolvers\MenuItemTypeResolver
     */
    protected function getMenuItemTypeResolverService()
    {
        return $this->services['PoPSchema\\Menus\\TypeResolvers\\MenuItemTypeResolver'] = new \PoPSchema\Menus\TypeResolvers\MenuItemTypeResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ErrorHandling\\ErrorProviderInterface'] ?? $this->getErrorProviderInterfaceService()), ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] = new \GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionService())));
    }

    /**
     * Gets the public 'PoPSchema\Menus\TypeResolvers\MenuTypeResolver' shared autowired service.
     *
     * @return \PoPSchema\Menus\TypeResolvers\MenuTypeResolver
     */
    protected function getMenuTypeResolverService()
    {
        return $this->services['PoPSchema\\Menus\\TypeResolvers\\MenuTypeResolver'] = new \PoPSchema\Menus\TypeResolvers\MenuTypeResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ErrorHandling\\ErrorProviderInterface'] ?? $this->getErrorProviderInterfaceService()), ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] = new \GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionService())));
    }

    /**
     * Gets the public 'PoPSchema\Meta\FieldInterfaceResolvers\WithMetaFieldInterfaceResolver' shared autowired service.
     *
     * @return \PoPSchema\Meta\FieldInterfaceResolvers\WithMetaFieldInterfaceResolver
     */
    protected function getWithMetaFieldInterfaceResolverService()
    {
        return $this->services['PoPSchema\\Meta\\FieldInterfaceResolvers\\WithMetaFieldInterfaceResolver'] = new \PoPSchema\Meta\FieldInterfaceResolvers\WithMetaFieldInterfaceResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())));
    }

    /**
     * Gets the public 'PoPSchema\PagesWP\Hooks\RoutingStateHookSet' shared autowired service.
     *
     * @return \PoPSchema\PagesWP\Hooks\RoutingStateHookSet
     */
    protected function getRoutingStateHookSet3Service()
    {
        return $this->services['PoPSchema\\PagesWP\\Hooks\\RoutingStateHookSet'] = new \PoPSchema\PagesWP\Hooks\RoutingStateHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'PoPSchema\PagesWP\LooseContracts\LooseContractResolutionSet' shared autowired service.
     *
     * @return \PoPSchema\PagesWP\LooseContracts\LooseContractResolutionSet
     */
    protected function getLooseContractResolutionSet5Service()
    {
        return $this->services['PoPSchema\\PagesWP\\LooseContracts\\LooseContractResolutionSet'] = new \PoPSchema\PagesWP\LooseContracts\LooseContractResolutionSet(($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] ?? ($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] = new \PoP\LooseContracts\LooseContractManager())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())));
    }

    /**
     * Gets the public 'PoPSchema\Pages\ConditionalOnComponent\API\RouteModuleProcessors\EntryRouteModuleProcessor' shared autowired service.
     *
     * @return \PoPSchema\Pages\ConditionalOnComponent\API\RouteModuleProcessors\EntryRouteModuleProcessor
     */
    protected function getEntryRouteModuleProcessor2Service()
    {
        return $this->services['PoPSchema\\Pages\\ConditionalOnComponent\\API\\RouteModuleProcessors\\EntryRouteModuleProcessor'] = new \PoPSchema\Pages\ConditionalOnComponent\API\RouteModuleProcessors\EntryRouteModuleProcessor(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())));
    }

    /**
     * Gets the public 'PoPSchema\Pages\FieldResolvers\RootPageFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\Pages\FieldResolvers\RootPageFieldResolver
     */
    protected function getRootPageFieldResolverService()
    {
        return $this->services['PoPSchema\\Pages\\FieldResolvers\\RootPageFieldResolver'] = new \PoPSchema\Pages\FieldResolvers\RootPageFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\Pages\Hooks\VarsHookSet' shared autowired service.
     *
     * @return \PoPSchema\Pages\Hooks\VarsHookSet
     */
    protected function getVarsHookSet6Service()
    {
        return $this->services['PoPSchema\\Pages\\Hooks\\VarsHookSet'] = new \PoPSchema\Pages\Hooks\VarsHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'PoPSchema\Pages\LooseContracts\LooseContractSet' shared autowired service.
     *
     * @return \PoPSchema\Pages\LooseContracts\LooseContractSet
     */
    protected function getLooseContractSet5Service()
    {
        return $this->services['PoPSchema\\Pages\\LooseContracts\\LooseContractSet'] = new \PoPSchema\Pages\LooseContracts\LooseContractSet(($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] ?? ($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] = new \PoP\LooseContracts\LooseContractManager())));
    }

    /**
     * Gets the public 'PoPSchema\Pages\ModuleProcessors\FieldDataloadModuleProcessor' shared autowired service.
     *
     * @return \PoPSchema\Pages\ModuleProcessors\FieldDataloadModuleProcessor
     */
    protected function getFieldDataloadModuleProcessorService()
    {
        return $this->services['PoPSchema\\Pages\\ModuleProcessors\\FieldDataloadModuleProcessor'] = new \PoPSchema\Pages\ModuleProcessors\FieldDataloadModuleProcessor(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathHelpersInterface'] ?? $this->getModulePathHelpersInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleFiltering\\ModuleFilterManagerInterface'] ?? $this->getModuleFilterManagerInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] = new \PoP\ComponentModel\ModuleProcessors\ModuleProcessorManager())), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\DataloadHelperServiceInterface'] ?? $this->getDataloadHelperServiceInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface'] ?? $this->getRequestHelperServiceInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\Pages\TypeAPIs\PageTypeAPIInterface' shared autowired service.
     *
     * @return \PoPSchema\PagesWP\TypeAPIs\PageTypeAPI
     */
    protected function getPageTypeAPIInterfaceService()
    {
        return $this->services['PoPSchema\\Pages\\TypeAPIs\\PageTypeAPIInterface'] = new \PoPSchema\PagesWP\TypeAPIs\PageTypeAPI(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoPSchema\\QueriedObject\\Helpers\\QueriedObjectHelperServiceInterface'] ?? ($this->services['PoPSchema\\QueriedObject\\Helpers\\QueriedObjectHelperServiceInterface'] = new \PoPSchema\QueriedObject\Helpers\QueriedObjectHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\Pages\TypeDataLoaders\PageTypeDataLoader' shared autowired service.
     *
     * @return \PoPSchema\Pages\TypeDataLoaders\PageTypeDataLoader
     */
    protected function getPageTypeDataLoaderService()
    {
        return $this->services['PoPSchema\\Pages\\TypeDataLoaders\\PageTypeDataLoader'] = new \PoPSchema\Pages\TypeDataLoaders\PageTypeDataLoader(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\Pages\TypeResolvers\PageTypeResolver' shared autowired service.
     *
     * @return \PoPSchema\Pages\TypeResolvers\PageTypeResolver
     */
    protected function getPageTypeResolverService()
    {
        return $this->services['PoPSchema\\Pages\\TypeResolvers\\PageTypeResolver'] = new \PoPSchema\Pages\TypeResolvers\PageTypeResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ErrorHandling\\ErrorProviderInterface'] ?? $this->getErrorProviderInterfaceService()), ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] = new \GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionService())), ($this->services['PoPSchema\\Pages\\TypeAPIs\\PageTypeAPIInterface'] ?? $this->getPageTypeAPIInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\PostCategoriesWP\Hooks\PostCategoryQueryHookSet' shared autowired service.
     *
     * @return \PoPSchema\PostCategoriesWP\Hooks\PostCategoryQueryHookSet
     */
    protected function getPostCategoryQueryHookSetService()
    {
        return $this->services['PoPSchema\\PostCategoriesWP\\Hooks\\PostCategoryQueryHookSet'] = new \PoPSchema\PostCategoriesWP\Hooks\PostCategoryQueryHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'PoPSchema\PostCategories\ConditionalOnComponent\API\RouteModuleProcessors\EntryRouteModuleProcessor' shared autowired service.
     *
     * @return \PoPSchema\PostCategories\ConditionalOnComponent\API\RouteModuleProcessors\EntryRouteModuleProcessor
     */
    protected function getEntryRouteModuleProcessor3Service()
    {
        return $this->services['PoPSchema\\PostCategories\\ConditionalOnComponent\\API\\RouteModuleProcessors\\EntryRouteModuleProcessor'] = new \PoPSchema\PostCategories\ConditionalOnComponent\API\RouteModuleProcessors\EntryRouteModuleProcessor(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())));
    }

    /**
     * Gets the public 'PoPSchema\PostCategories\FieldResolvers\CustomPostListPostCategoryFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\PostCategories\FieldResolvers\CustomPostListPostCategoryFieldResolver
     */
    protected function getCustomPostListPostCategoryFieldResolverService()
    {
        return $this->services['PoPSchema\\PostCategories\\FieldResolvers\\CustomPostListPostCategoryFieldResolver'] = new \PoPSchema\PostCategories\FieldResolvers\CustomPostListPostCategoryFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\PostCategories\FieldResolvers\PostCategoryFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\PostCategories\FieldResolvers\PostCategoryFieldResolver
     */
    protected function getPostCategoryFieldResolverService()
    {
        return $this->services['PoPSchema\\PostCategories\\FieldResolvers\\PostCategoryFieldResolver'] = new \PoPSchema\PostCategories\FieldResolvers\PostCategoryFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\PostCategories\FieldResolvers\PostCategoryListFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\PostCategories\FieldResolvers\PostCategoryListFieldResolver
     */
    protected function getPostCategoryListFieldResolverService()
    {
        return $this->services['PoPSchema\\PostCategories\\FieldResolvers\\PostCategoryListFieldResolver'] = new \PoPSchema\PostCategories\FieldResolvers\PostCategoryListFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\PostCategories\FieldResolvers\PostQueryableFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\PostCategories\FieldResolvers\PostQueryableFieldResolver
     */
    protected function getPostQueryableFieldResolverService()
    {
        return $this->services['PoPSchema\\PostCategories\\FieldResolvers\\PostQueryableFieldResolver'] = new \PoPSchema\PostCategories\FieldResolvers\PostQueryableFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\PostCategories\FieldResolvers\RootPostCategoryFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\PostCategories\FieldResolvers\RootPostCategoryFieldResolver
     */
    protected function getRootPostCategoryFieldResolverService()
    {
        return $this->services['PoPSchema\\PostCategories\\FieldResolvers\\RootPostCategoryFieldResolver'] = new \PoPSchema\PostCategories\FieldResolvers\RootPostCategoryFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\PostCategories\Hooks\ModelInstanceHookSet' shared autowired service.
     *
     * @return \PoPSchema\PostCategories\Hooks\ModelInstanceHookSet
     */
    protected function getModelInstanceHookSetService()
    {
        return $this->services['PoPSchema\\PostCategories\\Hooks\\ModelInstanceHookSet'] = new \PoPSchema\PostCategories\Hooks\ModelInstanceHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'PoPSchema\PostCategories\Hooks\RoutingHookSet' shared autowired service.
     *
     * @return \PoPSchema\PostCategories\Hooks\RoutingHookSet
     */
    protected function getRoutingHookSetService()
    {
        return $this->services['PoPSchema\\PostCategories\\Hooks\\RoutingHookSet'] = new \PoPSchema\PostCategories\Hooks\RoutingHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'PoPSchema\PostCategories\ModuleProcessors\CategoryPostFieldDataloadModuleProcessor' shared autowired service.
     *
     * @return \PoPSchema\PostCategories\ModuleProcessors\CategoryPostFieldDataloadModuleProcessor
     */
    protected function getCategoryPostFieldDataloadModuleProcessorService()
    {
        return $this->services['PoPSchema\\PostCategories\\ModuleProcessors\\CategoryPostFieldDataloadModuleProcessor'] = new \PoPSchema\PostCategories\ModuleProcessors\CategoryPostFieldDataloadModuleProcessor(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathHelpersInterface'] ?? $this->getModulePathHelpersInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleFiltering\\ModuleFilterManagerInterface'] ?? $this->getModuleFilterManagerInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] = new \PoP\ComponentModel\ModuleProcessors\ModuleProcessorManager())), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\DataloadHelperServiceInterface'] ?? $this->getDataloadHelperServiceInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface'] ?? $this->getRequestHelperServiceInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\PostCategories\ModuleProcessors\PostCategoryFieldDataloadModuleProcessor' shared autowired service.
     *
     * @return \PoPSchema\PostCategories\ModuleProcessors\PostCategoryFieldDataloadModuleProcessor
     */
    protected function getPostCategoryFieldDataloadModuleProcessorService()
    {
        return $this->services['PoPSchema\\PostCategories\\ModuleProcessors\\PostCategoryFieldDataloadModuleProcessor'] = new \PoPSchema\PostCategories\ModuleProcessors\PostCategoryFieldDataloadModuleProcessor(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathHelpersInterface'] ?? $this->getModulePathHelpersInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleFiltering\\ModuleFilterManagerInterface'] ?? $this->getModuleFilterManagerInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] = new \PoP\ComponentModel\ModuleProcessors\ModuleProcessorManager())), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\DataloadHelperServiceInterface'] ?? $this->getDataloadHelperServiceInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface'] ?? $this->getRequestHelperServiceInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\PostCategories\TypeAPIs\PostCategoryTypeAPIInterface' shared autowired service.
     *
     * @return \PoPSchema\PostCategoriesWP\TypeAPIs\PostCategoryTypeAPI
     */
    protected function getPostCategoryTypeAPIInterfaceService()
    {
        return $this->services['PoPSchema\\PostCategories\\TypeAPIs\\PostCategoryTypeAPIInterface'] = new \PoPSchema\PostCategoriesWP\TypeAPIs\PostCategoryTypeAPI(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoPSchema\\QueriedObject\\Helpers\\QueriedObjectHelperServiceInterface'] ?? ($this->services['PoPSchema\\QueriedObject\\Helpers\\QueriedObjectHelperServiceInterface'] = new \PoPSchema\QueriedObject\Helpers\QueriedObjectHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\PostCategories\TypeDataLoaders\PostCategoryTypeDataLoader' shared autowired service.
     *
     * @return \PoPSchema\PostCategories\TypeDataLoaders\PostCategoryTypeDataLoader
     */
    protected function getPostCategoryTypeDataLoaderService()
    {
        return $this->services['PoPSchema\\PostCategories\\TypeDataLoaders\\PostCategoryTypeDataLoader'] = new \PoPSchema\PostCategories\TypeDataLoaders\PostCategoryTypeDataLoader(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\PostCategories\TypeResolvers\PostCategoryTypeResolver' shared autowired service.
     *
     * @return \PoPSchema\PostCategories\TypeResolvers\PostCategoryTypeResolver
     */
    protected function getPostCategoryTypeResolverService()
    {
        return $this->services['PoPSchema\\PostCategories\\TypeResolvers\\PostCategoryTypeResolver'] = new \PoPSchema\PostCategories\TypeResolvers\PostCategoryTypeResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ErrorHandling\\ErrorProviderInterface'] ?? $this->getErrorProviderInterfaceService()), ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] = new \GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionService())));
    }

    /**
     * Gets the public 'PoPSchema\PostCategoryMutations\FieldResolvers\PostFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\PostCategoryMutations\FieldResolvers\PostFieldResolver
     */
    protected function getPostFieldResolverService()
    {
        return $this->services['PoPSchema\\PostCategoryMutations\\FieldResolvers\\PostFieldResolver'] = new \PoPSchema\PostCategoryMutations\FieldResolvers\PostFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\PostCategoryMutations\FieldResolvers\RootFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\PostCategoryMutations\FieldResolvers\RootFieldResolver
     */
    protected function getRootFieldResolver6Service()
    {
        return $this->services['PoPSchema\\PostCategoryMutations\\FieldResolvers\\RootFieldResolver'] = new \PoPSchema\PostCategoryMutations\FieldResolvers\RootFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\PostCategoryMutations\Hooks\PostMutationResolverHookSet' shared autowired service.
     *
     * @return \PoPSchema\PostCategoryMutations\Hooks\PostMutationResolverHookSet
     */
    protected function getPostMutationResolverHookSetService()
    {
        return $this->services['PoPSchema\\PostCategoryMutations\\Hooks\\PostMutationResolverHookSet'] = new \PoPSchema\PostCategoryMutations\Hooks\PostMutationResolverHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'PoPSchema\PostCategoryMutations\MutationResolvers\SetCategoriesOnPostMutationResolver' shared autowired service.
     *
     * @return \PoPSchema\PostCategoryMutations\MutationResolvers\SetCategoriesOnPostMutationResolver
     */
    protected function getSetCategoriesOnPostMutationResolverService()
    {
        return $this->services['PoPSchema\\PostCategoryMutations\\MutationResolvers\\SetCategoriesOnPostMutationResolver'] = new \PoPSchema\PostCategoryMutations\MutationResolvers\SetCategoriesOnPostMutationResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())));
    }

    /**
     * Gets the public 'PoPSchema\PostCategoryMutations\TypeAPIs\PostCategoryTypeMutationAPIInterface' shared autowired service.
     *
     * @return \PoPSchema\PostCategoryMutationsWP\TypeAPIs\PostCategoryTypeMutationAPI
     */
    protected function getPostCategoryTypeMutationAPIInterfaceService()
    {
        return $this->services['PoPSchema\\PostCategoryMutations\\TypeAPIs\\PostCategoryTypeMutationAPIInterface'] = new \PoPSchema\PostCategoryMutationsWP\TypeAPIs\PostCategoryTypeMutationAPI();
    }

    /**
     * Gets the public 'PoPSchema\PostMutations\FieldResolvers\PostFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\PostMutations\FieldResolvers\PostFieldResolver
     */
    protected function getPostFieldResolver2Service()
    {
        return $this->services['PoPSchema\\PostMutations\\FieldResolvers\\PostFieldResolver'] = new \PoPSchema\PostMutations\FieldResolvers\PostFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\PostMutations\FieldResolvers\RootFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\PostMutations\FieldResolvers\RootFieldResolver
     */
    protected function getRootFieldResolver7Service()
    {
        return $this->services['PoPSchema\\PostMutations\\FieldResolvers\\RootFieldResolver'] = new \PoPSchema\PostMutations\FieldResolvers\RootFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\PostMutations\FieldResolvers\RootQueryableFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\PostMutations\FieldResolvers\RootQueryableFieldResolver
     */
    protected function getRootQueryableFieldResolverService()
    {
        return $this->services['PoPSchema\\PostMutations\\FieldResolvers\\RootQueryableFieldResolver'] = new \PoPSchema\PostMutations\FieldResolvers\RootQueryableFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\PostMutations\ModuleProcessors\FieldDataloadModuleProcessor' shared autowired service.
     *
     * @return \PoPSchema\PostMutations\ModuleProcessors\FieldDataloadModuleProcessor
     */
    protected function getFieldDataloadModuleProcessor2Service()
    {
        return $this->services['PoPSchema\\PostMutations\\ModuleProcessors\\FieldDataloadModuleProcessor'] = new \PoPSchema\PostMutations\ModuleProcessors\FieldDataloadModuleProcessor(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathHelpersInterface'] ?? $this->getModulePathHelpersInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleFiltering\\ModuleFilterManagerInterface'] ?? $this->getModuleFilterManagerInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] = new \PoP\ComponentModel\ModuleProcessors\ModuleProcessorManager())), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\DataloadHelperServiceInterface'] ?? $this->getDataloadHelperServiceInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface'] ?? $this->getRequestHelperServiceInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\PostMutations\ModuleProcessors\FilterInnerModuleProcessor' shared autowired service.
     *
     * @return \PoPSchema\PostMutations\ModuleProcessors\FilterInnerModuleProcessor
     */
    protected function getFilterInnerModuleProcessor2Service()
    {
        return $this->services['PoPSchema\\PostMutations\\ModuleProcessors\\FilterInnerModuleProcessor'] = new \PoPSchema\PostMutations\ModuleProcessors\FilterInnerModuleProcessor(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathHelpersInterface'] ?? $this->getModulePathHelpersInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleFiltering\\ModuleFilterManagerInterface'] ?? $this->getModuleFilterManagerInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] = new \PoP\ComponentModel\ModuleProcessors\ModuleProcessorManager())), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\DataloadHelperServiceInterface'] ?? $this->getDataloadHelperServiceInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface'] ?? $this->getRequestHelperServiceInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\PostMutations\MutationResolvers\CreatePostMutationResolver' shared autowired service.
     *
     * @return \PoPSchema\PostMutations\MutationResolvers\CreatePostMutationResolver
     */
    protected function getCreatePostMutationResolverService()
    {
        return $this->services['PoPSchema\\PostMutations\\MutationResolvers\\CreatePostMutationResolver'] = new \PoPSchema\PostMutations\MutationResolvers\CreatePostMutationResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())));
    }

    /**
     * Gets the public 'PoPSchema\PostMutations\MutationResolvers\UpdatePostMutationResolver' shared autowired service.
     *
     * @return \PoPSchema\PostMutations\MutationResolvers\UpdatePostMutationResolver
     */
    protected function getUpdatePostMutationResolverService()
    {
        return $this->services['PoPSchema\\PostMutations\\MutationResolvers\\UpdatePostMutationResolver'] = new \PoPSchema\PostMutations\MutationResolvers\UpdatePostMutationResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())));
    }

    /**
     * Gets the public 'PoPSchema\PostTagMutations\FieldResolvers\PostFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\PostTagMutations\FieldResolvers\PostFieldResolver
     */
    protected function getPostFieldResolver3Service()
    {
        return $this->services['PoPSchema\\PostTagMutations\\FieldResolvers\\PostFieldResolver'] = new \PoPSchema\PostTagMutations\FieldResolvers\PostFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\PostTagMutations\FieldResolvers\RootFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\PostTagMutations\FieldResolvers\RootFieldResolver
     */
    protected function getRootFieldResolver8Service()
    {
        return $this->services['PoPSchema\\PostTagMutations\\FieldResolvers\\RootFieldResolver'] = new \PoPSchema\PostTagMutations\FieldResolvers\RootFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\PostTagMutations\Hooks\PostMutationResolverHookSet' shared autowired service.
     *
     * @return \PoPSchema\PostTagMutations\Hooks\PostMutationResolverHookSet
     */
    protected function getPostMutationResolverHookSet2Service()
    {
        return $this->services['PoPSchema\\PostTagMutations\\Hooks\\PostMutationResolverHookSet'] = new \PoPSchema\PostTagMutations\Hooks\PostMutationResolverHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'PoPSchema\PostTagMutations\MutationResolvers\SetTagsOnPostMutationResolver' shared autowired service.
     *
     * @return \PoPSchema\PostTagMutations\MutationResolvers\SetTagsOnPostMutationResolver
     */
    protected function getSetTagsOnPostMutationResolverService()
    {
        return $this->services['PoPSchema\\PostTagMutations\\MutationResolvers\\SetTagsOnPostMutationResolver'] = new \PoPSchema\PostTagMutations\MutationResolvers\SetTagsOnPostMutationResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())));
    }

    /**
     * Gets the public 'PoPSchema\PostTagMutations\TypeAPIs\PostTagTypeMutationAPIInterface' shared autowired service.
     *
     * @return \PoPSchema\PostTagMutationsWP\TypeAPIs\PostTagTypeMutationAPI
     */
    protected function getPostTagTypeMutationAPIInterfaceService()
    {
        return $this->services['PoPSchema\\PostTagMutations\\TypeAPIs\\PostTagTypeMutationAPIInterface'] = new \PoPSchema\PostTagMutationsWP\TypeAPIs\PostTagTypeMutationAPI();
    }

    /**
     * Gets the public 'PoPSchema\PostTagsWP\Hooks\PostTagQueryHookSet' shared autowired service.
     *
     * @return \PoPSchema\PostTagsWP\Hooks\PostTagQueryHookSet
     */
    protected function getPostTagQueryHookSetService()
    {
        return $this->services['PoPSchema\\PostTagsWP\\Hooks\\PostTagQueryHookSet'] = new \PoPSchema\PostTagsWP\Hooks\PostTagQueryHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'PoPSchema\PostTags\ConditionalOnComponent\API\RouteModuleProcessors\EntryRouteModuleProcessor' shared autowired service.
     *
     * @return \PoPSchema\PostTags\ConditionalOnComponent\API\RouteModuleProcessors\EntryRouteModuleProcessor
     */
    protected function getEntryRouteModuleProcessor4Service()
    {
        return $this->services['PoPSchema\\PostTags\\ConditionalOnComponent\\API\\RouteModuleProcessors\\EntryRouteModuleProcessor'] = new \PoPSchema\PostTags\ConditionalOnComponent\API\RouteModuleProcessors\EntryRouteModuleProcessor(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())));
    }

    /**
     * Gets the public 'PoPSchema\PostTags\FieldResolvers\CustomPostListPostTagFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\PostTags\FieldResolvers\CustomPostListPostTagFieldResolver
     */
    protected function getCustomPostListPostTagFieldResolverService()
    {
        return $this->services['PoPSchema\\PostTags\\FieldResolvers\\CustomPostListPostTagFieldResolver'] = new \PoPSchema\PostTags\FieldResolvers\CustomPostListPostTagFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\PostTags\FieldResolvers\PostQueryableFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\PostTags\FieldResolvers\PostQueryableFieldResolver
     */
    protected function getPostQueryableFieldResolver2Service()
    {
        return $this->services['PoPSchema\\PostTags\\FieldResolvers\\PostQueryableFieldResolver'] = new \PoPSchema\PostTags\FieldResolvers\PostQueryableFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\PostTags\FieldResolvers\PostTagFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\PostTags\FieldResolvers\PostTagFieldResolver
     */
    protected function getPostTagFieldResolverService()
    {
        return $this->services['PoPSchema\\PostTags\\FieldResolvers\\PostTagFieldResolver'] = new \PoPSchema\PostTags\FieldResolvers\PostTagFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\PostTags\FieldResolvers\PostTagListFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\PostTags\FieldResolvers\PostTagListFieldResolver
     */
    protected function getPostTagListFieldResolverService()
    {
        return $this->services['PoPSchema\\PostTags\\FieldResolvers\\PostTagListFieldResolver'] = new \PoPSchema\PostTags\FieldResolvers\PostTagListFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\PostTags\FieldResolvers\RootPostTagFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\PostTags\FieldResolvers\RootPostTagFieldResolver
     */
    protected function getRootPostTagFieldResolverService()
    {
        return $this->services['PoPSchema\\PostTags\\FieldResolvers\\RootPostTagFieldResolver'] = new \PoPSchema\PostTags\FieldResolvers\RootPostTagFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\PostTags\Hooks\RoutingHookSet' shared autowired service.
     *
     * @return \PoPSchema\PostTags\Hooks\RoutingHookSet
     */
    protected function getRoutingHookSet2Service()
    {
        return $this->services['PoPSchema\\PostTags\\Hooks\\RoutingHookSet'] = new \PoPSchema\PostTags\Hooks\RoutingHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'PoPSchema\PostTags\ModuleProcessors\PostTagFieldDataloadModuleProcessor' shared autowired service.
     *
     * @return \PoPSchema\PostTags\ModuleProcessors\PostTagFieldDataloadModuleProcessor
     */
    protected function getPostTagFieldDataloadModuleProcessorService()
    {
        return $this->services['PoPSchema\\PostTags\\ModuleProcessors\\PostTagFieldDataloadModuleProcessor'] = new \PoPSchema\PostTags\ModuleProcessors\PostTagFieldDataloadModuleProcessor(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathHelpersInterface'] ?? $this->getModulePathHelpersInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleFiltering\\ModuleFilterManagerInterface'] ?? $this->getModuleFilterManagerInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] = new \PoP\ComponentModel\ModuleProcessors\ModuleProcessorManager())), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\DataloadHelperServiceInterface'] ?? $this->getDataloadHelperServiceInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface'] ?? $this->getRequestHelperServiceInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\PostTags\ModuleProcessors\TagPostFieldDataloadModuleProcessor' shared autowired service.
     *
     * @return \PoPSchema\PostTags\ModuleProcessors\TagPostFieldDataloadModuleProcessor
     */
    protected function getTagPostFieldDataloadModuleProcessorService()
    {
        return $this->services['PoPSchema\\PostTags\\ModuleProcessors\\TagPostFieldDataloadModuleProcessor'] = new \PoPSchema\PostTags\ModuleProcessors\TagPostFieldDataloadModuleProcessor(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathHelpersInterface'] ?? $this->getModulePathHelpersInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleFiltering\\ModuleFilterManagerInterface'] ?? $this->getModuleFilterManagerInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] = new \PoP\ComponentModel\ModuleProcessors\ModuleProcessorManager())), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\DataloadHelperServiceInterface'] ?? $this->getDataloadHelperServiceInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface'] ?? $this->getRequestHelperServiceInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\PostTags\TypeAPIs\PostTagTypeAPIInterface' shared autowired service.
     *
     * @return \PoPSchema\PostTagsWP\TypeAPIs\PostTagTypeAPI
     */
    protected function getPostTagTypeAPIInterfaceService()
    {
        return $this->services['PoPSchema\\PostTags\\TypeAPIs\\PostTagTypeAPIInterface'] = new \PoPSchema\PostTagsWP\TypeAPIs\PostTagTypeAPI(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoPSchema\\QueriedObject\\Helpers\\QueriedObjectHelperServiceInterface'] ?? ($this->services['PoPSchema\\QueriedObject\\Helpers\\QueriedObjectHelperServiceInterface'] = new \PoPSchema\QueriedObject\Helpers\QueriedObjectHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\PostTags\TypeDataLoaders\PostTagTypeDataLoader' shared autowired service.
     *
     * @return \PoPSchema\PostTags\TypeDataLoaders\PostTagTypeDataLoader
     */
    protected function getPostTagTypeDataLoaderService()
    {
        return $this->services['PoPSchema\\PostTags\\TypeDataLoaders\\PostTagTypeDataLoader'] = new \PoPSchema\PostTags\TypeDataLoaders\PostTagTypeDataLoader(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\PostTags\TypeResolvers\PostTagTypeResolver' shared autowired service.
     *
     * @return \PoPSchema\PostTags\TypeResolvers\PostTagTypeResolver
     */
    protected function getPostTagTypeResolverService()
    {
        return $this->services['PoPSchema\\PostTags\\TypeResolvers\\PostTagTypeResolver'] = new \PoPSchema\PostTags\TypeResolvers\PostTagTypeResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ErrorHandling\\ErrorProviderInterface'] ?? $this->getErrorProviderInterfaceService()), ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] = new \GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionService())));
    }

    /**
     * Gets the public 'PoPSchema\Posts\ConditionalOnComponent\API\RouteModuleProcessors\EntryRouteModuleProcessor' shared autowired service.
     *
     * @return \PoPSchema\Posts\ConditionalOnComponent\API\RouteModuleProcessors\EntryRouteModuleProcessor
     */
    protected function getEntryRouteModuleProcessor5Service()
    {
        return $this->services['PoPSchema\\Posts\\ConditionalOnComponent\\API\\RouteModuleProcessors\\EntryRouteModuleProcessor'] = new \PoPSchema\Posts\ConditionalOnComponent\API\RouteModuleProcessors\EntryRouteModuleProcessor(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())));
    }

    /**
     * Gets the public 'PoPSchema\Posts\ConditionalOnComponent\Users\ConditionalOnComponent\API\RouteModuleProcessors\EntryRouteModuleProcessor' shared autowired service.
     *
     * @return \PoPSchema\Posts\ConditionalOnComponent\Users\ConditionalOnComponent\API\RouteModuleProcessors\EntryRouteModuleProcessor
     */
    protected function getEntryRouteModuleProcessor6Service()
    {
        return $this->services['PoPSchema\\Posts\\ConditionalOnComponent\\Users\\ConditionalOnComponent\\API\\RouteModuleProcessors\\EntryRouteModuleProcessor'] = new \PoPSchema\Posts\ConditionalOnComponent\Users\ConditionalOnComponent\API\RouteModuleProcessors\EntryRouteModuleProcessor(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())));
    }

    /**
     * Gets the public 'PoPSchema\Posts\ConditionalOnComponent\Users\FieldResolvers\PostUserFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\Posts\ConditionalOnComponent\Users\FieldResolvers\PostUserFieldResolver
     */
    protected function getPostUserFieldResolverService()
    {
        return $this->services['PoPSchema\\Posts\\ConditionalOnComponent\\Users\\FieldResolvers\\PostUserFieldResolver'] = new \PoPSchema\Posts\ConditionalOnComponent\Users\FieldResolvers\PostUserFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\Posts\ConditionalOnComponent\Users\ModuleProcessors\FieldDataloadModuleProcessor' shared autowired service.
     *
     * @return \PoPSchema\Posts\ConditionalOnComponent\Users\ModuleProcessors\FieldDataloadModuleProcessor
     */
    protected function getFieldDataloadModuleProcessor3Service()
    {
        return $this->services['PoPSchema\\Posts\\ConditionalOnComponent\\Users\\ModuleProcessors\\FieldDataloadModuleProcessor'] = new \PoPSchema\Posts\ConditionalOnComponent\Users\ModuleProcessors\FieldDataloadModuleProcessor(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathHelpersInterface'] ?? $this->getModulePathHelpersInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleFiltering\\ModuleFilterManagerInterface'] ?? $this->getModuleFilterManagerInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] = new \PoP\ComponentModel\ModuleProcessors\ModuleProcessorManager())), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\DataloadHelperServiceInterface'] ?? $this->getDataloadHelperServiceInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface'] ?? $this->getRequestHelperServiceInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\Posts\ConditionalOnContext\AddPostTypeToCustomPostUnionTypes\SchemaServices\TypeResolverPickers\PostCustomPostTypeResolverPicker' shared autowired service.
     *
     * @return \PoPSchema\PostsWP\ConditionalOnContext\AddPostTypeToCustomPostUnionTypes\Overrides\SchemaServices\TypeResolverPickers\PostCustomPostTypeResolverPicker
     */
    protected function getPostCustomPostTypeResolverPickerService()
    {
        return $this->services['PoPSchema\\Posts\\ConditionalOnContext\\AddPostTypeToCustomPostUnionTypes\\SchemaServices\\TypeResolverPickers\\PostCustomPostTypeResolverPicker'] = new \PoPSchema\PostsWP\ConditionalOnContext\AddPostTypeToCustomPostUnionTypes\Overrides\SchemaServices\TypeResolverPickers\PostCustomPostTypeResolverPicker();
    }

    /**
     * Gets the public 'PoPSchema\Posts\FieldResolvers\ExperimentalBranchFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\Posts\FieldResolvers\ExperimentalBranchFieldResolver
     */
    protected function getExperimentalBranchFieldResolverService()
    {
        return $this->services['PoPSchema\\Posts\\FieldResolvers\\ExperimentalBranchFieldResolver'] = new \PoPSchema\Posts\FieldResolvers\ExperimentalBranchFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\Posts\FieldResolvers\PostLegacyContentFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\Posts\FieldResolvers\PostLegacyContentFieldResolver
     */
    protected function getPostLegacyContentFieldResolverService()
    {
        return $this->services['PoPSchema\\Posts\\FieldResolvers\\PostLegacyContentFieldResolver'] = new \PoPSchema\Posts\FieldResolvers\PostLegacyContentFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\Posts\FieldResolvers\RootPostFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\Posts\FieldResolvers\RootPostFieldResolver
     */
    protected function getRootPostFieldResolverService()
    {
        return $this->services['PoPSchema\\Posts\\FieldResolvers\\RootPostFieldResolver'] = new \PoPSchema\Posts\FieldResolvers\RootPostFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\Posts\Hooks\RoutingHookSet' shared autowired service.
     *
     * @return \PoPSchema\Posts\Hooks\RoutingHookSet
     */
    protected function getRoutingHookSet3Service()
    {
        return $this->services['PoPSchema\\Posts\\Hooks\\RoutingHookSet'] = new \PoPSchema\Posts\Hooks\RoutingHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'PoPSchema\Posts\ModuleProcessors\FieldDataloadModuleProcessor' shared autowired service.
     *
     * @return \PoPSchema\Posts\ModuleProcessors\FieldDataloadModuleProcessor
     */
    protected function getFieldDataloadModuleProcessor4Service()
    {
        return $this->services['PoPSchema\\Posts\\ModuleProcessors\\FieldDataloadModuleProcessor'] = new \PoPSchema\Posts\ModuleProcessors\FieldDataloadModuleProcessor(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathHelpersInterface'] ?? $this->getModulePathHelpersInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleFiltering\\ModuleFilterManagerInterface'] ?? $this->getModuleFilterManagerInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] = new \PoP\ComponentModel\ModuleProcessors\ModuleProcessorManager())), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\DataloadHelperServiceInterface'] ?? $this->getDataloadHelperServiceInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface'] ?? $this->getRequestHelperServiceInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\Posts\ModuleProcessors\FilterInnerModuleProcessor' shared autowired service.
     *
     * @return \PoPSchema\Posts\ModuleProcessors\FilterInnerModuleProcessor
     */
    protected function getFilterInnerModuleProcessor3Service()
    {
        return $this->services['PoPSchema\\Posts\\ModuleProcessors\\FilterInnerModuleProcessor'] = new \PoPSchema\Posts\ModuleProcessors\FilterInnerModuleProcessor(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathHelpersInterface'] ?? $this->getModulePathHelpersInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleFiltering\\ModuleFilterManagerInterface'] ?? $this->getModuleFilterManagerInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] = new \PoP\ComponentModel\ModuleProcessors\ModuleProcessorManager())), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\DataloadHelperServiceInterface'] ?? $this->getDataloadHelperServiceInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface'] ?? $this->getRequestHelperServiceInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\Posts\TypeAPIs\PostTypeAPIInterface' shared autowired service.
     *
     * @return \PoPSchema\PostsWP\TypeAPIs\PostTypeAPI
     */
    protected function getPostTypeAPIInterfaceService()
    {
        return $this->services['PoPSchema\\Posts\\TypeAPIs\\PostTypeAPIInterface'] = new \PoPSchema\PostsWP\TypeAPIs\PostTypeAPI(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoPSchema\\QueriedObject\\Helpers\\QueriedObjectHelperServiceInterface'] ?? ($this->services['PoPSchema\\QueriedObject\\Helpers\\QueriedObjectHelperServiceInterface'] = new \PoPSchema\QueriedObject\Helpers\QueriedObjectHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\Posts\TypeDataLoaders\PostTypeDataLoader' shared autowired service.
     *
     * @return \PoPSchema\Posts\TypeDataLoaders\PostTypeDataLoader
     */
    protected function getPostTypeDataLoaderService()
    {
        return $this->services['PoPSchema\\Posts\\TypeDataLoaders\\PostTypeDataLoader'] = new \PoPSchema\Posts\TypeDataLoaders\PostTypeDataLoader(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\Posts\TypeResolvers\PostTypeResolver' shared autowired service.
     *
     * @return \PoPSchema\Posts\TypeResolvers\PostTypeResolver
     */
    protected function getPostTypeResolverService()
    {
        return $this->services['PoPSchema\\Posts\\TypeResolvers\\PostTypeResolver'] = new \PoPSchema\Posts\TypeResolvers\PostTypeResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ErrorHandling\\ErrorProviderInterface'] ?? $this->getErrorProviderInterfaceService()), ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] = new \GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionService())));
    }

    /**
     * Gets the public 'PoPSchema\QueriedObject\FieldInterfaceResolvers\QueryableFieldInterfaceResolver' shared autowired service.
     *
     * @return \PoPSchema\QueriedObject\FieldInterfaceResolvers\QueryableFieldInterfaceResolver
     */
    protected function getQueryableFieldInterfaceResolverService()
    {
        return $this->services['PoPSchema\\QueriedObject\\FieldInterfaceResolvers\\QueryableFieldInterfaceResolver'] = new \PoPSchema\QueriedObject\FieldInterfaceResolvers\QueryableFieldInterfaceResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())));
    }

    /**
     * Gets the public 'PoPSchema\QueriedObject\Helpers\QueriedObjectHelperServiceInterface' shared autowired service.
     *
     * @return \PoPSchema\QueriedObject\Helpers\QueriedObjectHelperService
     */
    protected function getQueriedObjectHelperServiceInterfaceService()
    {
        return $this->services['PoPSchema\\QueriedObject\\Helpers\\QueriedObjectHelperServiceInterface'] = new \PoPSchema\QueriedObject\Helpers\QueriedObjectHelperService();
    }

    /**
     * Gets the public 'PoPSchema\QueriedObject\Hooks\ApplicationStateHookSet' shared autowired service.
     *
     * @return \PoPSchema\QueriedObject\Hooks\ApplicationStateHookSet
     */
    protected function getApplicationStateHookSet2Service()
    {
        return $this->services['PoPSchema\\QueriedObject\\Hooks\\ApplicationStateHookSet'] = new \PoPSchema\QueriedObject\Hooks\ApplicationStateHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoPSchema\\QueriedObject\\Routing\\CMSRoutingStateServiceInterface'] ?? ($this->services['PoPSchema\\QueriedObject\\Routing\\CMSRoutingStateServiceInterface'] = new \PoPSchema\QueriedObjectWP\Routing\CMSRoutingStateService())));
    }

    /**
     * Gets the public 'PoPSchema\QueriedObject\Routing\CMSRoutingStateServiceInterface' shared autowired service.
     *
     * @return \PoPSchema\QueriedObjectWP\Routing\CMSRoutingStateService
     */
    protected function getCMSRoutingStateServiceInterfaceService()
    {
        return $this->services['PoPSchema\\QueriedObject\\Routing\\CMSRoutingStateServiceInterface'] = new \PoPSchema\QueriedObjectWP\Routing\CMSRoutingStateService();
    }

    /**
     * Gets the public 'PoPSchema\SchemaCommons\FilterInputProcessors\FilterInputProcessor' shared autowired service.
     *
     * @return \PoPSchema\SchemaCommons\FilterInputProcessors\FilterInputProcessor
     */
    protected function getFilterInputProcessor2Service()
    {
        return $this->services['PoPSchema\\SchemaCommons\\FilterInputProcessors\\FilterInputProcessor'] = new \PoPSchema\SchemaCommons\FilterInputProcessors\FilterInputProcessor(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'PoPSchema\SchemaCommons\FormInputs\MultiValueFromStringFormInput' shared autowired service.
     *
     * @return \PoPSchema\SchemaCommons\FormInputs\MultiValueFromStringFormInput
     */
    protected function getMultiValueFromStringFormInputService()
    {
        return $this->services['PoPSchema\\SchemaCommons\\FormInputs\\MultiValueFromStringFormInput'] = new \PoPSchema\SchemaCommons\FormInputs\MultiValueFromStringFormInput();
    }

    /**
     * Gets the public 'PoPSchema\SchemaCommons\FormInputs\OrderFormInput' shared autowired service.
     *
     * @return \PoPSchema\SchemaCommons\FormInputs\OrderFormInput
     */
    protected function getOrderFormInputService()
    {
        return $this->services['PoPSchema\\SchemaCommons\\FormInputs\\OrderFormInput'] = new \PoPSchema\SchemaCommons\FormInputs\OrderFormInput();
    }

    /**
     * Gets the public 'PoPSchema\SchemaCommons\ModuleProcessors\FormInputs\CommonFilterInputModuleProcessor' shared autowired service.
     *
     * @return \PoPSchema\SchemaCommons\ModuleProcessors\FormInputs\CommonFilterInputModuleProcessor
     */
    protected function getCommonFilterInputModuleProcessorService()
    {
        return $this->services['PoPSchema\\SchemaCommons\\ModuleProcessors\\FormInputs\\CommonFilterInputModuleProcessor'] = new \PoPSchema\SchemaCommons\ModuleProcessors\FormInputs\CommonFilterInputModuleProcessor(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathHelpersInterface'] ?? $this->getModulePathHelpersInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleFiltering\\ModuleFilterManagerInterface'] ?? $this->getModuleFilterManagerInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] = new \PoP\ComponentModel\ModuleProcessors\ModuleProcessorManager())), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\DataloadHelperServiceInterface'] ?? $this->getDataloadHelperServiceInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface'] ?? $this->getRequestHelperServiceInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\SchemaCommons\ModuleProcessors\FormInputs\CommonFilterMultipleInputModuleProcessor' shared autowired service.
     *
     * @return \PoPSchema\SchemaCommons\ModuleProcessors\FormInputs\CommonFilterMultipleInputModuleProcessor
     */
    protected function getCommonFilterMultipleInputModuleProcessorService()
    {
        return $this->services['PoPSchema\\SchemaCommons\\ModuleProcessors\\FormInputs\\CommonFilterMultipleInputModuleProcessor'] = new \PoPSchema\SchemaCommons\ModuleProcessors\FormInputs\CommonFilterMultipleInputModuleProcessor(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathHelpersInterface'] ?? $this->getModulePathHelpersInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleFiltering\\ModuleFilterManagerInterface'] ?? $this->getModuleFilterManagerInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] = new \PoP\ComponentModel\ModuleProcessors\ModuleProcessorManager())), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\DataloadHelperServiceInterface'] ?? $this->getDataloadHelperServiceInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface'] ?? $this->getRequestHelperServiceInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\SchemaCommons\Services\AllowOrDenySettingsServiceInterface' shared autowired service.
     *
     * @return \PoPSchema\SchemaCommons\Services\AllowOrDenySettingsService
     */
    protected function getAllowOrDenySettingsServiceInterfaceService()
    {
        return $this->services['PoPSchema\\SchemaCommons\\Services\\AllowOrDenySettingsServiceInterface'] = new \PoPSchema\SchemaCommons\Services\AllowOrDenySettingsService();
    }

    /**
     * Gets the public 'PoPSchema\Settings\FieldResolvers\RootFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\Settings\FieldResolvers\RootFieldResolver
     */
    protected function getRootFieldResolver9Service()
    {
        return $this->services['PoPSchema\\Settings\\FieldResolvers\\RootFieldResolver'] = new \PoPSchema\Settings\FieldResolvers\RootFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\Settings\TypeAPIs\SettingsTypeAPIInterface' shared autowired service.
     *
     * @return \PoPSchema\SettingsWP\TypeAPIs\SettingsTypeAPI
     */
    protected function getSettingsTypeAPIInterfaceService()
    {
        return $this->services['PoPSchema\\Settings\\TypeAPIs\\SettingsTypeAPIInterface'] = new \PoPSchema\SettingsWP\TypeAPIs\SettingsTypeAPI();
    }

    /**
     * Gets the public 'PoPSchema\TagsWP\Hooks\RoutingStateHookSet' shared autowired service.
     *
     * @return \PoPSchema\TagsWP\Hooks\RoutingStateHookSet
     */
    protected function getRoutingStateHookSet4Service()
    {
        return $this->services['PoPSchema\\TagsWP\\Hooks\\RoutingStateHookSet'] = new \PoPSchema\TagsWP\Hooks\RoutingStateHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'PoPSchema\TagsWP\LooseContracts\LooseContractResolutionSet' shared autowired service.
     *
     * @return \PoPSchema\TagsWP\LooseContracts\LooseContractResolutionSet
     */
    protected function getLooseContractResolutionSet6Service()
    {
        return $this->services['PoPSchema\\TagsWP\\LooseContracts\\LooseContractResolutionSet'] = new \PoPSchema\TagsWP\LooseContracts\LooseContractResolutionSet(($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] ?? ($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] = new \PoP\LooseContracts\LooseContractManager())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())));
    }

    /**
     * Gets the public 'PoPSchema\Tags\Hooks\VarsHookSet' shared autowired service.
     *
     * @return \PoPSchema\Tags\Hooks\VarsHookSet
     */
    protected function getVarsHookSet7Service()
    {
        return $this->services['PoPSchema\\Tags\\Hooks\\VarsHookSet'] = new \PoPSchema\Tags\Hooks\VarsHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'PoPSchema\Tags\LooseContracts\LooseContractSet' shared autowired service.
     *
     * @return \PoPSchema\Tags\LooseContracts\LooseContractSet
     */
    protected function getLooseContractSet6Service()
    {
        return $this->services['PoPSchema\\Tags\\LooseContracts\\LooseContractSet'] = new \PoPSchema\Tags\LooseContracts\LooseContractSet(($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] ?? ($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] = new \PoP\LooseContracts\LooseContractManager())));
    }

    /**
     * Gets the public 'PoPSchema\Tags\ModuleProcessors\FilterInnerModuleProcessor' shared autowired service.
     *
     * @return \PoPSchema\Tags\ModuleProcessors\FilterInnerModuleProcessor
     */
    protected function getFilterInnerModuleProcessor4Service()
    {
        return $this->services['PoPSchema\\Tags\\ModuleProcessors\\FilterInnerModuleProcessor'] = new \PoPSchema\Tags\ModuleProcessors\FilterInnerModuleProcessor(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathHelpersInterface'] ?? $this->getModulePathHelpersInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleFiltering\\ModuleFilterManagerInterface'] ?? $this->getModuleFilterManagerInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] = new \PoP\ComponentModel\ModuleProcessors\ModuleProcessorManager())), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\DataloadHelperServiceInterface'] ?? $this->getDataloadHelperServiceInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface'] ?? $this->getRequestHelperServiceInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\Taxonomies\TypeAPIs\TaxonomyTypeAPIInterface' shared autowired service.
     *
     * @return \PoPSchema\TaxonomiesWP\TypeAPIs\TaxonomyTypeAPI
     */
    protected function getTaxonomyTypeAPIInterfaceService()
    {
        return $this->services['PoPSchema\\Taxonomies\\TypeAPIs\\TaxonomyTypeAPIInterface'] = new \PoPSchema\TaxonomiesWP\TypeAPIs\TaxonomyTypeAPI();
    }

    /**
     * Gets the public 'PoPSchema\TaxonomyMetaWP\Hooks\QueryHookSet' shared autowired service.
     *
     * @return \PoPSchema\TaxonomyMetaWP\Hooks\QueryHookSet
     */
    protected function getQueryHookSet4Service()
    {
        return $this->services['PoPSchema\\TaxonomyMetaWP\\Hooks\\QueryHookSet'] = new \PoPSchema\TaxonomyMetaWP\Hooks\QueryHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'PoPSchema\TaxonomyMeta\FieldResolvers\TaxonomyFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\TaxonomyMeta\FieldResolvers\TaxonomyFieldResolver
     */
    protected function getTaxonomyFieldResolverService()
    {
        return $this->services['PoPSchema\\TaxonomyMeta\\FieldResolvers\\TaxonomyFieldResolver'] = new \PoPSchema\TaxonomyMeta\FieldResolvers\TaxonomyFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\TaxonomyMeta\TypeAPIs\TaxonomyMetaTypeAPIInterface' shared autowired service.
     *
     * @return \PoPSchema\TaxonomyMetaWP\TypeAPIs\TaxonomyMetaTypeAPI
     */
    protected function getTaxonomyMetaTypeAPIInterfaceService()
    {
        return $this->services['PoPSchema\\TaxonomyMeta\\TypeAPIs\\TaxonomyMetaTypeAPIInterface'] = new \PoPSchema\TaxonomyMetaWP\TypeAPIs\TaxonomyMetaTypeAPI();
    }

    /**
     * Gets the public 'PoPSchema\UserMetaWP\Hooks\QueryHookSet' shared autowired service.
     *
     * @return \PoPSchema\UserMetaWP\Hooks\QueryHookSet
     */
    protected function getQueryHookSet5Service()
    {
        return $this->services['PoPSchema\\UserMetaWP\\Hooks\\QueryHookSet'] = new \PoPSchema\UserMetaWP\Hooks\QueryHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'PoPSchema\UserMeta\FieldResolvers\UserFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\UserMeta\FieldResolvers\UserFieldResolver
     */
    protected function getUserFieldResolverService()
    {
        return $this->services['PoPSchema\\UserMeta\\FieldResolvers\\UserFieldResolver'] = new \PoPSchema\UserMeta\FieldResolvers\UserFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\UserMeta\TypeAPIs\UserMetaTypeAPIInterface' shared autowired service.
     *
     * @return \PoPSchema\UserMetaWP\TypeAPIs\UserMetaTypeAPI
     */
    protected function getUserMetaTypeAPIInterfaceService()
    {
        return $this->services['PoPSchema\\UserMeta\\TypeAPIs\\UserMetaTypeAPIInterface'] = new \PoPSchema\UserMetaWP\TypeAPIs\UserMetaTypeAPI();
    }

    /**
     * Gets the public 'PoPSchema\UserRolesAccessControl\ConditionalOnComponent\CacheControl\TypeResolverDecorators\ValidateDoesLoggedInUserHaveCapabilityForDirectivesPrivateSchemaTypeResolverDecorator' shared autowired service.
     *
     * @return \PoPSchema\UserRolesAccessControl\ConditionalOnComponent\CacheControl\TypeResolverDecorators\ValidateDoesLoggedInUserHaveCapabilityForDirectivesPrivateSchemaTypeResolverDecorator
     */
    protected function getValidateDoesLoggedInUserHaveCapabilityForDirectivesPrivateSchemaTypeResolverDecoratorService()
    {
        return $this->services['PoPSchema\\UserRolesAccessControl\\ConditionalOnComponent\\CacheControl\\TypeResolverDecorators\\ValidateDoesLoggedInUserHaveCapabilityForDirectivesPrivateSchemaTypeResolverDecorator'] = new \PoPSchema\UserRolesAccessControl\ConditionalOnComponent\CacheControl\TypeResolverDecorators\ValidateDoesLoggedInUserHaveCapabilityForDirectivesPrivateSchemaTypeResolverDecorator(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\AccessControl\\Services\\AccessControlManagerInterface'] ?? $this->getAccessControlManagerInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\UserRolesAccessControl\ConditionalOnComponent\CacheControl\TypeResolverDecorators\ValidateDoesLoggedInUserHaveCapabilityForFieldsPrivateSchemaTypeResolverDecorator' shared autowired service.
     *
     * @return \PoPSchema\UserRolesAccessControl\ConditionalOnComponent\CacheControl\TypeResolverDecorators\ValidateDoesLoggedInUserHaveCapabilityForFieldsPrivateSchemaTypeResolverDecorator
     */
    protected function getValidateDoesLoggedInUserHaveCapabilityForFieldsPrivateSchemaTypeResolverDecoratorService()
    {
        return $this->services['PoPSchema\\UserRolesAccessControl\\ConditionalOnComponent\\CacheControl\\TypeResolverDecorators\\ValidateDoesLoggedInUserHaveCapabilityForFieldsPrivateSchemaTypeResolverDecorator'] = new \PoPSchema\UserRolesAccessControl\ConditionalOnComponent\CacheControl\TypeResolverDecorators\ValidateDoesLoggedInUserHaveCapabilityForFieldsPrivateSchemaTypeResolverDecorator(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\AccessControl\\Services\\AccessControlManagerInterface'] ?? $this->getAccessControlManagerInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\UserRolesAccessControl\ConditionalOnComponent\CacheControl\TypeResolverDecorators\ValidateDoesLoggedInUserHaveRoleForDirectivesPrivateSchemaTypeResolverDecorator' shared autowired service.
     *
     * @return \PoPSchema\UserRolesAccessControl\ConditionalOnComponent\CacheControl\TypeResolverDecorators\ValidateDoesLoggedInUserHaveRoleForDirectivesPrivateSchemaTypeResolverDecorator
     */
    protected function getValidateDoesLoggedInUserHaveRoleForDirectivesPrivateSchemaTypeResolverDecoratorService()
    {
        return $this->services['PoPSchema\\UserRolesAccessControl\\ConditionalOnComponent\\CacheControl\\TypeResolverDecorators\\ValidateDoesLoggedInUserHaveRoleForDirectivesPrivateSchemaTypeResolverDecorator'] = new \PoPSchema\UserRolesAccessControl\ConditionalOnComponent\CacheControl\TypeResolverDecorators\ValidateDoesLoggedInUserHaveRoleForDirectivesPrivateSchemaTypeResolverDecorator(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\AccessControl\\Services\\AccessControlManagerInterface'] ?? $this->getAccessControlManagerInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\UserRolesAccessControl\ConditionalOnComponent\CacheControl\TypeResolverDecorators\ValidateDoesLoggedInUserHaveRoleForFieldsPrivateSchemaTypeResolverDecorator' shared autowired service.
     *
     * @return \PoPSchema\UserRolesAccessControl\ConditionalOnComponent\CacheControl\TypeResolverDecorators\ValidateDoesLoggedInUserHaveRoleForFieldsPrivateSchemaTypeResolverDecorator
     */
    protected function getValidateDoesLoggedInUserHaveRoleForFieldsPrivateSchemaTypeResolverDecoratorService()
    {
        return $this->services['PoPSchema\\UserRolesAccessControl\\ConditionalOnComponent\\CacheControl\\TypeResolverDecorators\\ValidateDoesLoggedInUserHaveRoleForFieldsPrivateSchemaTypeResolverDecorator'] = new \PoPSchema\UserRolesAccessControl\ConditionalOnComponent\CacheControl\TypeResolverDecorators\ValidateDoesLoggedInUserHaveRoleForFieldsPrivateSchemaTypeResolverDecorator(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\AccessControl\\Services\\AccessControlManagerInterface'] ?? $this->getAccessControlManagerInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\UserRolesAccessControl\DirectiveResolvers\ValidateDoesLoggedInUserHaveAnyCapabilityDirectiveResolver' shared autowired service.
     *
     * @return \PoPSchema\UserRolesAccessControl\DirectiveResolvers\ValidateDoesLoggedInUserHaveAnyCapabilityDirectiveResolver
     */
    protected function getValidateDoesLoggedInUserHaveAnyCapabilityDirectiveResolverService()
    {
        return $this->services['PoPSchema\\UserRolesAccessControl\\DirectiveResolvers\\ValidateDoesLoggedInUserHaveAnyCapabilityDirectiveResolver'] = new \PoPSchema\UserRolesAccessControl\DirectiveResolvers\ValidateDoesLoggedInUserHaveAnyCapabilityDirectiveResolver();
    }

    /**
     * Gets the public 'PoPSchema\UserRolesAccessControl\DirectiveResolvers\ValidateDoesLoggedInUserHaveAnyCapabilityForDirectivesDirectiveResolver' shared autowired service.
     *
     * @return \PoPSchema\UserRolesAccessControl\DirectiveResolvers\ValidateDoesLoggedInUserHaveAnyCapabilityForDirectivesDirectiveResolver
     */
    protected function getValidateDoesLoggedInUserHaveAnyCapabilityForDirectivesDirectiveResolverService()
    {
        return $this->services['PoPSchema\\UserRolesAccessControl\\DirectiveResolvers\\ValidateDoesLoggedInUserHaveAnyCapabilityForDirectivesDirectiveResolver'] = new \PoPSchema\UserRolesAccessControl\DirectiveResolvers\ValidateDoesLoggedInUserHaveAnyCapabilityForDirectivesDirectiveResolver();
    }

    /**
     * Gets the public 'PoPSchema\UserRolesAccessControl\DirectiveResolvers\ValidateDoesLoggedInUserHaveAnyRoleDirectiveResolver' shared autowired service.
     *
     * @return \PoPSchema\UserRolesAccessControl\DirectiveResolvers\ValidateDoesLoggedInUserHaveAnyRoleDirectiveResolver
     */
    protected function getValidateDoesLoggedInUserHaveAnyRoleDirectiveResolverService()
    {
        return $this->services['PoPSchema\\UserRolesAccessControl\\DirectiveResolvers\\ValidateDoesLoggedInUserHaveAnyRoleDirectiveResolver'] = new \PoPSchema\UserRolesAccessControl\DirectiveResolvers\ValidateDoesLoggedInUserHaveAnyRoleDirectiveResolver();
    }

    /**
     * Gets the public 'PoPSchema\UserRolesAccessControl\DirectiveResolvers\ValidateDoesLoggedInUserHaveAnyRoleForDirectivesDirectiveResolver' shared autowired service.
     *
     * @return \PoPSchema\UserRolesAccessControl\DirectiveResolvers\ValidateDoesLoggedInUserHaveAnyRoleForDirectivesDirectiveResolver
     */
    protected function getValidateDoesLoggedInUserHaveAnyRoleForDirectivesDirectiveResolverService()
    {
        return $this->services['PoPSchema\\UserRolesAccessControl\\DirectiveResolvers\\ValidateDoesLoggedInUserHaveAnyRoleForDirectivesDirectiveResolver'] = new \PoPSchema\UserRolesAccessControl\DirectiveResolvers\ValidateDoesLoggedInUserHaveAnyRoleForDirectivesDirectiveResolver();
    }

    /**
     * Gets the public 'PoPSchema\UserRolesAccessControl\Hooks\MaybeDisableDirectivesIfLoggedInUserDoesNotHaveCapabilityPrivateSchemaHookSet' shared autowired service.
     *
     * @return \PoPSchema\UserRolesAccessControl\Hooks\MaybeDisableDirectivesIfLoggedInUserDoesNotHaveCapabilityPrivateSchemaHookSet
     */
    protected function getMaybeDisableDirectivesIfLoggedInUserDoesNotHaveCapabilityPrivateSchemaHookSetService()
    {
        return $this->services['PoPSchema\\UserRolesAccessControl\\Hooks\\MaybeDisableDirectivesIfLoggedInUserDoesNotHaveCapabilityPrivateSchemaHookSet'] = new \PoPSchema\UserRolesAccessControl\Hooks\MaybeDisableDirectivesIfLoggedInUserDoesNotHaveCapabilityPrivateSchemaHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\AccessControl\\Services\\AccessControlManagerInterface'] ?? $this->getAccessControlManagerInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\UserRolesAccessControl\Hooks\MaybeDisableDirectivesIfLoggedInUserDoesNotHaveRolePrivateSchemaHookSet' shared autowired service.
     *
     * @return \PoPSchema\UserRolesAccessControl\Hooks\MaybeDisableDirectivesIfLoggedInUserDoesNotHaveRolePrivateSchemaHookSet
     */
    protected function getMaybeDisableDirectivesIfLoggedInUserDoesNotHaveRolePrivateSchemaHookSetService()
    {
        return $this->services['PoPSchema\\UserRolesAccessControl\\Hooks\\MaybeDisableDirectivesIfLoggedInUserDoesNotHaveRolePrivateSchemaHookSet'] = new \PoPSchema\UserRolesAccessControl\Hooks\MaybeDisableDirectivesIfLoggedInUserDoesNotHaveRolePrivateSchemaHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\AccessControl\\Services\\AccessControlManagerInterface'] ?? $this->getAccessControlManagerInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\UserRolesAccessControl\Hooks\MaybeDisableFieldsIfLoggedInUserDoesNotHaveCapabilityPrivateSchemaHookSet' shared autowired service.
     *
     * @return \PoPSchema\UserRolesAccessControl\Hooks\MaybeDisableFieldsIfLoggedInUserDoesNotHaveCapabilityPrivateSchemaHookSet
     */
    protected function getMaybeDisableFieldsIfLoggedInUserDoesNotHaveCapabilityPrivateSchemaHookSetService()
    {
        return $this->services['PoPSchema\\UserRolesAccessControl\\Hooks\\MaybeDisableFieldsIfLoggedInUserDoesNotHaveCapabilityPrivateSchemaHookSet'] = new \PoPSchema\UserRolesAccessControl\Hooks\MaybeDisableFieldsIfLoggedInUserDoesNotHaveCapabilityPrivateSchemaHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\AccessControl\\Services\\AccessControlManagerInterface'] ?? $this->getAccessControlManagerInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\UserRolesAccessControl\Hooks\MaybeDisableFieldsIfLoggedInUserDoesNotHaveRolePrivateSchemaHookSet' shared autowired service.
     *
     * @return \PoPSchema\UserRolesAccessControl\Hooks\MaybeDisableFieldsIfLoggedInUserDoesNotHaveRolePrivateSchemaHookSet
     */
    protected function getMaybeDisableFieldsIfLoggedInUserDoesNotHaveRolePrivateSchemaHookSetService()
    {
        return $this->services['PoPSchema\\UserRolesAccessControl\\Hooks\\MaybeDisableFieldsIfLoggedInUserDoesNotHaveRolePrivateSchemaHookSet'] = new \PoPSchema\UserRolesAccessControl\Hooks\MaybeDisableFieldsIfLoggedInUserDoesNotHaveRolePrivateSchemaHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\AccessControl\\Services\\AccessControlManagerInterface'] ?? $this->getAccessControlManagerInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\UserRolesAccessControl\TypeResolverDecorators\GlobalValidateIsUserLoggedInForDirectivesPublicSchemaTypeResolverDecorator' shared autowired service.
     *
     * @return \PoPSchema\UserRolesAccessControl\TypeResolverDecorators\GlobalValidateIsUserLoggedInForDirectivesPublicSchemaTypeResolverDecorator
     */
    protected function getGlobalValidateIsUserLoggedInForDirectivesPublicSchemaTypeResolverDecoratorService()
    {
        return $this->services['PoPSchema\\UserRolesAccessControl\\TypeResolverDecorators\\GlobalValidateIsUserLoggedInForDirectivesPublicSchemaTypeResolverDecorator'] = new \PoPSchema\UserRolesAccessControl\TypeResolverDecorators\GlobalValidateIsUserLoggedInForDirectivesPublicSchemaTypeResolverDecorator(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()));
    }

    /**
     * Gets the public 'PoPSchema\UserRolesAccessControl\TypeResolverDecorators\GlobalValidateIsUserLoggedInForFieldsPublicSchemaTypeResolverDecorator' shared autowired service.
     *
     * @return \PoPSchema\UserRolesAccessControl\TypeResolverDecorators\GlobalValidateIsUserLoggedInForFieldsPublicSchemaTypeResolverDecorator
     */
    protected function getGlobalValidateIsUserLoggedInForFieldsPublicSchemaTypeResolverDecoratorService()
    {
        return $this->services['PoPSchema\\UserRolesAccessControl\\TypeResolverDecorators\\GlobalValidateIsUserLoggedInForFieldsPublicSchemaTypeResolverDecorator'] = new \PoPSchema\UserRolesAccessControl\TypeResolverDecorators\GlobalValidateIsUserLoggedInForFieldsPublicSchemaTypeResolverDecorator(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()));
    }

    /**
     * Gets the public 'PoPSchema\UserRolesAccessControl\TypeResolverDecorators\ValidateDoesLoggedInUserHaveCapabilityForDirectivesPublicSchemaTypeResolverDecorator' shared autowired service.
     *
     * @return \PoPSchema\UserRolesAccessControl\TypeResolverDecorators\ValidateDoesLoggedInUserHaveCapabilityForDirectivesPublicSchemaTypeResolverDecorator
     */
    protected function getValidateDoesLoggedInUserHaveCapabilityForDirectivesPublicSchemaTypeResolverDecoratorService()
    {
        return $this->services['PoPSchema\\UserRolesAccessControl\\TypeResolverDecorators\\ValidateDoesLoggedInUserHaveCapabilityForDirectivesPublicSchemaTypeResolverDecorator'] = new \PoPSchema\UserRolesAccessControl\TypeResolverDecorators\ValidateDoesLoggedInUserHaveCapabilityForDirectivesPublicSchemaTypeResolverDecorator(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\AccessControl\\Services\\AccessControlManagerInterface'] ?? $this->getAccessControlManagerInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\UserRolesAccessControl\TypeResolverDecorators\ValidateDoesLoggedInUserHaveCapabilityForFieldsPublicSchemaTypeResolverDecorator' shared autowired service.
     *
     * @return \PoPSchema\UserRolesAccessControl\TypeResolverDecorators\ValidateDoesLoggedInUserHaveCapabilityForFieldsPublicSchemaTypeResolverDecorator
     */
    protected function getValidateDoesLoggedInUserHaveCapabilityForFieldsPublicSchemaTypeResolverDecoratorService()
    {
        return $this->services['PoPSchema\\UserRolesAccessControl\\TypeResolverDecorators\\ValidateDoesLoggedInUserHaveCapabilityForFieldsPublicSchemaTypeResolverDecorator'] = new \PoPSchema\UserRolesAccessControl\TypeResolverDecorators\ValidateDoesLoggedInUserHaveCapabilityForFieldsPublicSchemaTypeResolverDecorator(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\AccessControl\\Services\\AccessControlManagerInterface'] ?? $this->getAccessControlManagerInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\UserRolesAccessControl\TypeResolverDecorators\ValidateDoesLoggedInUserHaveRoleForDirectivesPublicSchemaTypeResolverDecorator' shared autowired service.
     *
     * @return \PoPSchema\UserRolesAccessControl\TypeResolverDecorators\ValidateDoesLoggedInUserHaveRoleForDirectivesPublicSchemaTypeResolverDecorator
     */
    protected function getValidateDoesLoggedInUserHaveRoleForDirectivesPublicSchemaTypeResolverDecoratorService()
    {
        return $this->services['PoPSchema\\UserRolesAccessControl\\TypeResolverDecorators\\ValidateDoesLoggedInUserHaveRoleForDirectivesPublicSchemaTypeResolverDecorator'] = new \PoPSchema\UserRolesAccessControl\TypeResolverDecorators\ValidateDoesLoggedInUserHaveRoleForDirectivesPublicSchemaTypeResolverDecorator(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\AccessControl\\Services\\AccessControlManagerInterface'] ?? $this->getAccessControlManagerInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\UserRolesAccessControl\TypeResolverDecorators\ValidateDoesLoggedInUserHaveRoleForFieldsPublicSchemaTypeResolverDecorator' shared autowired service.
     *
     * @return \PoPSchema\UserRolesAccessControl\TypeResolverDecorators\ValidateDoesLoggedInUserHaveRoleForFieldsPublicSchemaTypeResolverDecorator
     */
    protected function getValidateDoesLoggedInUserHaveRoleForFieldsPublicSchemaTypeResolverDecoratorService()
    {
        return $this->services['PoPSchema\\UserRolesAccessControl\\TypeResolverDecorators\\ValidateDoesLoggedInUserHaveRoleForFieldsPublicSchemaTypeResolverDecorator'] = new \PoPSchema\UserRolesAccessControl\TypeResolverDecorators\ValidateDoesLoggedInUserHaveRoleForFieldsPublicSchemaTypeResolverDecorator(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\AccessControl\\Services\\AccessControlManagerInterface'] ?? $this->getAccessControlManagerInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\UserRolesWP\FieldResolvers\UserRoleFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\UserRolesWP\FieldResolvers\UserRoleFieldResolver
     */
    protected function getUserRoleFieldResolverService()
    {
        return $this->services['PoPSchema\\UserRolesWP\\FieldResolvers\\UserRoleFieldResolver'] = new \PoPSchema\UserRolesWP\FieldResolvers\UserRoleFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\UserRolesWP\TypeDataLoaders\UserRoleTypeDataLoader' shared autowired service.
     *
     * @return \PoPSchema\UserRolesWP\TypeDataLoaders\UserRoleTypeDataLoader
     */
    protected function getUserRoleTypeDataLoaderService()
    {
        return $this->services['PoPSchema\\UserRolesWP\\TypeDataLoaders\\UserRoleTypeDataLoader'] = new \PoPSchema\UserRolesWP\TypeDataLoaders\UserRoleTypeDataLoader(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\UserRolesWP\TypeResolvers\UserRoleTypeResolver' shared autowired service.
     *
     * @return \PoPSchema\UserRolesWP\TypeResolvers\UserRoleTypeResolver
     */
    protected function getUserRoleTypeResolverService()
    {
        return $this->services['PoPSchema\\UserRolesWP\\TypeResolvers\\UserRoleTypeResolver'] = new \PoPSchema\UserRolesWP\TypeResolvers\UserRoleTypeResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ErrorHandling\\ErrorProviderInterface'] ?? $this->getErrorProviderInterfaceService()), ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] = new \GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionService())));
    }

    /**
     * Gets the public 'PoPSchema\UserRoles\FieldResolvers\RootRolesFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\UserRolesWP\Overrides\FieldResolvers\RootRolesFieldResolver
     */
    protected function getRootRolesFieldResolverService()
    {
        return $this->services['PoPSchema\\UserRoles\\FieldResolvers\\RootRolesFieldResolver'] = new \PoPSchema\UserRolesWP\Overrides\FieldResolvers\RootRolesFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\UserRoles\FieldResolvers\UserFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\UserRolesWP\Overrides\FieldResolvers\UserFieldResolver
     */
    protected function getUserFieldResolver2Service()
    {
        return $this->services['PoPSchema\\UserRoles\\FieldResolvers\\UserFieldResolver'] = new \PoPSchema\UserRolesWP\Overrides\FieldResolvers\UserFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\UserRoles\Hooks\VarsHookSet' shared autowired service.
     *
     * @return \PoPSchema\UserRoles\Hooks\VarsHookSet
     */
    protected function getVarsHookSet8Service()
    {
        return $this->services['PoPSchema\\UserRoles\\Hooks\\VarsHookSet'] = new \PoPSchema\UserRoles\Hooks\VarsHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'PoPSchema\UserRoles\TypeDataResolvers\UserRoleTypeDataResolverInterface' shared autowired service.
     *
     * @return \PoPSchema\UserRolesWP\TypeDataResolvers\UserRoleTypeDataResolver
     */
    protected function getUserRoleTypeDataResolverInterfaceService()
    {
        return $this->services['PoPSchema\\UserRoles\\TypeDataResolvers\\UserRoleTypeDataResolverInterface'] = new \PoPSchema\UserRolesWP\TypeDataResolvers\UserRoleTypeDataResolver(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())));
    }

    /**
     * Gets the public 'PoPSchema\UserStateAccessControl\ConditionalOnComponent\CacheControl\TypeResolverDecorators\NoCacheUserStateTypeResolverDecorator' shared autowired service.
     *
     * @return \PoPSchema\UserStateAccessControl\ConditionalOnComponent\CacheControl\TypeResolverDecorators\NoCacheUserStateTypeResolverDecorator
     */
    protected function getNoCacheUserStateTypeResolverDecoratorService()
    {
        return $this->services['PoPSchema\\UserStateAccessControl\\ConditionalOnComponent\\CacheControl\\TypeResolverDecorators\\NoCacheUserStateTypeResolverDecorator'] = new \PoPSchema\UserStateAccessControl\ConditionalOnComponent\CacheControl\TypeResolverDecorators\NoCacheUserStateTypeResolverDecorator(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()));
    }

    /**
     * Gets the public 'PoPSchema\UserStateAccessControl\ConditionalOnComponent\CacheControl\TypeResolverDecorators\ValidateUserLoggedInForDirectivesPrivateSchemaTypeResolverDecorator' shared autowired service.
     *
     * @return \PoPSchema\UserStateAccessControl\ConditionalOnComponent\CacheControl\TypeResolverDecorators\ValidateUserLoggedInForDirectivesPrivateSchemaTypeResolverDecorator
     */
    protected function getValidateUserLoggedInForDirectivesPrivateSchemaTypeResolverDecoratorService()
    {
        return $this->services['PoPSchema\\UserStateAccessControl\\ConditionalOnComponent\\CacheControl\\TypeResolverDecorators\\ValidateUserLoggedInForDirectivesPrivateSchemaTypeResolverDecorator'] = new \PoPSchema\UserStateAccessControl\ConditionalOnComponent\CacheControl\TypeResolverDecorators\ValidateUserLoggedInForDirectivesPrivateSchemaTypeResolverDecorator(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\AccessControl\\Services\\AccessControlManagerInterface'] ?? $this->getAccessControlManagerInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\UserStateAccessControl\ConditionalOnComponent\CacheControl\TypeResolverDecorators\ValidateUserLoggedInForFieldsPrivateSchemaTypeResolverDecorator' shared autowired service.
     *
     * @return \PoPSchema\UserStateAccessControl\ConditionalOnComponent\CacheControl\TypeResolverDecorators\ValidateUserLoggedInForFieldsPrivateSchemaTypeResolverDecorator
     */
    protected function getValidateUserLoggedInForFieldsPrivateSchemaTypeResolverDecoratorService()
    {
        return $this->services['PoPSchema\\UserStateAccessControl\\ConditionalOnComponent\\CacheControl\\TypeResolverDecorators\\ValidateUserLoggedInForFieldsPrivateSchemaTypeResolverDecorator'] = new \PoPSchema\UserStateAccessControl\ConditionalOnComponent\CacheControl\TypeResolverDecorators\ValidateUserLoggedInForFieldsPrivateSchemaTypeResolverDecorator(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\AccessControl\\Services\\AccessControlManagerInterface'] ?? $this->getAccessControlManagerInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\UserStateAccessControl\ConditionalOnComponent\CacheControl\TypeResolverDecorators\ValidateUserNotLoggedInForDirectivesPrivateSchemaTypeResolverDecorator' shared autowired service.
     *
     * @return \PoPSchema\UserStateAccessControl\ConditionalOnComponent\CacheControl\TypeResolverDecorators\ValidateUserNotLoggedInForDirectivesPrivateSchemaTypeResolverDecorator
     */
    protected function getValidateUserNotLoggedInForDirectivesPrivateSchemaTypeResolverDecoratorService()
    {
        return $this->services['PoPSchema\\UserStateAccessControl\\ConditionalOnComponent\\CacheControl\\TypeResolverDecorators\\ValidateUserNotLoggedInForDirectivesPrivateSchemaTypeResolverDecorator'] = new \PoPSchema\UserStateAccessControl\ConditionalOnComponent\CacheControl\TypeResolverDecorators\ValidateUserNotLoggedInForDirectivesPrivateSchemaTypeResolverDecorator(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\AccessControl\\Services\\AccessControlManagerInterface'] ?? $this->getAccessControlManagerInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\UserStateAccessControl\ConditionalOnComponent\CacheControl\TypeResolverDecorators\ValidateUserNotLoggedInForFieldsPrivateSchemaTypeResolverDecorator' shared autowired service.
     *
     * @return \PoPSchema\UserStateAccessControl\ConditionalOnComponent\CacheControl\TypeResolverDecorators\ValidateUserNotLoggedInForFieldsPrivateSchemaTypeResolverDecorator
     */
    protected function getValidateUserNotLoggedInForFieldsPrivateSchemaTypeResolverDecoratorService()
    {
        return $this->services['PoPSchema\\UserStateAccessControl\\ConditionalOnComponent\\CacheControl\\TypeResolverDecorators\\ValidateUserNotLoggedInForFieldsPrivateSchemaTypeResolverDecorator'] = new \PoPSchema\UserStateAccessControl\ConditionalOnComponent\CacheControl\TypeResolverDecorators\ValidateUserNotLoggedInForFieldsPrivateSchemaTypeResolverDecorator(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\AccessControl\\Services\\AccessControlManagerInterface'] ?? $this->getAccessControlManagerInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\UserStateAccessControl\DirectiveResolvers\ValidateIsUserLoggedInDirectiveResolver' shared autowired service.
     *
     * @return \PoPSchema\UserStateAccessControl\DirectiveResolvers\ValidateIsUserLoggedInDirectiveResolver
     */
    protected function getValidateIsUserLoggedInDirectiveResolverService()
    {
        return $this->services['PoPSchema\\UserStateAccessControl\\DirectiveResolvers\\ValidateIsUserLoggedInDirectiveResolver'] = new \PoPSchema\UserStateAccessControl\DirectiveResolvers\ValidateIsUserLoggedInDirectiveResolver();
    }

    /**
     * Gets the public 'PoPSchema\UserStateAccessControl\DirectiveResolvers\ValidateIsUserLoggedInForDirectivesDirectiveResolver' shared autowired service.
     *
     * @return \PoPSchema\UserStateAccessControl\DirectiveResolvers\ValidateIsUserLoggedInForDirectivesDirectiveResolver
     */
    protected function getValidateIsUserLoggedInForDirectivesDirectiveResolverService()
    {
        return $this->services['PoPSchema\\UserStateAccessControl\\DirectiveResolvers\\ValidateIsUserLoggedInForDirectivesDirectiveResolver'] = new \PoPSchema\UserStateAccessControl\DirectiveResolvers\ValidateIsUserLoggedInForDirectivesDirectiveResolver();
    }

    /**
     * Gets the public 'PoPSchema\UserStateAccessControl\DirectiveResolvers\ValidateIsUserNotLoggedInDirectiveResolver' shared autowired service.
     *
     * @return \PoPSchema\UserStateAccessControl\DirectiveResolvers\ValidateIsUserNotLoggedInDirectiveResolver
     */
    protected function getValidateIsUserNotLoggedInDirectiveResolverService()
    {
        return $this->services['PoPSchema\\UserStateAccessControl\\DirectiveResolvers\\ValidateIsUserNotLoggedInDirectiveResolver'] = new \PoPSchema\UserStateAccessControl\DirectiveResolvers\ValidateIsUserNotLoggedInDirectiveResolver();
    }

    /**
     * Gets the public 'PoPSchema\UserStateAccessControl\DirectiveResolvers\ValidateIsUserNotLoggedInForDirectivesDirectiveResolver' shared autowired service.
     *
     * @return \PoPSchema\UserStateAccessControl\DirectiveResolvers\ValidateIsUserNotLoggedInForDirectivesDirectiveResolver
     */
    protected function getValidateIsUserNotLoggedInForDirectivesDirectiveResolverService()
    {
        return $this->services['PoPSchema\\UserStateAccessControl\\DirectiveResolvers\\ValidateIsUserNotLoggedInForDirectivesDirectiveResolver'] = new \PoPSchema\UserStateAccessControl\DirectiveResolvers\ValidateIsUserNotLoggedInForDirectivesDirectiveResolver();
    }

    /**
     * Gets the public 'PoPSchema\UserStateAccessControl\Hooks\DisableDirectivesIfUserIsLoggedInConfigurableAccessControlForDirectivesInPrivateSchemaHookSet' shared autowired service.
     *
     * @return \PoPSchema\UserStateAccessControl\Hooks\DisableDirectivesIfUserIsLoggedInConfigurableAccessControlForDirectivesInPrivateSchemaHookSet
     */
    protected function getDisableDirectivesIfUserIsLoggedInConfigurableAccessControlForDirectivesInPrivateSchemaHookSetService()
    {
        return $this->services['PoPSchema\\UserStateAccessControl\\Hooks\\DisableDirectivesIfUserIsLoggedInConfigurableAccessControlForDirectivesInPrivateSchemaHookSet'] = new \PoPSchema\UserStateAccessControl\Hooks\DisableDirectivesIfUserIsLoggedInConfigurableAccessControlForDirectivesInPrivateSchemaHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\AccessControl\\Services\\AccessControlManagerInterface'] ?? $this->getAccessControlManagerInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\UserStateAccessControl\Hooks\DisableDirectivesIfUserIsNotLoggedInConfigurableAccessControlForDirectivesInPrivateSchemaHookSet' shared autowired service.
     *
     * @return \PoPSchema\UserStateAccessControl\Hooks\DisableDirectivesIfUserIsNotLoggedInConfigurableAccessControlForDirectivesInPrivateSchemaHookSet
     */
    protected function getDisableDirectivesIfUserIsNotLoggedInConfigurableAccessControlForDirectivesInPrivateSchemaHookSetService()
    {
        return $this->services['PoPSchema\\UserStateAccessControl\\Hooks\\DisableDirectivesIfUserIsNotLoggedInConfigurableAccessControlForDirectivesInPrivateSchemaHookSet'] = new \PoPSchema\UserStateAccessControl\Hooks\DisableDirectivesIfUserIsNotLoggedInConfigurableAccessControlForDirectivesInPrivateSchemaHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\AccessControl\\Services\\AccessControlManagerInterface'] ?? $this->getAccessControlManagerInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\UserStateAccessControl\Hooks\DisableFieldIfUserIsLoggedInConfigurableAccessControlForFieldsInPrivateSchemaHookSet' shared autowired service.
     *
     * @return \PoPSchema\UserStateAccessControl\Hooks\DisableFieldIfUserIsLoggedInConfigurableAccessControlForFieldsInPrivateSchemaHookSet
     */
    protected function getDisableFieldIfUserIsLoggedInConfigurableAccessControlForFieldsInPrivateSchemaHookSetService()
    {
        return $this->services['PoPSchema\\UserStateAccessControl\\Hooks\\DisableFieldIfUserIsLoggedInConfigurableAccessControlForFieldsInPrivateSchemaHookSet'] = new \PoPSchema\UserStateAccessControl\Hooks\DisableFieldIfUserIsLoggedInConfigurableAccessControlForFieldsInPrivateSchemaHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\AccessControl\\Services\\AccessControlManagerInterface'] ?? $this->getAccessControlManagerInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\UserStateAccessControl\Hooks\DisableFieldIfUserIsNotLoggedInConfigurableAccessControlForFieldsInPrivateSchemaHookSet' shared autowired service.
     *
     * @return \PoPSchema\UserStateAccessControl\Hooks\DisableFieldIfUserIsNotLoggedInConfigurableAccessControlForFieldsInPrivateSchemaHookSet
     */
    protected function getDisableFieldIfUserIsNotLoggedInConfigurableAccessControlForFieldsInPrivateSchemaHookSetService()
    {
        return $this->services['PoPSchema\\UserStateAccessControl\\Hooks\\DisableFieldIfUserIsNotLoggedInConfigurableAccessControlForFieldsInPrivateSchemaHookSet'] = new \PoPSchema\UserStateAccessControl\Hooks\DisableFieldIfUserIsNotLoggedInConfigurableAccessControlForFieldsInPrivateSchemaHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\AccessControl\\Services\\AccessControlManagerInterface'] ?? $this->getAccessControlManagerInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\UserStateAccessControl\Hooks\DisableUserStateFieldsIfUserIsNotLoggedInAccessControlForFieldsInPrivateSchemaHookSet' shared autowired service.
     *
     * @return \PoPSchema\UserStateAccessControl\Hooks\DisableUserStateFieldsIfUserIsNotLoggedInAccessControlForFieldsInPrivateSchemaHookSet
     */
    protected function getDisableUserStateFieldsIfUserIsNotLoggedInAccessControlForFieldsInPrivateSchemaHookSetService()
    {
        return $this->services['PoPSchema\\UserStateAccessControl\\Hooks\\DisableUserStateFieldsIfUserIsNotLoggedInAccessControlForFieldsInPrivateSchemaHookSet'] = new \PoPSchema\UserStateAccessControl\Hooks\DisableUserStateFieldsIfUserIsNotLoggedInAccessControlForFieldsInPrivateSchemaHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\AccessControl\\Services\\AccessControlManagerInterface'] ?? $this->getAccessControlManagerInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\UserStateAccessControl\TypeResolverDecorators\ValidateUserLoggedInForDirectivesPublicSchemaTypeResolverDecorator' shared autowired service.
     *
     * @return \PoPSchema\UserStateAccessControl\TypeResolverDecorators\ValidateUserLoggedInForDirectivesPublicSchemaTypeResolverDecorator
     */
    protected function getValidateUserLoggedInForDirectivesPublicSchemaTypeResolverDecoratorService()
    {
        return $this->services['PoPSchema\\UserStateAccessControl\\TypeResolverDecorators\\ValidateUserLoggedInForDirectivesPublicSchemaTypeResolverDecorator'] = new \PoPSchema\UserStateAccessControl\TypeResolverDecorators\ValidateUserLoggedInForDirectivesPublicSchemaTypeResolverDecorator(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\AccessControl\\Services\\AccessControlManagerInterface'] ?? $this->getAccessControlManagerInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\UserStateAccessControl\TypeResolverDecorators\ValidateUserLoggedInForFieldsPublicSchemaTypeResolverDecorator' shared autowired service.
     *
     * @return \PoPSchema\UserStateAccessControl\TypeResolverDecorators\ValidateUserLoggedInForFieldsPublicSchemaTypeResolverDecorator
     */
    protected function getValidateUserLoggedInForFieldsPublicSchemaTypeResolverDecoratorService()
    {
        return $this->services['PoPSchema\\UserStateAccessControl\\TypeResolverDecorators\\ValidateUserLoggedInForFieldsPublicSchemaTypeResolverDecorator'] = new \PoPSchema\UserStateAccessControl\TypeResolverDecorators\ValidateUserLoggedInForFieldsPublicSchemaTypeResolverDecorator(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\AccessControl\\Services\\AccessControlManagerInterface'] ?? $this->getAccessControlManagerInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\UserStateAccessControl\TypeResolverDecorators\ValidateUserNotLoggedInForDirectivesPublicSchemaTypeResolverDecorator' shared autowired service.
     *
     * @return \PoPSchema\UserStateAccessControl\TypeResolverDecorators\ValidateUserNotLoggedInForDirectivesPublicSchemaTypeResolverDecorator
     */
    protected function getValidateUserNotLoggedInForDirectivesPublicSchemaTypeResolverDecoratorService()
    {
        return $this->services['PoPSchema\\UserStateAccessControl\\TypeResolverDecorators\\ValidateUserNotLoggedInForDirectivesPublicSchemaTypeResolverDecorator'] = new \PoPSchema\UserStateAccessControl\TypeResolverDecorators\ValidateUserNotLoggedInForDirectivesPublicSchemaTypeResolverDecorator(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\AccessControl\\Services\\AccessControlManagerInterface'] ?? $this->getAccessControlManagerInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\UserStateAccessControl\TypeResolverDecorators\ValidateUserNotLoggedInForFieldsPublicSchemaTypeResolverDecorator' shared autowired service.
     *
     * @return \PoPSchema\UserStateAccessControl\TypeResolverDecorators\ValidateUserNotLoggedInForFieldsPublicSchemaTypeResolverDecorator
     */
    protected function getValidateUserNotLoggedInForFieldsPublicSchemaTypeResolverDecoratorService()
    {
        return $this->services['PoPSchema\\UserStateAccessControl\\TypeResolverDecorators\\ValidateUserNotLoggedInForFieldsPublicSchemaTypeResolverDecorator'] = new \PoPSchema\UserStateAccessControl\TypeResolverDecorators\ValidateUserNotLoggedInForFieldsPublicSchemaTypeResolverDecorator(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\AccessControl\\Services\\AccessControlManagerInterface'] ?? $this->getAccessControlManagerInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\UserStateMutations\FieldResolvers\RootFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\UserStateMutations\FieldResolvers\RootFieldResolver
     */
    protected function getRootFieldResolver10Service()
    {
        return $this->services['PoPSchema\\UserStateMutations\\FieldResolvers\\RootFieldResolver'] = new \PoPSchema\UserStateMutations\FieldResolvers\RootFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\UserStateMutations\MutationResolvers\LoginMutationResolver' shared autowired service.
     *
     * @return \PoPSchema\UserStateMutations\MutationResolvers\LoginMutationResolver
     */
    protected function getLoginMutationResolverService()
    {
        return $this->services['PoPSchema\\UserStateMutations\\MutationResolvers\\LoginMutationResolver'] = new \PoPSchema\UserStateMutations\MutationResolvers\LoginMutationResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())));
    }

    /**
     * Gets the public 'PoPSchema\UserStateMutations\MutationResolvers\LogoutMutationResolver' shared autowired service.
     *
     * @return \PoPSchema\UserStateMutations\MutationResolvers\LogoutMutationResolver
     */
    protected function getLogoutMutationResolverService()
    {
        return $this->services['PoPSchema\\UserStateMutations\\MutationResolvers\\LogoutMutationResolver'] = new \PoPSchema\UserStateMutations\MutationResolvers\LogoutMutationResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())));
    }

    /**
     * Gets the public 'PoPSchema\UserStateMutations\MutationResolvers\MutationInputProperties' shared autowired service.
     *
     * @return \PoPSchema\UserStateMutations\MutationResolvers\MutationInputProperties
     */
    protected function getMutationInputProperties3Service()
    {
        return $this->services['PoPSchema\\UserStateMutations\\MutationResolvers\\MutationInputProperties'] = new \PoPSchema\UserStateMutations\MutationResolvers\MutationInputProperties();
    }

    /**
     * Gets the public 'PoPSchema\UserStateMutations\TypeAPIs\UserStateTypeMutationAPIInterface' shared autowired service.
     *
     * @return \PoPSchema\UserStateMutationsWP\TypeAPIs\UserStateTypeMutationAPI
     */
    protected function getUserStateTypeMutationAPIInterfaceService()
    {
        return $this->services['PoPSchema\\UserStateMutations\\TypeAPIs\\UserStateTypeMutationAPIInterface'] = new \PoPSchema\UserStateMutationsWP\TypeAPIs\UserStateTypeMutationAPI();
    }

    /**
     * Gets the public 'PoPSchema\UserState\CheckpointProcessors\UserStateCheckpointProcessor' shared autowired service.
     *
     * @return \PoPSchema\UserState\CheckpointProcessors\UserStateCheckpointProcessor
     */
    protected function getUserStateCheckpointProcessorService()
    {
        return $this->services['PoPSchema\\UserState\\CheckpointProcessors\\UserStateCheckpointProcessor'] = new \PoPSchema\UserState\CheckpointProcessors\UserStateCheckpointProcessor(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())));
    }

    /**
     * Gets the public 'PoPSchema\UserState\DirectiveResolvers\NoCacheCacheControlDirectiveResolver' shared autowired service.
     *
     * @return \PoPSchema\UserState\DirectiveResolvers\NoCacheCacheControlDirectiveResolver
     */
    protected function getNoCacheCacheControlDirectiveResolverService()
    {
        return $this->services['PoPSchema\\UserState\\DirectiveResolvers\\NoCacheCacheControlDirectiveResolver'] = new \PoPSchema\UserState\DirectiveResolvers\NoCacheCacheControlDirectiveResolver();
    }

    /**
     * Gets the public 'PoPSchema\UserState\FieldResolvers\GlobalFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\UserState\FieldResolvers\GlobalFieldResolver
     */
    protected function getGlobalFieldResolver2Service()
    {
        return $this->services['PoPSchema\\UserState\\FieldResolvers\\GlobalFieldResolver'] = new \PoPSchema\UserState\FieldResolvers\GlobalFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\UserState\FieldResolvers\GlobalUserStateFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\UserState\FieldResolvers\GlobalUserStateFieldResolver
     */
    protected function getGlobalUserStateFieldResolverService()
    {
        return $this->services['PoPSchema\\UserState\\FieldResolvers\\GlobalUserStateFieldResolver'] = new \PoPSchema\UserState\FieldResolvers\GlobalUserStateFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\UserState\FieldResolvers\RootMeFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\UserState\FieldResolvers\RootMeFieldResolver
     */
    protected function getRootMeFieldResolverService()
    {
        return $this->services['PoPSchema\\UserState\\FieldResolvers\\RootMeFieldResolver'] = new \PoPSchema\UserState\FieldResolvers\RootMeFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\UserState\Hooks\DBEntriesHookSet' shared autowired service.
     *
     * @return \PoPSchema\UserState\Hooks\DBEntriesHookSet
     */
    protected function getDBEntriesHookSet2Service()
    {
        return $this->services['PoPSchema\\UserState\\Hooks\\DBEntriesHookSet'] = new \PoPSchema\UserState\Hooks\DBEntriesHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoPSchema\\UserState\\FieldResolvers\\GlobalFieldResolver'] ?? $this->getGlobalFieldResolver2Service()));
    }

    /**
     * Gets the public 'PoPSchema\UserState\Hooks\VarsHookSet' shared autowired service.
     *
     * @return \PoPSchema\UserState\Hooks\VarsHookSet
     */
    protected function getVarsHookSet9Service()
    {
        return $this->services['PoPSchema\\UserState\\Hooks\\VarsHookSet'] = new \PoPSchema\UserState\Hooks\VarsHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'PoPSchema\UserState\TypeDataResolvers\UserStateTypeDataResolverInterface' shared autowired service.
     *
     * @return \PoPSchema\UserStateWP\TypeDataResolvers\UserStateTypeDataResolver
     */
    protected function getUserStateTypeDataResolverInterfaceService()
    {
        return $this->services['PoPSchema\\UserState\\TypeDataResolvers\\UserStateTypeDataResolverInterface'] = new \PoPSchema\UserStateWP\TypeDataResolvers\UserStateTypeDataResolver();
    }

    /**
     * Gets the public 'PoPSchema\UsersWP\ConditionalOnComponent\CustomPosts\LooseContracts\LooseContractResolutionSet' shared autowired service.
     *
     * @return \PoPSchema\UsersWP\ConditionalOnComponent\CustomPosts\LooseContracts\LooseContractResolutionSet
     */
    protected function getLooseContractResolutionSet7Service()
    {
        return $this->services['PoPSchema\\UsersWP\\ConditionalOnComponent\\CustomPosts\\LooseContracts\\LooseContractResolutionSet'] = new \PoPSchema\UsersWP\ConditionalOnComponent\CustomPosts\LooseContracts\LooseContractResolutionSet(($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] ?? ($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] = new \PoP\LooseContracts\LooseContractManager())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())));
    }

    /**
     * Gets the public 'PoPSchema\UsersWP\Hooks\RoutingStateHookSet' shared autowired service.
     *
     * @return \PoPSchema\UsersWP\Hooks\RoutingStateHookSet
     */
    protected function getRoutingStateHookSet5Service()
    {
        return $this->services['PoPSchema\\UsersWP\\Hooks\\RoutingStateHookSet'] = new \PoPSchema\UsersWP\Hooks\RoutingStateHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'PoPSchema\UsersWP\LooseContracts\LooseContractResolutionSet' shared autowired service.
     *
     * @return \PoPSchema\UsersWP\LooseContracts\LooseContractResolutionSet
     */
    protected function getLooseContractResolutionSet8Service()
    {
        return $this->services['PoPSchema\\UsersWP\\LooseContracts\\LooseContractResolutionSet'] = new \PoPSchema\UsersWP\LooseContracts\LooseContractResolutionSet(($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] ?? ($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] = new \PoP\LooseContracts\LooseContractManager())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())));
    }

    /**
     * Gets the public 'PoPSchema\Users\ConditionalOnComponent\API\RouteModuleProcessors\EntryRouteModuleProcessor' shared autowired service.
     *
     * @return \PoPSchema\Users\ConditionalOnComponent\API\RouteModuleProcessors\EntryRouteModuleProcessor
     */
    protected function getEntryRouteModuleProcessor7Service()
    {
        return $this->services['PoPSchema\\Users\\ConditionalOnComponent\\API\\RouteModuleProcessors\\EntryRouteModuleProcessor'] = new \PoPSchema\Users\ConditionalOnComponent\API\RouteModuleProcessors\EntryRouteModuleProcessor(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())));
    }

    /**
     * Gets the public 'PoPSchema\Users\ConditionalOnComponent\CustomPosts\FieldResolvers\CustomPostFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\Users\ConditionalOnComponent\CustomPosts\FieldResolvers\CustomPostFieldResolver
     */
    protected function getCustomPostFieldResolver7Service()
    {
        return $this->services['PoPSchema\\Users\\ConditionalOnComponent\\CustomPosts\\FieldResolvers\\CustomPostFieldResolver'] = new \PoPSchema\Users\ConditionalOnComponent\CustomPosts\FieldResolvers\CustomPostFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\Users\ConditionalOnComponent\CustomPosts\FieldResolvers\CustomPostListUserFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\Users\ConditionalOnComponent\CustomPosts\FieldResolvers\CustomPostListUserFieldResolver
     */
    protected function getCustomPostListUserFieldResolverService()
    {
        return $this->services['PoPSchema\\Users\\ConditionalOnComponent\\CustomPosts\\FieldResolvers\\CustomPostListUserFieldResolver'] = new \PoPSchema\Users\ConditionalOnComponent\CustomPosts\FieldResolvers\CustomPostListUserFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\Users\ConditionalOnComponent\CustomPosts\FieldResolvers\CustomPostUserListFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\Users\ConditionalOnComponent\CustomPosts\FieldResolvers\CustomPostUserListFieldResolver
     */
    protected function getCustomPostUserListFieldResolverService()
    {
        return $this->services['PoPSchema\\Users\\ConditionalOnComponent\\CustomPosts\\FieldResolvers\\CustomPostUserListFieldResolver'] = new \PoPSchema\Users\ConditionalOnComponent\CustomPosts\FieldResolvers\CustomPostUserListFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\Users\ConditionalOnComponent\CustomPosts\Hooks\QueryHookSet' shared autowired service.
     *
     * @return \PoPSchema\Users\ConditionalOnComponent\CustomPosts\Hooks\QueryHookSet
     */
    protected function getQueryHookSet6Service()
    {
        return $this->services['PoPSchema\\Users\\ConditionalOnComponent\\CustomPosts\\Hooks\\QueryHookSet'] = new \PoPSchema\Users\ConditionalOnComponent\CustomPosts\Hooks\QueryHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'PoPSchema\Users\ConditionalOnComponent\CustomPosts\LooseContracts\LooseContractSet' shared autowired service.
     *
     * @return \PoPSchema\Users\ConditionalOnComponent\CustomPosts\LooseContracts\LooseContractSet
     */
    protected function getLooseContractSet7Service()
    {
        return $this->services['PoPSchema\\Users\\ConditionalOnComponent\\CustomPosts\\LooseContracts\\LooseContractSet'] = new \PoPSchema\Users\ConditionalOnComponent\CustomPosts\LooseContracts\LooseContractSet(($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] ?? ($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] = new \PoP\LooseContracts\LooseContractManager())));
    }

    /**
     * Gets the public 'PoPSchema\Users\ConditionalOnComponent\CustomPosts\ModuleProcessors\FieldDataloadModuleProcessor' shared autowired service.
     *
     * @return \PoPSchema\Users\ConditionalOnComponent\CustomPosts\ModuleProcessors\FieldDataloadModuleProcessor
     */
    protected function getFieldDataloadModuleProcessor5Service()
    {
        return $this->services['PoPSchema\\Users\\ConditionalOnComponent\\CustomPosts\\ModuleProcessors\\FieldDataloadModuleProcessor'] = new \PoPSchema\Users\ConditionalOnComponent\CustomPosts\ModuleProcessors\FieldDataloadModuleProcessor(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathHelpersInterface'] ?? $this->getModulePathHelpersInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleFiltering\\ModuleFilterManagerInterface'] ?? $this->getModuleFilterManagerInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] = new \PoP\ComponentModel\ModuleProcessors\ModuleProcessorManager())), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\DataloadHelperServiceInterface'] ?? $this->getDataloadHelperServiceInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface'] ?? $this->getRequestHelperServiceInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\Users\ConditionalOnComponent\CustomPosts\TypeAPIs\CustomPostUserTypeAPIInterface' shared autowired service.
     *
     * @return \PoPSchema\UsersWP\ConditionalOnComponent\CustomPosts\TypeAPIs\CustomPostUserTypeAPI
     */
    protected function getCustomPostUserTypeAPIInterfaceService()
    {
        return $this->services['PoPSchema\\Users\\ConditionalOnComponent\\CustomPosts\\TypeAPIs\\CustomPostUserTypeAPIInterface'] = new \PoPSchema\UsersWP\ConditionalOnComponent\CustomPosts\TypeAPIs\CustomPostUserTypeAPI();
    }

    /**
     * Gets the public 'PoPSchema\Users\FieldInterfaceResolvers\WithAuthorFieldInterfaceResolver' shared autowired service.
     *
     * @return \PoPSchema\Users\FieldInterfaceResolvers\WithAuthorFieldInterfaceResolver
     */
    protected function getWithAuthorFieldInterfaceResolverService()
    {
        return $this->services['PoPSchema\\Users\\FieldInterfaceResolvers\\WithAuthorFieldInterfaceResolver'] = new \PoPSchema\Users\FieldInterfaceResolvers\WithAuthorFieldInterfaceResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())));
    }

    /**
     * Gets the public 'PoPSchema\Users\FieldResolvers\RootUserFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\Users\FieldResolvers\RootUserFieldResolver
     */
    protected function getRootUserFieldResolverService()
    {
        return $this->services['PoPSchema\\Users\\FieldResolvers\\RootUserFieldResolver'] = new \PoPSchema\Users\FieldResolvers\RootUserFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())), ($this->services['PoPSchema\\Users\\TypeAPIs\\UserTypeAPIInterface'] ?? $this->getUserTypeAPIInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\Users\FieldResolvers\UserFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\Users\FieldResolvers\UserFieldResolver
     */
    protected function getUserFieldResolver3Service()
    {
        return $this->services['PoPSchema\\Users\\FieldResolvers\\UserFieldResolver'] = new \PoPSchema\Users\FieldResolvers\UserFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())), ($this->services['PoPSchema\\Users\\TypeAPIs\\UserTypeAPIInterface'] ?? $this->getUserTypeAPIInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\Users\FilterInputProcessors\FilterInputProcessor' shared autowired service.
     *
     * @return \PoPSchema\Users\FilterInputProcessors\FilterInputProcessor
     */
    protected function getFilterInputProcessor3Service()
    {
        return $this->services['PoPSchema\\Users\\FilterInputProcessors\\FilterInputProcessor'] = new \PoPSchema\Users\FilterInputProcessors\FilterInputProcessor(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'PoPSchema\Users\Hooks\RoutingHookSet' shared autowired service.
     *
     * @return \PoPSchema\Users\Hooks\RoutingHookSet
     */
    protected function getRoutingHookSet4Service()
    {
        return $this->services['PoPSchema\\Users\\Hooks\\RoutingHookSet'] = new \PoPSchema\Users\Hooks\RoutingHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'PoPSchema\Users\Hooks\VarsHookSet' shared autowired service.
     *
     * @return \PoPSchema\Users\Hooks\VarsHookSet
     */
    protected function getVarsHookSet10Service()
    {
        return $this->services['PoPSchema\\Users\\Hooks\\VarsHookSet'] = new \PoPSchema\Users\Hooks\VarsHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'PoPSchema\Users\LooseContracts\LooseContractSet' shared autowired service.
     *
     * @return \PoPSchema\Users\LooseContracts\LooseContractSet
     */
    protected function getLooseContractSet8Service()
    {
        return $this->services['PoPSchema\\Users\\LooseContracts\\LooseContractSet'] = new \PoPSchema\Users\LooseContracts\LooseContractSet(($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] ?? ($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] = new \PoP\LooseContracts\LooseContractManager())));
    }

    /**
     * Gets the public 'PoPSchema\Users\ModuleProcessors\FieldDataloadModuleProcessor' shared autowired service.
     *
     * @return \PoPSchema\Users\ModuleProcessors\FieldDataloadModuleProcessor
     */
    protected function getFieldDataloadModuleProcessor6Service()
    {
        return $this->services['PoPSchema\\Users\\ModuleProcessors\\FieldDataloadModuleProcessor'] = new \PoPSchema\Users\ModuleProcessors\FieldDataloadModuleProcessor(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathHelpersInterface'] ?? $this->getModulePathHelpersInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleFiltering\\ModuleFilterManagerInterface'] ?? $this->getModuleFilterManagerInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] = new \PoP\ComponentModel\ModuleProcessors\ModuleProcessorManager())), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\DataloadHelperServiceInterface'] ?? $this->getDataloadHelperServiceInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface'] ?? $this->getRequestHelperServiceInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\Users\ModuleProcessors\FilterInnerModuleProcessor' shared autowired service.
     *
     * @return \PoPSchema\Users\ModuleProcessors\FilterInnerModuleProcessor
     */
    protected function getFilterInnerModuleProcessor5Service()
    {
        return $this->services['PoPSchema\\Users\\ModuleProcessors\\FilterInnerModuleProcessor'] = new \PoPSchema\Users\ModuleProcessors\FilterInnerModuleProcessor(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathHelpersInterface'] ?? $this->getModulePathHelpersInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleFiltering\\ModuleFilterManagerInterface'] ?? $this->getModuleFilterManagerInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] = new \PoP\ComponentModel\ModuleProcessors\ModuleProcessorManager())), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\DataloadHelperServiceInterface'] ?? $this->getDataloadHelperServiceInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface'] ?? $this->getRequestHelperServiceInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\Users\ModuleProcessors\FilterInputModuleProcessor' shared autowired service.
     *
     * @return \PoPSchema\Users\ModuleProcessors\FilterInputModuleProcessor
     */
    protected function getFilterInputModuleProcessor2Service()
    {
        return $this->services['PoPSchema\\Users\\ModuleProcessors\\FilterInputModuleProcessor'] = new \PoPSchema\Users\ModuleProcessors\FilterInputModuleProcessor(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathHelpersInterface'] ?? $this->getModulePathHelpersInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleFiltering\\ModuleFilterManagerInterface'] ?? $this->getModuleFilterManagerInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] = new \PoP\ComponentModel\ModuleProcessors\ModuleProcessorManager())), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\DataloadHelperServiceInterface'] ?? $this->getDataloadHelperServiceInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface'] ?? $this->getRequestHelperServiceInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\Users\TypeAPIs\UserTypeAPIInterface' shared autowired service.
     *
     * @return \PoPSchema\UsersWP\TypeAPIs\UserTypeAPI
     */
    protected function getUserTypeAPIInterfaceService()
    {
        return $this->services['PoPSchema\\Users\\TypeAPIs\\UserTypeAPIInterface'] = new \PoPSchema\UsersWP\TypeAPIs\UserTypeAPI(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoPSchema\\QueriedObject\\Helpers\\QueriedObjectHelperServiceInterface'] ?? ($this->services['PoPSchema\\QueriedObject\\Helpers\\QueriedObjectHelperServiceInterface'] = new \PoPSchema\QueriedObject\Helpers\QueriedObjectHelperService())));
    }

    /**
     * Gets the public 'PoPSchema\Users\TypeDataLoaders\UserTypeDataLoader' shared autowired service.
     *
     * @return \PoPSchema\Users\TypeDataLoaders\UserTypeDataLoader
     */
    protected function getUserTypeDataLoaderService()
    {
        return $this->services['PoPSchema\\Users\\TypeDataLoaders\\UserTypeDataLoader'] = new \PoPSchema\Users\TypeDataLoaders\UserTypeDataLoader(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()));
    }

    /**
     * Gets the public 'PoPSchema\Users\TypeResolvers\UserTypeResolver' shared autowired service.
     *
     * @return \PoPSchema\Users\TypeResolvers\UserTypeResolver
     */
    protected function getUserTypeResolverService()
    {
        return $this->services['PoPSchema\\Users\\TypeResolvers\\UserTypeResolver'] = new \PoPSchema\Users\TypeResolvers\UserTypeResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ErrorHandling\\ErrorProviderInterface'] ?? $this->getErrorProviderInterfaceService()), ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] = new \GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionService())), ($this->services['PoPSchema\\Users\\TypeAPIs\\UserTypeAPIInterface'] ?? $this->getUserTypeAPIInterfaceService()));
    }

    /**
     * Gets the public 'PoP\APIEndpointsForWP\EndpointHandlers\NativeAPIEndpointHandler' shared autowired service.
     *
     * @return \PoP\APIEndpointsForWP\EndpointHandlers\NativeAPIEndpointHandler
     */
    protected function getNativeAPIEndpointHandlerService()
    {
        return $this->services['PoP\\APIEndpointsForWP\\EndpointHandlers\\NativeAPIEndpointHandler'] = new \PoP\APIEndpointsForWP\EndpointHandlers\NativeAPIEndpointHandler();
    }

    /**
     * Gets the public 'PoP\APIMirrorQuery\DataStructureFormatters\MirrorQueryDataStructureFormatter' shared autowired service.
     *
     * @return \PoP\APIMirrorQuery\DataStructureFormatters\MirrorQueryDataStructureFormatter
     */
    protected function getMirrorQueryDataStructureFormatterService()
    {
        return $this->services['PoP\\APIMirrorQuery\\DataStructureFormatters\\MirrorQueryDataStructureFormatter'] = new \PoP\APIMirrorQuery\DataStructureFormatters\MirrorQueryDataStructureFormatter(($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()));
    }

    /**
     * Gets the public 'PoP\APIMirrorQuery\DataStructureFormatters\PropertyMirrorQueryDataStructureFormatter' shared autowired service.
     *
     * @return \PoP\APIMirrorQuery\DataStructureFormatters\PropertyMirrorQueryDataStructureFormatter
     */
    protected function getPropertyMirrorQueryDataStructureFormatterService()
    {
        return $this->services['PoP\\APIMirrorQuery\\DataStructureFormatters\\PropertyMirrorQueryDataStructureFormatter'] = new \PoP\APIMirrorQuery\DataStructureFormatters\PropertyMirrorQueryDataStructureFormatter(($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()));
    }

    /**
     * Gets the public 'PoP\APIMirrorQuery\DataStructureFormatters\XMLMirrorQueryDataStructureFormatter' shared autowired service.
     *
     * @return \PoP\APIMirrorQuery\DataStructureFormatters\XMLMirrorQueryDataStructureFormatter
     */
    protected function getXMLMirrorQueryDataStructureFormatterService()
    {
        return $this->services['PoP\\APIMirrorQuery\\DataStructureFormatters\\XMLMirrorQueryDataStructureFormatter'] = new \PoP\APIMirrorQuery\DataStructureFormatters\XMLMirrorQueryDataStructureFormatter(($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()));
    }

    /**
     * Gets the public 'PoP\API\ConditionalOnComponent\AccessControl\Hooks\ComponentConfigurationHookSet' shared autowired service.
     *
     * @return \PoP\API\ConditionalOnComponent\AccessControl\Hooks\ComponentConfigurationHookSet
     */
    protected function getComponentConfigurationHookSetService()
    {
        return $this->services['PoP\\API\\ConditionalOnComponent\\AccessControl\\Hooks\\ComponentConfigurationHookSet'] = new \PoP\API\ConditionalOnComponent\AccessControl\Hooks\ComponentConfigurationHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'PoP\API\ConditionalOnComponent\CacheControl\ConditionalOnComponent\AccessControl\ConditionalOnContext\PrivateSchema\SchemaServices\DirectiveResolvers\SchemaNoCacheCacheControlDirectiveResolver' shared autowired service.
     *
     * @return \PoP\API\ConditionalOnComponent\CacheControl\ConditionalOnComponent\AccessControl\ConditionalOnContext\PrivateSchema\SchemaServices\DirectiveResolvers\SchemaNoCacheCacheControlDirectiveResolver
     */
    protected function getSchemaNoCacheCacheControlDirectiveResolver2Service()
    {
        return $this->services['PoP\\API\\ConditionalOnComponent\\CacheControl\\ConditionalOnComponent\\AccessControl\\ConditionalOnContext\\PrivateSchema\\SchemaServices\\DirectiveResolvers\\SchemaNoCacheCacheControlDirectiveResolver'] = new \PoP\API\ConditionalOnComponent\CacheControl\ConditionalOnComponent\AccessControl\ConditionalOnContext\PrivateSchema\SchemaServices\DirectiveResolvers\SchemaNoCacheCacheControlDirectiveResolver();
    }

    /**
     * Gets the public 'PoP\API\DirectiveResolvers\CopyRelationalResultsDirectiveResolver' shared autowired service.
     *
     * @return \PoP\API\DirectiveResolvers\CopyRelationalResultsDirectiveResolver
     */
    protected function getCopyRelationalResultsDirectiveResolverService()
    {
        return $this->services['PoP\\API\\DirectiveResolvers\\CopyRelationalResultsDirectiveResolver'] = new \PoP\API\DirectiveResolvers\CopyRelationalResultsDirectiveResolver();
    }

    /**
     * Gets the public 'PoP\API\DirectiveResolvers\DuplicatePropertyDirectiveResolver' shared autowired service.
     *
     * @return \PoP\API\DirectiveResolvers\DuplicatePropertyDirectiveResolver
     */
    protected function getDuplicatePropertyDirectiveResolverService()
    {
        return $this->services['PoP\\API\\DirectiveResolvers\\DuplicatePropertyDirectiveResolver'] = new \PoP\API\DirectiveResolvers\DuplicatePropertyDirectiveResolver();
    }

    /**
     * Gets the public 'PoP\API\DirectiveResolvers\RenamePropertyDirectiveResolver' shared autowired service.
     *
     * @return \PoP\API\DirectiveResolvers\RenamePropertyDirectiveResolver
     */
    protected function getRenamePropertyDirectiveResolverService()
    {
        return $this->services['PoP\\API\\DirectiveResolvers\\RenamePropertyDirectiveResolver'] = new \PoP\API\DirectiveResolvers\RenamePropertyDirectiveResolver();
    }

    /**
     * Gets the public 'PoP\API\DirectiveResolvers\SetPropertiesAsExpressionsDirectiveResolver' shared autowired service.
     *
     * @return \PoP\API\DirectiveResolvers\SetPropertiesAsExpressionsDirectiveResolver
     */
    protected function getSetPropertiesAsExpressionsDirectiveResolverService()
    {
        return $this->services['PoP\\API\\DirectiveResolvers\\SetPropertiesAsExpressionsDirectiveResolver'] = new \PoP\API\DirectiveResolvers\SetPropertiesAsExpressionsDirectiveResolver();
    }

    /**
     * Gets the public 'PoP\API\DirectiveResolvers\TransformArrayItemsDirectiveResolver' shared autowired service.
     *
     * @return \PoP\API\DirectiveResolvers\TransformArrayItemsDirectiveResolver
     */
    protected function getTransformArrayItemsDirectiveResolverService()
    {
        return $this->services['PoP\\API\\DirectiveResolvers\\TransformArrayItemsDirectiveResolver'] = new \PoP\API\DirectiveResolvers\TransformArrayItemsDirectiveResolver();
    }

    /**
     * Gets the public 'PoP\API\Enums\SchemaFieldShapeEnum' shared autowired service.
     *
     * @return \PoP\API\Enums\SchemaFieldShapeEnum
     */
    protected function getSchemaFieldShapeEnumService()
    {
        return $this->services['PoP\\API\\Enums\\SchemaFieldShapeEnum'] = new \PoP\API\Enums\SchemaFieldShapeEnum();
    }

    /**
     * Gets the public 'PoP\API\FieldResolvers\RootFieldResolver' shared autowired service.
     *
     * @return \PoP\API\FieldResolvers\RootFieldResolver
     */
    protected function getRootFieldResolver11Service()
    {
        return $this->services['PoP\\API\\FieldResolvers\\RootFieldResolver'] = new \PoP\API\FieldResolvers\RootFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoP\API\Hooks\DBEntriesHookSet' shared autowired service.
     *
     * @return \PoP\API\Hooks\DBEntriesHookSet
     */
    protected function getDBEntriesHookSet3Service()
    {
        return $this->services['PoP\\API\\Hooks\\DBEntriesHookSet'] = new \PoP\API\Hooks\DBEntriesHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'PoP\API\Hooks\RoutingHookSet' shared autowired service.
     *
     * @return \PoP\API\Hooks\RoutingHookSet
     */
    protected function getRoutingHookSet5Service()
    {
        return $this->services['PoP\\API\\Hooks\\RoutingHookSet'] = new \PoP\API\Hooks\RoutingHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface'] ?? $this->getRequestHelperServiceInterfaceService()));
    }

    /**
     * Gets the public 'PoP\API\Hooks\VarsHookSet' shared autowired service.
     *
     * @return \PoP\API\Hooks\VarsHookSet
     */
    protected function getVarsHookSet11Service()
    {
        return $this->services['PoP\\API\\Hooks\\VarsHookSet'] = new \PoP\API\Hooks\VarsHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'PoP\API\ModuleProcessors\RelationalFieldQueryDataModuleProcessor' shared autowired service.
     *
     * @return \PoP\API\ModuleProcessors\RelationalFieldQueryDataModuleProcessor
     */
    protected function getRelationalFieldQueryDataModuleProcessorService()
    {
        return $this->services['PoP\\API\\ModuleProcessors\\RelationalFieldQueryDataModuleProcessor'] = new \PoP\API\ModuleProcessors\RelationalFieldQueryDataModuleProcessor(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathHelpersInterface'] ?? $this->getModulePathHelpersInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleFiltering\\ModuleFilterManagerInterface'] ?? $this->getModuleFilterManagerInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] = new \PoP\ComponentModel\ModuleProcessors\ModuleProcessorManager())), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\DataloadHelperServiceInterface'] ?? $this->getDataloadHelperServiceInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface'] ?? $this->getRequestHelperServiceInterfaceService()));
    }

    /**
     * Gets the public 'PoP\API\ModuleProcessors\RootRelationalFieldDataloadModuleProcessor' shared autowired service.
     *
     * @return \PoP\API\ModuleProcessors\RootRelationalFieldDataloadModuleProcessor
     */
    protected function getRootRelationalFieldDataloadModuleProcessor2Service()
    {
        return $this->services['PoP\\API\\ModuleProcessors\\RootRelationalFieldDataloadModuleProcessor'] = new \PoP\API\ModuleProcessors\RootRelationalFieldDataloadModuleProcessor(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathHelpersInterface'] ?? $this->getModulePathHelpersInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleFiltering\\ModuleFilterManagerInterface'] ?? $this->getModuleFilterManagerInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] = new \PoP\ComponentModel\ModuleProcessors\ModuleProcessorManager())), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\DataloadHelperServiceInterface'] ?? $this->getDataloadHelperServiceInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface'] ?? $this->getRequestHelperServiceInterfaceService()));
    }

    /**
     * Gets the public 'PoP\API\PersistedQueries\PersistedFragmentManagerInterface' shared autowired service.
     *
     * @return \PoP\API\PersistedQueries\PersistedFragmentManager
     */
    protected function getPersistedFragmentManagerInterfaceService()
    {
        return $this->services['PoP\\API\\PersistedQueries\\PersistedFragmentManagerInterface'] = new \PoP\API\PersistedQueries\PersistedFragmentManager();
    }

    /**
     * Gets the public 'PoP\API\PersistedQueries\PersistedQueryManagerInterface' shared autowired service.
     *
     * @return \PoP\API\PersistedQueries\PersistedQueryManager
     */
    protected function getPersistedQueryManagerInterfaceService()
    {
        return $this->services['PoP\\API\\PersistedQueries\\PersistedQueryManagerInterface'] = new \PoP\API\PersistedQueries\PersistedQueryManager();
    }

    /**
     * Gets the public 'PoP\API\Registries\SchemaDefinitionRegistryInterface' shared autowired service.
     *
     * @return \PoP\API\Registries\SchemaDefinitionRegistry
     */
    protected function getSchemaDefinitionRegistryInterfaceService()
    {
        return $this->services['PoP\\API\\Registries\\SchemaDefinitionRegistryInterface'] = new \PoP\API\Registries\SchemaDefinitionRegistry();
    }

    /**
     * Gets the public 'PoP\API\RouteModuleProcessors\EntryRouteModuleProcessor' shared autowired service.
     *
     * @return \PoP\API\RouteModuleProcessors\EntryRouteModuleProcessor
     */
    protected function getEntryRouteModuleProcessor8Service()
    {
        return $this->services['PoP\\API\\RouteModuleProcessors\\EntryRouteModuleProcessor'] = new \PoP\API\RouteModuleProcessors\EntryRouteModuleProcessor(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())));
    }

    /**
     * Gets the public 'PoP\API\Schema\FieldQueryConvertorInterface' shared autowired service.
     *
     * @return \PoP\API\Schema\FieldQueryConvertor
     */
    protected function getFieldQueryConvertorInterfaceService()
    {
        return $this->services['PoP\\API\\Schema\\FieldQueryConvertorInterface'] = new \PoP\API\Schema\FieldQueryConvertor(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore())), ($this->services['PoP\\QueryParsing\\QueryParserInterface'] ?? $this->getQueryParserInterfaceService()), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()));
    }

    /**
     * Gets the public 'PoP\API\Schema\FieldQueryInterpreterInterface' shared autowired service.
     *
     * @return \PoP\API\Schema\FieldQueryInterpreter
     */
    protected function getFieldQueryInterpreterInterfaceService()
    {
        return $this->services['PoP\\API\\Schema\\FieldQueryInterpreterInterface'] = new \PoP\API\Schema\FieldQueryInterpreter(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\FieldQuery\\FeedbackMessageStoreInterface'] ?? ($this->services['PoP\\FieldQuery\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore())), ($this->services['PoP\\ComponentModel\\Schema\\TypeCastingExecuterInterface'] ?? $this->getTypeCastingExecuterInterfaceService()), ($this->services['PoP\\QueryParsing\\QueryParserInterface'] ?? $this->getQueryParserInterfaceService()));
    }

    /**
     * Gets the public 'PoP\AccessControl\DirectiveResolvers\DisableAccessDirectiveResolver' shared autowired service.
     *
     * @return \PoP\AccessControl\DirectiveResolvers\DisableAccessDirectiveResolver
     */
    protected function getDisableAccessDirectiveResolverService()
    {
        return $this->services['PoP\\AccessControl\\DirectiveResolvers\\DisableAccessDirectiveResolver'] = new \PoP\AccessControl\DirectiveResolvers\DisableAccessDirectiveResolver();
    }

    /**
     * Gets the public 'PoP\AccessControl\DirectiveResolvers\DisableAccessForDirectivesDirectiveResolver' shared autowired service.
     *
     * @return \PoP\AccessControl\DirectiveResolvers\DisableAccessForDirectivesDirectiveResolver
     */
    protected function getDisableAccessForDirectivesDirectiveResolverService()
    {
        return $this->services['PoP\\AccessControl\\DirectiveResolvers\\DisableAccessForDirectivesDirectiveResolver'] = new \PoP\AccessControl\DirectiveResolvers\DisableAccessForDirectivesDirectiveResolver();
    }

    /**
     * Gets the public 'PoP\AccessControl\Hooks\DisableDirectiveConfigurableAccessControlForDirectivesInPrivateSchemaHookSet' shared autowired service.
     *
     * @return \PoP\AccessControl\Hooks\DisableDirectiveConfigurableAccessControlForDirectivesInPrivateSchemaHookSet
     */
    protected function getDisableDirectiveConfigurableAccessControlForDirectivesInPrivateSchemaHookSetService()
    {
        return $this->services['PoP\\AccessControl\\Hooks\\DisableDirectiveConfigurableAccessControlForDirectivesInPrivateSchemaHookSet'] = new \PoP\AccessControl\Hooks\DisableDirectiveConfigurableAccessControlForDirectivesInPrivateSchemaHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\AccessControl\\Services\\AccessControlManagerInterface'] ?? $this->getAccessControlManagerInterfaceService()));
    }

    /**
     * Gets the public 'PoP\AccessControl\Hooks\DisableFieldConfigurableAccessControlForFieldsInPrivateSchemaHookSet' shared autowired service.
     *
     * @return \PoP\AccessControl\Hooks\DisableFieldConfigurableAccessControlForFieldsInPrivateSchemaHookSet
     */
    protected function getDisableFieldConfigurableAccessControlForFieldsInPrivateSchemaHookSetService()
    {
        return $this->services['PoP\\AccessControl\\Hooks\\DisableFieldConfigurableAccessControlForFieldsInPrivateSchemaHookSet'] = new \PoP\AccessControl\Hooks\DisableFieldConfigurableAccessControlForFieldsInPrivateSchemaHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\AccessControl\\Services\\AccessControlManagerInterface'] ?? $this->getAccessControlManagerInterfaceService()));
    }

    /**
     * Gets the public 'PoP\AccessControl\Services\AccessControlManagerInterface' shared autowired service.
     *
     * @return \PoP\AccessControl\Services\AccessControlManager
     */
    protected function getAccessControlManagerInterfaceService()
    {
        $this->services['PoP\\AccessControl\\Services\\AccessControlManagerInterface'] = $instance = new \PoP\AccessControl\Services\AccessControlManager();

        $instance->addEntriesForFields('capabilities', [0 => [0 => 'PoP\\Engine\\TypeResolvers\\RootTypeResolver', 1 => 'accessControlLists', 2 => [0 => ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface'] ?? $this->getUserAuthorizationInterfaceService())->getSchemaEditorAccessCapability()]], 1 => [0 => 'PoP\\Engine\\TypeResolvers\\RootTypeResolver', 1 => 'cacheControlLists', 2 => [0 => ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface'] ?? $this->getUserAuthorizationInterfaceService())->getSchemaEditorAccessCapability()]], 2 => [0 => 'PoP\\Engine\\TypeResolvers\\RootTypeResolver', 1 => 'fieldDeprecationLists', 2 => [0 => ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface'] ?? $this->getUserAuthorizationInterfaceService())->getSchemaEditorAccessCapability()]]]);

        return $instance;
    }

    /**
     * Gets the public 'PoP\AccessControl\TypeResolverDecorators\DisableAccessConfigurableAccessControlForDirectivesInPublicSchemaTypeResolverDecorator' shared autowired service.
     *
     * @return \PoP\AccessControl\TypeResolverDecorators\DisableAccessConfigurableAccessControlForDirectivesInPublicSchemaTypeResolverDecorator
     */
    protected function getDisableAccessConfigurableAccessControlForDirectivesInPublicSchemaTypeResolverDecoratorService()
    {
        return $this->services['PoP\\AccessControl\\TypeResolverDecorators\\DisableAccessConfigurableAccessControlForDirectivesInPublicSchemaTypeResolverDecorator'] = new \PoP\AccessControl\TypeResolverDecorators\DisableAccessConfigurableAccessControlForDirectivesInPublicSchemaTypeResolverDecorator(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\AccessControl\\Services\\AccessControlManagerInterface'] ?? $this->getAccessControlManagerInterfaceService()));
    }

    /**
     * Gets the public 'PoP\AccessControl\TypeResolverDecorators\DisableAccessConfigurableAccessControlForFieldsInPublicSchemaTypeResolverDecorator' shared autowired service.
     *
     * @return \PoP\AccessControl\TypeResolverDecorators\DisableAccessConfigurableAccessControlForFieldsInPublicSchemaTypeResolverDecorator
     */
    protected function getDisableAccessConfigurableAccessControlForFieldsInPublicSchemaTypeResolverDecoratorService()
    {
        return $this->services['PoP\\AccessControl\\TypeResolverDecorators\\DisableAccessConfigurableAccessControlForFieldsInPublicSchemaTypeResolverDecorator'] = new \PoP\AccessControl\TypeResolverDecorators\DisableAccessConfigurableAccessControlForFieldsInPublicSchemaTypeResolverDecorator(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\AccessControl\\Services\\AccessControlManagerInterface'] ?? $this->getAccessControlManagerInterfaceService()));
    }

    /**
     * Gets the public 'PoP\CacheControl\DirectiveResolvers\CacheControlDirectiveResolver' shared autowired service.
     *
     * @return \PoP\CacheControl\DirectiveResolvers\CacheControlDirectiveResolver
     */
    protected function getCacheControlDirectiveResolverService()
    {
        return $this->services['PoP\\CacheControl\\DirectiveResolvers\\CacheControlDirectiveResolver'] = new \PoP\CacheControl\DirectiveResolvers\CacheControlDirectiveResolver();
    }

    /**
     * Gets the public 'PoP\CacheControl\DirectiveResolvers\NestedFieldCacheControlDirectiveResolver' shared autowired service.
     *
     * @return \PoP\CacheControl\DirectiveResolvers\NestedFieldCacheControlDirectiveResolver
     */
    protected function getNestedFieldCacheControlDirectiveResolverService()
    {
        return $this->services['PoP\\CacheControl\\DirectiveResolvers\\NestedFieldCacheControlDirectiveResolver'] = new \PoP\CacheControl\DirectiveResolvers\NestedFieldCacheControlDirectiveResolver();
    }

    /**
     * Gets the public 'PoP\CacheControl\Managers\CacheControlEngineInterface' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\ConditionalOnContext\CacheControl\Overrides\Services\Managers\CacheControlEngine
     */
    protected function getCacheControlEngineInterfaceService()
    {
        return $this->services['PoP\\CacheControl\\Managers\\CacheControlEngineInterface'] = new \GraphQLAPI\GraphQLAPI\ConditionalOnContext\CacheControl\Overrides\Services\Managers\CacheControlEngine();
    }

    /**
     * Gets the public 'PoP\CacheControl\Managers\CacheControlManagerInterface' shared autowired service.
     *
     * @return \PoP\CacheControl\Managers\CacheControlManager
     */
    protected function getCacheControlManagerInterfaceService()
    {
        return $this->services['PoP\\CacheControl\\Managers\\CacheControlManagerInterface'] = new \PoP\CacheControl\Managers\CacheControlManager();
    }

    /**
     * Gets the public 'PoP\CacheControl\TypeResolverDecorators\ConfigurableCacheControlForDirectivesTypeResolverDecorator' shared autowired service.
     *
     * @return \PoP\CacheControl\TypeResolverDecorators\ConfigurableCacheControlForDirectivesTypeResolverDecorator
     */
    protected function getConfigurableCacheControlForDirectivesTypeResolverDecoratorService()
    {
        return $this->services['PoP\\CacheControl\\TypeResolverDecorators\\ConfigurableCacheControlForDirectivesTypeResolverDecorator'] = new \PoP\CacheControl\TypeResolverDecorators\ConfigurableCacheControlForDirectivesTypeResolverDecorator(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\CacheControl\\Managers\\CacheControlManagerInterface'] ?? ($this->services['PoP\\CacheControl\\Managers\\CacheControlManagerInterface'] = new \PoP\CacheControl\Managers\CacheControlManager())));
    }

    /**
     * Gets the public 'PoP\CacheControl\TypeResolverDecorators\ConfigurableCacheControlForFieldsTypeResolverDecorator' shared autowired service.
     *
     * @return \PoP\CacheControl\TypeResolverDecorators\ConfigurableCacheControlForFieldsTypeResolverDecorator
     */
    protected function getConfigurableCacheControlForFieldsTypeResolverDecoratorService()
    {
        return $this->services['PoP\\CacheControl\\TypeResolverDecorators\\ConfigurableCacheControlForFieldsTypeResolverDecorator'] = new \PoP\CacheControl\TypeResolverDecorators\ConfigurableCacheControlForFieldsTypeResolverDecorator(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\CacheControl\\Managers\\CacheControlManagerInterface'] ?? ($this->services['PoP\\CacheControl\\Managers\\CacheControlManagerInterface'] = new \PoP\CacheControl\Managers\CacheControlManager())));
    }

    /**
     * Gets the public 'PoP\ComponentModel\AttachableExtensions\AttachExtensionServiceInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\AttachableExtensions\AttachExtensionService
     */
    protected function getAttachExtensionServiceInterfaceService()
    {
        $this->services['PoP\\ComponentModel\\AttachableExtensions\\AttachExtensionServiceInterface'] = $instance = new \PoP\ComponentModel\AttachableExtensions\AttachExtensionService();

        $instance->enqueueExtension('afterBoot', 'typeresolverdecorators', ($this->services['PoP\\CacheControl\\TypeResolverDecorators\\ConfigurableCacheControlForDirectivesTypeResolverDecorator'] ?? $this->getConfigurableCacheControlForDirectivesTypeResolverDecoratorService()));
        $instance->enqueueExtension('afterBoot', 'typeresolverdecorators', ($this->services['PoP\\CacheControl\\TypeResolverDecorators\\ConfigurableCacheControlForFieldsTypeResolverDecorator'] ?? $this->getConfigurableCacheControlForFieldsTypeResolverDecoratorService()));
        $instance->enqueueExtension('afterBoot', 'typeresolverdecorators', ($this->services['PoP\\AccessControl\\TypeResolverDecorators\\DisableAccessConfigurableAccessControlForDirectivesInPublicSchemaTypeResolverDecorator'] ?? $this->getDisableAccessConfigurableAccessControlForDirectivesInPublicSchemaTypeResolverDecoratorService()));
        $instance->enqueueExtension('afterBoot', 'typeresolverdecorators', ($this->services['PoP\\AccessControl\\TypeResolverDecorators\\DisableAccessConfigurableAccessControlForFieldsInPublicSchemaTypeResolverDecorator'] ?? $this->getDisableAccessConfigurableAccessControlForFieldsInPublicSchemaTypeResolverDecoratorService()));
        $instance->enqueueExtension('afterBoot', 'typeresolverdecorators', ($this->services['PoPSchema\\UserStateAccessControl\\TypeResolverDecorators\\ValidateUserLoggedInForDirectivesPublicSchemaTypeResolverDecorator'] ?? $this->getValidateUserLoggedInForDirectivesPublicSchemaTypeResolverDecoratorService()));
        $instance->enqueueExtension('afterBoot', 'typeresolverdecorators', ($this->services['PoPSchema\\UserStateAccessControl\\TypeResolverDecorators\\ValidateUserLoggedInForFieldsPublicSchemaTypeResolverDecorator'] ?? $this->getValidateUserLoggedInForFieldsPublicSchemaTypeResolverDecoratorService()));
        $instance->enqueueExtension('afterBoot', 'typeresolverdecorators', ($this->services['PoPSchema\\UserStateAccessControl\\TypeResolverDecorators\\ValidateUserNotLoggedInForDirectivesPublicSchemaTypeResolverDecorator'] ?? $this->getValidateUserNotLoggedInForDirectivesPublicSchemaTypeResolverDecoratorService()));
        $instance->enqueueExtension('afterBoot', 'typeresolverdecorators', ($this->services['PoPSchema\\UserStateAccessControl\\TypeResolverDecorators\\ValidateUserNotLoggedInForFieldsPublicSchemaTypeResolverDecorator'] ?? $this->getValidateUserNotLoggedInForFieldsPublicSchemaTypeResolverDecoratorService()));
        $instance->enqueueExtension('afterBoot', 'typeresolverdecorators', ($this->services['PoPSchema\\UserStateAccessControl\\ConditionalOnComponent\\CacheControl\\TypeResolverDecorators\\NoCacheUserStateTypeResolverDecorator'] ?? $this->getNoCacheUserStateTypeResolverDecoratorService()));
        $instance->enqueueExtension('afterBoot', 'typeresolverdecorators', ($this->services['PoPSchema\\UserStateAccessControl\\ConditionalOnComponent\\CacheControl\\TypeResolverDecorators\\ValidateUserLoggedInForDirectivesPrivateSchemaTypeResolverDecorator'] ?? $this->getValidateUserLoggedInForDirectivesPrivateSchemaTypeResolverDecoratorService()));
        $instance->enqueueExtension('afterBoot', 'typeresolverdecorators', ($this->services['PoPSchema\\UserStateAccessControl\\ConditionalOnComponent\\CacheControl\\TypeResolverDecorators\\ValidateUserLoggedInForFieldsPrivateSchemaTypeResolverDecorator'] ?? $this->getValidateUserLoggedInForFieldsPrivateSchemaTypeResolverDecoratorService()));
        $instance->enqueueExtension('afterBoot', 'typeresolverdecorators', ($this->services['PoPSchema\\UserStateAccessControl\\ConditionalOnComponent\\CacheControl\\TypeResolverDecorators\\ValidateUserNotLoggedInForDirectivesPrivateSchemaTypeResolverDecorator'] ?? $this->getValidateUserNotLoggedInForDirectivesPrivateSchemaTypeResolverDecoratorService()));
        $instance->enqueueExtension('afterBoot', 'typeresolverdecorators', ($this->services['PoPSchema\\UserStateAccessControl\\ConditionalOnComponent\\CacheControl\\TypeResolverDecorators\\ValidateUserNotLoggedInForFieldsPrivateSchemaTypeResolverDecorator'] ?? $this->getValidateUserNotLoggedInForFieldsPrivateSchemaTypeResolverDecoratorService()));
        $instance->enqueueExtension('afterBoot', 'typeresolverdecorators', ($this->services['PoPSchema\\UserRolesAccessControl\\TypeResolverDecorators\\GlobalValidateIsUserLoggedInForDirectivesPublicSchemaTypeResolverDecorator'] ?? $this->getGlobalValidateIsUserLoggedInForDirectivesPublicSchemaTypeResolverDecoratorService()));
        $instance->enqueueExtension('afterBoot', 'typeresolverdecorators', ($this->services['PoPSchema\\UserRolesAccessControl\\TypeResolverDecorators\\GlobalValidateIsUserLoggedInForFieldsPublicSchemaTypeResolverDecorator'] ?? $this->getGlobalValidateIsUserLoggedInForFieldsPublicSchemaTypeResolverDecoratorService()));
        $instance->enqueueExtension('afterBoot', 'typeresolverdecorators', ($this->services['PoPSchema\\UserRolesAccessControl\\TypeResolverDecorators\\ValidateDoesLoggedInUserHaveCapabilityForDirectivesPublicSchemaTypeResolverDecorator'] ?? $this->getValidateDoesLoggedInUserHaveCapabilityForDirectivesPublicSchemaTypeResolverDecoratorService()));
        $instance->enqueueExtension('afterBoot', 'typeresolverdecorators', ($this->services['PoPSchema\\UserRolesAccessControl\\TypeResolverDecorators\\ValidateDoesLoggedInUserHaveCapabilityForFieldsPublicSchemaTypeResolverDecorator'] ?? $this->getValidateDoesLoggedInUserHaveCapabilityForFieldsPublicSchemaTypeResolverDecoratorService()));
        $instance->enqueueExtension('afterBoot', 'typeresolverdecorators', ($this->services['PoPSchema\\UserRolesAccessControl\\TypeResolverDecorators\\ValidateDoesLoggedInUserHaveRoleForDirectivesPublicSchemaTypeResolverDecorator'] ?? $this->getValidateDoesLoggedInUserHaveRoleForDirectivesPublicSchemaTypeResolverDecoratorService()));
        $instance->enqueueExtension('afterBoot', 'typeresolverdecorators', ($this->services['PoPSchema\\UserRolesAccessControl\\TypeResolverDecorators\\ValidateDoesLoggedInUserHaveRoleForFieldsPublicSchemaTypeResolverDecorator'] ?? $this->getValidateDoesLoggedInUserHaveRoleForFieldsPublicSchemaTypeResolverDecoratorService()));
        $instance->enqueueExtension('afterBoot', 'typeresolverdecorators', ($this->services['PoPSchema\\UserRolesAccessControl\\ConditionalOnComponent\\CacheControl\\TypeResolverDecorators\\ValidateDoesLoggedInUserHaveCapabilityForDirectivesPrivateSchemaTypeResolverDecorator'] ?? $this->getValidateDoesLoggedInUserHaveCapabilityForDirectivesPrivateSchemaTypeResolverDecoratorService()));
        $instance->enqueueExtension('afterBoot', 'typeresolverdecorators', ($this->services['PoPSchema\\UserRolesAccessControl\\ConditionalOnComponent\\CacheControl\\TypeResolverDecorators\\ValidateDoesLoggedInUserHaveCapabilityForFieldsPrivateSchemaTypeResolverDecorator'] ?? $this->getValidateDoesLoggedInUserHaveCapabilityForFieldsPrivateSchemaTypeResolverDecoratorService()));
        $instance->enqueueExtension('afterBoot', 'typeresolverdecorators', ($this->services['PoPSchema\\UserRolesAccessControl\\ConditionalOnComponent\\CacheControl\\TypeResolverDecorators\\ValidateDoesLoggedInUserHaveRoleForDirectivesPrivateSchemaTypeResolverDecorator'] ?? $this->getValidateDoesLoggedInUserHaveRoleForDirectivesPrivateSchemaTypeResolverDecoratorService()));
        $instance->enqueueExtension('afterBoot', 'typeresolverdecorators', ($this->services['PoPSchema\\UserRolesAccessControl\\ConditionalOnComponent\\CacheControl\\TypeResolverDecorators\\ValidateDoesLoggedInUserHaveRoleForFieldsPrivateSchemaTypeResolverDecorator'] ?? $this->getValidateDoesLoggedInUserHaveRoleForFieldsPrivateSchemaTypeResolverDecoratorService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoP\\ComponentModel\\FieldResolvers\\CoreGlobalFieldResolver'] ?? $this->getCoreGlobalFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoP\\ComponentModel\\FieldResolvers\\ElementalFieldResolver'] ?? $this->getElementalFieldResolverService()));
        $instance->enqueueExtension('boot', 'directiveresolvers', ($this->services['PoP\\ComponentModel\\DirectiveResolvers\\ResolveValueAndMergeDirectiveResolver'] ?? ($this->services['PoP\\ComponentModel\\DirectiveResolvers\\ResolveValueAndMergeDirectiveResolver'] = new \PoP\ComponentModel\DirectiveResolvers\ResolveValueAndMergeDirectiveResolver())));
        $instance->enqueueExtension('boot', 'directiveresolvers', ($this->services['PoP\\ComponentModel\\DirectiveResolvers\\ValidateDirectiveResolver'] ?? ($this->services['PoP\\ComponentModel\\DirectiveResolvers\\ValidateDirectiveResolver'] = new \PoP\ComponentModel\DirectiveResolvers\ValidateDirectiveResolver())));
        $instance->enqueueExtension('boot', 'directiveresolvers', ($this->services['PoP\\CacheControl\\DirectiveResolvers\\CacheControlDirectiveResolver'] ?? ($this->services['PoP\\CacheControl\\DirectiveResolvers\\CacheControlDirectiveResolver'] = new \PoP\CacheControl\DirectiveResolvers\CacheControlDirectiveResolver())));
        $instance->enqueueExtension('boot', 'directiveresolvers', ($this->services['PoP\\CacheControl\\DirectiveResolvers\\NestedFieldCacheControlDirectiveResolver'] ?? ($this->services['PoP\\CacheControl\\DirectiveResolvers\\NestedFieldCacheControlDirectiveResolver'] = new \PoP\CacheControl\DirectiveResolvers\NestedFieldCacheControlDirectiveResolver())));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoP\\Engine\\FieldResolvers\\FunctionGlobalFieldResolver'] ?? $this->getFunctionGlobalFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoP\\Engine\\FieldResolvers\\OperatorGlobalFieldResolver'] ?? $this->getOperatorGlobalFieldResolver2Service()));
        $instance->enqueueExtension('boot', 'directiveresolvers', ($this->services['PoP\\Engine\\DirectiveResolvers\\AddFeedbackForFieldDirectiveResolver'] ?? ($this->services['PoP\\Engine\\DirectiveResolvers\\AddFeedbackForFieldDirectiveResolver'] = new \PoP\Engine\DirectiveResolvers\AddFeedbackForFieldDirectiveResolver())));
        $instance->enqueueExtension('boot', 'directiveresolvers', ($this->services['PoP\\Engine\\DirectiveResolvers\\AdvancePointerInArrayDirectiveResolver'] ?? ($this->services['PoP\\Engine\\DirectiveResolvers\\AdvancePointerInArrayDirectiveResolver'] = new \PoP\Engine\DirectiveResolvers\AdvancePointerInArrayDirectiveResolver())));
        $instance->enqueueExtension('boot', 'directiveresolvers', ($this->services['PoP\\Engine\\DirectiveResolvers\\ApplyFunctionDirectiveResolver'] ?? ($this->services['PoP\\Engine\\DirectiveResolvers\\ApplyFunctionDirectiveResolver'] = new \PoP\Engine\DirectiveResolvers\ApplyFunctionDirectiveResolver())));
        $instance->enqueueExtension('boot', 'directiveresolvers', ($this->services['PoP\\Engine\\DirectiveResolvers\\ForEachDirectiveResolver'] ?? ($this->services['PoP\\Engine\\DirectiveResolvers\\ForEachDirectiveResolver'] = new \PoP\Engine\DirectiveResolvers\ForEachDirectiveResolver())));
        $instance->enqueueExtension('boot', 'directiveresolvers', ($this->services['PoP\\Engine\\DirectiveResolvers\\IncludeDirectiveResolver'] ?? ($this->services['PoP\\Engine\\DirectiveResolvers\\IncludeDirectiveResolver'] = new \PoP\Engine\DirectiveResolvers\IncludeDirectiveResolver())));
        $instance->enqueueExtension('boot', 'directiveresolvers', ($this->services['PoP\\Engine\\DirectiveResolvers\\NoCacheCacheControlDirectiveResolver'] ?? ($this->services['PoP\\Engine\\DirectiveResolvers\\NoCacheCacheControlDirectiveResolver'] = new \PoP\Engine\DirectiveResolvers\NoCacheCacheControlDirectiveResolver())));
        $instance->enqueueExtension('boot', 'directiveresolvers', ($this->services['PoP\\Engine\\DirectiveResolvers\\OneYearCacheControlDirectiveResolver'] ?? ($this->services['PoP\\Engine\\DirectiveResolvers\\OneYearCacheControlDirectiveResolver'] = new \PoP\Engine\DirectiveResolvers\OneYearCacheControlDirectiveResolver())));
        $instance->enqueueExtension('boot', 'directiveresolvers', ($this->services['PoP\\Engine\\DirectiveResolvers\\SetSelfAsExpressionDirectiveResolver'] ?? ($this->services['PoP\\Engine\\DirectiveResolvers\\SetSelfAsExpressionDirectiveResolver'] = new \PoP\Engine\DirectiveResolvers\SetSelfAsExpressionDirectiveResolver())));
        $instance->enqueueExtension('boot', 'directiveresolvers', ($this->services['PoP\\Engine\\DirectiveResolvers\\SkipDirectiveResolver'] ?? ($this->services['PoP\\Engine\\DirectiveResolvers\\SkipDirectiveResolver'] = new \PoP\Engine\DirectiveResolvers\SkipDirectiveResolver())));
        $instance->enqueueExtension('boot', 'directiveresolvers', ($this->services['PoP\\Engine\\ConditionalOnContext\\Guzzle\\SchemaServices\\DirectiveResolvers\\NoCacheCacheControlDirectiveResolver'] ?? ($this->services['PoP\\Engine\\ConditionalOnContext\\Guzzle\\SchemaServices\\DirectiveResolvers\\NoCacheCacheControlDirectiveResolver'] = new \PoP\Engine\ConditionalOnContext\Guzzle\SchemaServices\DirectiveResolvers\NoCacheCacheControlDirectiveResolver())));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoP\\Engine\\ConditionalOnContext\\Guzzle\\SchemaServices\\FieldResolvers\\OperatorGlobalFieldResolver'] ?? $this->getOperatorGlobalFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\CustomPosts\\FieldResolvers\\CustomPostFieldResolver'] ?? $this->getCustomPostFieldResolver6Service()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\CustomPosts\\FieldResolvers\\RootCustomPostListFieldResolver'] ?? $this->getRootCustomPostListFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\GenericCustomPosts\\FieldResolvers\\RootGenericCustomPostFieldResolver'] ?? $this->getRootGenericCustomPostFieldResolverService()));
        $instance->enqueueExtension('boot', 'directiveresolvers', ($this->services['PoP\\AccessControl\\DirectiveResolvers\\DisableAccessDirectiveResolver'] ?? ($this->services['PoP\\AccessControl\\DirectiveResolvers\\DisableAccessDirectiveResolver'] = new \PoP\AccessControl\DirectiveResolvers\DisableAccessDirectiveResolver())));
        $instance->enqueueExtension('boot', 'directiveresolvers', ($this->services['PoP\\AccessControl\\DirectiveResolvers\\DisableAccessForDirectivesDirectiveResolver'] ?? ($this->services['PoP\\AccessControl\\DirectiveResolvers\\DisableAccessForDirectivesDirectiveResolver'] = new \PoP\AccessControl\DirectiveResolvers\DisableAccessForDirectivesDirectiveResolver())));
        $instance->enqueueExtension('boot', 'directiveresolvers', ($this->services['PoP\\API\\DirectiveResolvers\\CopyRelationalResultsDirectiveResolver'] ?? ($this->services['PoP\\API\\DirectiveResolvers\\CopyRelationalResultsDirectiveResolver'] = new \PoP\API\DirectiveResolvers\CopyRelationalResultsDirectiveResolver())));
        $instance->enqueueExtension('boot', 'directiveresolvers', ($this->services['PoP\\API\\DirectiveResolvers\\DuplicatePropertyDirectiveResolver'] ?? ($this->services['PoP\\API\\DirectiveResolvers\\DuplicatePropertyDirectiveResolver'] = new \PoP\API\DirectiveResolvers\DuplicatePropertyDirectiveResolver())));
        $instance->enqueueExtension('boot', 'directiveresolvers', ($this->services['PoP\\API\\DirectiveResolvers\\RenamePropertyDirectiveResolver'] ?? ($this->services['PoP\\API\\DirectiveResolvers\\RenamePropertyDirectiveResolver'] = new \PoP\API\DirectiveResolvers\RenamePropertyDirectiveResolver())));
        $instance->enqueueExtension('boot', 'directiveresolvers', ($this->services['PoP\\API\\DirectiveResolvers\\SetPropertiesAsExpressionsDirectiveResolver'] ?? ($this->services['PoP\\API\\DirectiveResolvers\\SetPropertiesAsExpressionsDirectiveResolver'] = new \PoP\API\DirectiveResolvers\SetPropertiesAsExpressionsDirectiveResolver())));
        $instance->enqueueExtension('boot', 'directiveresolvers', ($this->services['PoP\\API\\DirectiveResolvers\\TransformArrayItemsDirectiveResolver'] ?? ($this->services['PoP\\API\\DirectiveResolvers\\TransformArrayItemsDirectiveResolver'] = new \PoP\API\DirectiveResolvers\TransformArrayItemsDirectiveResolver())));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoP\\API\\FieldResolvers\\RootFieldResolver'] ?? $this->getRootFieldResolver11Service()));
        $instance->enqueueExtension('boot', 'directiveresolvers', ($this->services['PoP\\API\\ConditionalOnComponent\\CacheControl\\ConditionalOnComponent\\AccessControl\\ConditionalOnContext\\PrivateSchema\\SchemaServices\\DirectiveResolvers\\SchemaNoCacheCacheControlDirectiveResolver'] ?? ($this->services['PoP\\API\\ConditionalOnComponent\\CacheControl\\ConditionalOnComponent\\AccessControl\\ConditionalOnContext\\PrivateSchema\\SchemaServices\\DirectiveResolvers\\SchemaNoCacheCacheControlDirectiveResolver'] = new \PoP\API\ConditionalOnComponent\CacheControl\ConditionalOnComponent\AccessControl\ConditionalOnContext\PrivateSchema\SchemaServices\DirectiveResolvers\SchemaNoCacheCacheControlDirectiveResolver())));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\DirectiveFieldResolver'] ?? $this->getDirectiveFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\EmbeddableFields\\EchoOperatorGlobalFieldResolver'] ?? $this->getEchoOperatorGlobalFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\EnumValueFieldResolver'] ?? $this->getEnumValueFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\Extensions\\FilterSystemDirectiveSchemaFieldResolver'] ?? $this->getFilterSystemDirectiveSchemaFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\Extensions\\NamespacedTypeFieldResolver'] ?? $this->getNamespacedTypeFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\FieldFieldResolver'] ?? $this->getFieldFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\GlobalFieldResolver'] ?? $this->getGlobalFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\InputValueFieldResolver'] ?? $this->getInputValueFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\RegisterQueryAndMutationRootsRootFieldResolver'] ?? $this->getRegisterQueryAndMutationRootsRootFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\RootFieldResolver'] ?? $this->getRootFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\SchemaFieldResolver'] ?? $this->getSchemaFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\TypeFieldResolver'] ?? $this->getTypeFieldResolverService()));
        $instance->enqueueExtension('boot', 'directiveresolvers', ($this->services['GraphQLByPoP\\GraphQLServer\\ConditionalOnComponent\\CacheControl\\ConditionalOnComponent\\AccessControl\\ConditionalOnContext\\PrivateSchema\\SchemaServices\\DirectiveResolvers\\SchemaNoCacheCacheControlDirectiveResolver'] ?? ($this->services['GraphQLByPoP\\GraphQLServer\\ConditionalOnComponent\\CacheControl\\ConditionalOnComponent\\AccessControl\\ConditionalOnContext\\PrivateSchema\\SchemaServices\\DirectiveResolvers\\SchemaNoCacheCacheControlDirectiveResolver'] = new \GraphQLByPoP\GraphQLServer\ConditionalOnComponent\CacheControl\ConditionalOnComponent\AccessControl\ConditionalOnContext\PrivateSchema\SchemaServices\DirectiveResolvers\SchemaNoCacheCacheControlDirectiveResolver())));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\Users\\FieldResolvers\\RootUserFieldResolver'] ?? $this->getRootUserFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\Users\\FieldResolvers\\UserFieldResolver'] ?? $this->getUserFieldResolver3Service()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\Users\\ConditionalOnComponent\\CustomPosts\\FieldResolvers\\CustomPostFieldResolver'] ?? $this->getCustomPostFieldResolver7Service()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\Users\\ConditionalOnComponent\\CustomPosts\\FieldResolvers\\CustomPostListUserFieldResolver'] ?? $this->getCustomPostListUserFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\Users\\ConditionalOnComponent\\CustomPosts\\FieldResolvers\\CustomPostUserListFieldResolver'] ?? $this->getCustomPostUserListFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\Media\\FieldResolvers\\MediaFieldResolver'] ?? $this->getMediaFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\Media\\FieldResolvers\\RootFieldResolver'] ?? $this->getRootFieldResolver4Service()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\Media\\ConditionalOnComponent\\Users\\FieldResolvers\\MediaUserFieldResolver'] ?? $this->getMediaUserFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\Posts\\FieldResolvers\\ExperimentalBranchFieldResolver'] ?? $this->getExperimentalBranchFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\Posts\\FieldResolvers\\PostLegacyContentFieldResolver'] ?? $this->getPostLegacyContentFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\Posts\\FieldResolvers\\RootPostFieldResolver'] ?? $this->getRootPostFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\Posts\\ConditionalOnComponent\\Users\\FieldResolvers\\PostUserFieldResolver'] ?? $this->getPostUserFieldResolverService()));
        $instance->enqueueExtension('boot', 'typeresolverpickers', ($this->services['PoPSchema\\Posts\\ConditionalOnContext\\AddPostTypeToCustomPostUnionTypes\\SchemaServices\\TypeResolverPickers\\PostCustomPostTypeResolverPicker'] ?? ($this->services['PoPSchema\\Posts\\ConditionalOnContext\\AddPostTypeToCustomPostUnionTypes\\SchemaServices\\TypeResolverPickers\\PostCustomPostTypeResolverPicker'] = new \PoPSchema\PostsWP\ConditionalOnContext\AddPostTypeToCustomPostUnionTypes\Overrides\SchemaServices\TypeResolverPickers\PostCustomPostTypeResolverPicker())));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\Pages\\FieldResolvers\\RootPageFieldResolver'] ?? $this->getRootPageFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\CustomPostMedia\\FieldResolvers\\CustomPostFieldResolver'] ?? $this->getCustomPostFieldResolver4Service()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\PostTags\\FieldResolvers\\CustomPostListPostTagFieldResolver'] ?? $this->getCustomPostListPostTagFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\PostTags\\FieldResolvers\\PostQueryableFieldResolver'] ?? $this->getPostQueryableFieldResolver2Service()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\PostTags\\FieldResolvers\\PostTagFieldResolver'] ?? $this->getPostTagFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\PostTags\\FieldResolvers\\PostTagListFieldResolver'] ?? $this->getPostTagListFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\PostTags\\FieldResolvers\\RootPostTagFieldResolver'] ?? $this->getRootPostTagFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\PostCategories\\FieldResolvers\\CustomPostListPostCategoryFieldResolver'] ?? $this->getCustomPostListPostCategoryFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\PostCategories\\FieldResolvers\\PostCategoryFieldResolver'] ?? $this->getPostCategoryFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\PostCategories\\FieldResolvers\\PostCategoryListFieldResolver'] ?? $this->getPostCategoryListFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\PostCategories\\FieldResolvers\\PostQueryableFieldResolver'] ?? $this->getPostQueryableFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\PostCategories\\FieldResolvers\\RootPostCategoryFieldResolver'] ?? $this->getRootPostCategoryFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\UserRoles\\FieldResolvers\\RootRolesFieldResolver'] ?? $this->getRootRolesFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\UserRoles\\FieldResolvers\\UserFieldResolver'] ?? $this->getUserFieldResolver2Service()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\UserState\\FieldResolvers\\GlobalFieldResolver'] ?? $this->getGlobalFieldResolver2Service()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\UserState\\FieldResolvers\\GlobalUserStateFieldResolver'] ?? $this->getGlobalUserStateFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\UserState\\FieldResolvers\\RootMeFieldResolver'] ?? $this->getRootMeFieldResolverService()));
        $instance->enqueueExtension('boot', 'directiveresolvers', ($this->services['PoPSchema\\UserState\\DirectiveResolvers\\NoCacheCacheControlDirectiveResolver'] ?? ($this->services['PoPSchema\\UserState\\DirectiveResolvers\\NoCacheCacheControlDirectiveResolver'] = new \PoPSchema\UserState\DirectiveResolvers\NoCacheCacheControlDirectiveResolver())));
        $instance->enqueueExtension('boot', 'directiveresolvers', ($this->services['PoPSchema\\UserStateAccessControl\\DirectiveResolvers\\ValidateIsUserLoggedInDirectiveResolver'] ?? ($this->services['PoPSchema\\UserStateAccessControl\\DirectiveResolvers\\ValidateIsUserLoggedInDirectiveResolver'] = new \PoPSchema\UserStateAccessControl\DirectiveResolvers\ValidateIsUserLoggedInDirectiveResolver())));
        $instance->enqueueExtension('boot', 'directiveresolvers', ($this->services['PoPSchema\\UserStateAccessControl\\DirectiveResolvers\\ValidateIsUserLoggedInForDirectivesDirectiveResolver'] ?? ($this->services['PoPSchema\\UserStateAccessControl\\DirectiveResolvers\\ValidateIsUserLoggedInForDirectivesDirectiveResolver'] = new \PoPSchema\UserStateAccessControl\DirectiveResolvers\ValidateIsUserLoggedInForDirectivesDirectiveResolver())));
        $instance->enqueueExtension('boot', 'directiveresolvers', ($this->services['PoPSchema\\UserStateAccessControl\\DirectiveResolvers\\ValidateIsUserNotLoggedInDirectiveResolver'] ?? ($this->services['PoPSchema\\UserStateAccessControl\\DirectiveResolvers\\ValidateIsUserNotLoggedInDirectiveResolver'] = new \PoPSchema\UserStateAccessControl\DirectiveResolvers\ValidateIsUserNotLoggedInDirectiveResolver())));
        $instance->enqueueExtension('boot', 'directiveresolvers', ($this->services['PoPSchema\\UserStateAccessControl\\DirectiveResolvers\\ValidateIsUserNotLoggedInForDirectivesDirectiveResolver'] ?? ($this->services['PoPSchema\\UserStateAccessControl\\DirectiveResolvers\\ValidateIsUserNotLoggedInForDirectivesDirectiveResolver'] = new \PoPSchema\UserStateAccessControl\DirectiveResolvers\ValidateIsUserNotLoggedInForDirectivesDirectiveResolver())));
        $instance->enqueueExtension('boot', 'directiveresolvers', ($this->services['PoPSchema\\UserRolesAccessControl\\DirectiveResolvers\\ValidateDoesLoggedInUserHaveAnyCapabilityDirectiveResolver'] ?? ($this->services['PoPSchema\\UserRolesAccessControl\\DirectiveResolvers\\ValidateDoesLoggedInUserHaveAnyCapabilityDirectiveResolver'] = new \PoPSchema\UserRolesAccessControl\DirectiveResolvers\ValidateDoesLoggedInUserHaveAnyCapabilityDirectiveResolver())));
        $instance->enqueueExtension('boot', 'directiveresolvers', ($this->services['PoPSchema\\UserRolesAccessControl\\DirectiveResolvers\\ValidateDoesLoggedInUserHaveAnyCapabilityForDirectivesDirectiveResolver'] ?? ($this->services['PoPSchema\\UserRolesAccessControl\\DirectiveResolvers\\ValidateDoesLoggedInUserHaveAnyCapabilityForDirectivesDirectiveResolver'] = new \PoPSchema\UserRolesAccessControl\DirectiveResolvers\ValidateDoesLoggedInUserHaveAnyCapabilityForDirectivesDirectiveResolver())));
        $instance->enqueueExtension('boot', 'directiveresolvers', ($this->services['PoPSchema\\UserRolesAccessControl\\DirectiveResolvers\\ValidateDoesLoggedInUserHaveAnyRoleDirectiveResolver'] ?? ($this->services['PoPSchema\\UserRolesAccessControl\\DirectiveResolvers\\ValidateDoesLoggedInUserHaveAnyRoleDirectiveResolver'] = new \PoPSchema\UserRolesAccessControl\DirectiveResolvers\ValidateDoesLoggedInUserHaveAnyRoleDirectiveResolver())));
        $instance->enqueueExtension('boot', 'directiveresolvers', ($this->services['PoPSchema\\UserRolesAccessControl\\DirectiveResolvers\\ValidateDoesLoggedInUserHaveAnyRoleForDirectivesDirectiveResolver'] ?? ($this->services['PoPSchema\\UserRolesAccessControl\\DirectiveResolvers\\ValidateDoesLoggedInUserHaveAnyRoleForDirectivesDirectiveResolver'] = new \PoPSchema\UserRolesAccessControl\DirectiveResolvers\ValidateDoesLoggedInUserHaveAnyRoleForDirectivesDirectiveResolver())));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\UserRolesWP\\FieldResolvers\\UserRoleFieldResolver'] ?? $this->getUserRoleFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\UserStateMutations\\FieldResolvers\\RootFieldResolver'] ?? $this->getRootFieldResolver10Service()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\PostMutations\\FieldResolvers\\PostFieldResolver'] ?? $this->getPostFieldResolver2Service()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\PostMutations\\FieldResolvers\\RootFieldResolver'] ?? $this->getRootFieldResolver7Service()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\PostMutations\\FieldResolvers\\RootQueryableFieldResolver'] ?? $this->getRootQueryableFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\CustomPostMediaMutations\\FieldResolvers\\CustomPostFieldResolver'] ?? $this->getCustomPostFieldResolver3Service()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\CustomPostMediaMutations\\FieldResolvers\\RootFieldResolver'] ?? $this->getRootFieldResolver3Service()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\PostTagMutations\\FieldResolvers\\PostFieldResolver'] ?? $this->getPostFieldResolver3Service()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\PostTagMutations\\FieldResolvers\\RootFieldResolver'] ?? $this->getRootFieldResolver8Service()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\PostCategoryMutations\\FieldResolvers\\PostFieldResolver'] ?? $this->getPostFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\PostCategoryMutations\\FieldResolvers\\RootFieldResolver'] ?? $this->getRootFieldResolver6Service()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\Comments\\FieldResolvers\\CommentFieldResolver'] ?? $this->getCommentFieldResolver4Service()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\Comments\\FieldResolvers\\CustomPostFieldResolver'] ?? $this->getCustomPostFieldResolver2Service()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\Comments\\ConditionalOnComponent\\Users\\FieldResolvers\\CommentFieldResolver'] ?? $this->getCommentFieldResolver3Service()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\Comments\\ConditionalOnComponent\\Users\\FieldResolvers\\CommentUserFieldResolver'] ?? $this->getCommentUserFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\CommentMutations\\FieldResolvers\\CommentFieldResolver'] ?? $this->getCommentFieldResolver2Service()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\CommentMutations\\FieldResolvers\\CustomPostFieldResolver'] ?? $this->getCustomPostFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\CommentMutations\\FieldResolvers\\RootFieldResolver'] ?? $this->getRootFieldResolver2Service()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\Menus\\FieldResolvers\\MenuFieldResolver'] ?? $this->getMenuFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\Menus\\FieldResolvers\\MenuItemFieldResolver'] ?? $this->getMenuItemFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\Menus\\FieldResolvers\\RootFieldResolver'] ?? $this->getRootFieldResolver5Service()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\Settings\\FieldResolvers\\RootFieldResolver'] ?? $this->getRootFieldResolver9Service()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\CommentMeta\\FieldResolvers\\CommentFieldResolver'] ?? $this->getCommentFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\CustomPostMeta\\FieldResolvers\\CustomPostFieldResolver'] ?? $this->getCustomPostFieldResolver5Service()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\TaxonomyMeta\\FieldResolvers\\TaxonomyFieldResolver'] ?? $this->getTaxonomyFieldResolverService()));
        $instance->enqueueExtension('boot', 'fieldresolvers', ($this->services['PoPSchema\\UserMeta\\FieldResolvers\\UserFieldResolver'] ?? $this->getUserFieldResolverService()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\AttachableExtensions\AttachableExtensionManagerInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\AttachableExtensions\AttachableExtensionManager
     */
    protected function getAttachableExtensionManagerInterfaceService()
    {
        return $this->services['PoP\\ComponentModel\\AttachableExtensions\\AttachableExtensionManagerInterface'] = new \PoP\ComponentModel\AttachableExtensions\AttachableExtensionManager();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Cache\CacheConfigurationManagerInterface' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Overrides\Services\ConfigurationCache\CacheConfigurationManager
     */
    protected function getCacheConfigurationManagerInterfaceService()
    {
        return $this->services['PoP\\ComponentModel\\Cache\\CacheConfigurationManagerInterface'] = new \GraphQLAPI\GraphQLAPI\Overrides\Services\ConfigurationCache\CacheConfigurationManager(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\EndpointHelpers'] ?? $this->getEndpointHelpersService()));
    }

    /**
     * Gets the public 'PoP\ComponentModel\CheckpointProcessors\CheckpointProcessorManager' shared autowired service.
     *
     * @return \PoP\ComponentModel\CheckpointProcessors\CheckpointProcessorManager
     */
    protected function getCheckpointProcessorManagerService()
    {
        return $this->services['PoP\\ComponentModel\\CheckpointProcessors\\CheckpointProcessorManager'] = new \PoP\ComponentModel\CheckpointProcessors\CheckpointProcessorManager();
    }

    /**
     * Gets the public 'PoP\ComponentModel\CheckpointProcessors\CheckpointProcessorManagerInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\CheckpointProcessors\CheckpointProcessorManager
     */
    protected function getCheckpointProcessorManagerInterfaceService()
    {
        return $this->services['PoP\\ComponentModel\\CheckpointProcessors\\CheckpointProcessorManagerInterface'] = new \PoP\ComponentModel\CheckpointProcessors\CheckpointProcessorManager();
    }

    /**
     * Gets the public 'PoP\ComponentModel\CheckpointProcessors\MutationCheckpointProcessor' shared autowired service.
     *
     * @return \PoP\ComponentModel\CheckpointProcessors\MutationCheckpointProcessor
     */
    protected function getMutationCheckpointProcessorService()
    {
        return $this->services['PoP\\ComponentModel\\CheckpointProcessors\\MutationCheckpointProcessor'] = new \PoP\ComponentModel\CheckpointProcessors\MutationCheckpointProcessor(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())));
    }

    /**
     * Gets the public 'PoP\ComponentModel\Container\ObjectDictionaryInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\Container\ObjectDictionary
     */
    protected function getObjectDictionaryInterfaceService()
    {
        return $this->services['PoP\\ComponentModel\\Container\\ObjectDictionaryInterface'] = new \PoP\ComponentModel\Container\ObjectDictionary();
    }

    /**
     * Gets the public 'PoP\ComponentModel\DataStructure\DataStructureManagerInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\DataStructure\DataStructureManager
     */
    protected function getDataStructureManagerInterfaceService()
    {
        $a = new \PoP\ComponentModel\DataStructure\DefaultDataStructureFormatter(($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()));

        $this->services['PoP\\ComponentModel\\DataStructure\\DataStructureManagerInterface'] = $instance = new \PoP\ComponentModel\DataStructure\DataStructureManager($a);

        $instance->addDataStructureFormatter($a, 'default_data_structure_formatter');
        $instance->addDataStructureFormatter(($this->services['PoP\\APIMirrorQuery\\DataStructureFormatters\\MirrorQueryDataStructureFormatter'] ?? $this->getMirrorQueryDataStructureFormatterService()), 'PoP\\APIMirrorQuery\\DataStructureFormatters\\MirrorQueryDataStructureFormatter');
        $instance->addDataStructureFormatter(($this->services['PoP\\APIMirrorQuery\\DataStructureFormatters\\PropertyMirrorQueryDataStructureFormatter'] ?? $this->getPropertyMirrorQueryDataStructureFormatterService()), 'PoP\\APIMirrorQuery\\DataStructureFormatters\\PropertyMirrorQueryDataStructureFormatter');
        $instance->addDataStructureFormatter(($this->services['PoP\\APIMirrorQuery\\DataStructureFormatters\\XMLMirrorQueryDataStructureFormatter'] ?? $this->getXMLMirrorQueryDataStructureFormatterService()), 'PoP\\APIMirrorQuery\\DataStructureFormatters\\XMLMirrorQueryDataStructureFormatter');
        $instance->addDataStructureFormatter(($this->services['PoP\\GraphQLAPI\\DataStructureFormatters\\GraphQLDataStructureFormatter'] ?? $this->getGraphQLDataStructureFormatterService()), 'PoP\\GraphQLAPI\\DataStructureFormatters\\GraphQLDataStructureFormatter');

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\DirectiveResolvers\ResolveValueAndMergeDirectiveResolver' shared autowired service.
     *
     * @return \PoP\ComponentModel\DirectiveResolvers\ResolveValueAndMergeDirectiveResolver
     */
    protected function getResolveValueAndMergeDirectiveResolverService()
    {
        return $this->services['PoP\\ComponentModel\\DirectiveResolvers\\ResolveValueAndMergeDirectiveResolver'] = new \PoP\ComponentModel\DirectiveResolvers\ResolveValueAndMergeDirectiveResolver();
    }

    /**
     * Gets the public 'PoP\ComponentModel\DirectiveResolvers\ValidateDirectiveResolver' shared autowired service.
     *
     * @return \PoP\ComponentModel\DirectiveResolvers\ValidateDirectiveResolver
     */
    protected function getValidateDirectiveResolverService()
    {
        return $this->services['PoP\\ComponentModel\\DirectiveResolvers\\ValidateDirectiveResolver'] = new \PoP\ComponentModel\DirectiveResolvers\ValidateDirectiveResolver();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Engine\DataloadingEngineInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\Engine\DataloadingEngine
     */
    protected function getDataloadingEngineInterfaceService()
    {
        $this->services['PoP\\ComponentModel\\Engine\\DataloadingEngineInterface'] = $instance = new \PoP\ComponentModel\Engine\DataloadingEngine();

        $instance->addMandatoryDirectiveResolver(($this->services['PoP\\ComponentModel\\DirectiveResolvers\\ResolveValueAndMergeDirectiveResolver'] ?? ($this->services['PoP\\ComponentModel\\DirectiveResolvers\\ResolveValueAndMergeDirectiveResolver'] = new \PoP\ComponentModel\DirectiveResolvers\ResolveValueAndMergeDirectiveResolver())), 'PoP\\ComponentModel\\DirectiveResolvers\\ResolveValueAndMergeDirectiveResolver');
        $instance->addMandatoryDirectiveResolver(($this->services['PoP\\ComponentModel\\DirectiveResolvers\\ValidateDirectiveResolver'] ?? ($this->services['PoP\\ComponentModel\\DirectiveResolvers\\ValidateDirectiveResolver'] = new \PoP\ComponentModel\DirectiveResolvers\ValidateDirectiveResolver())), 'PoP\\ComponentModel\\DirectiveResolvers\\ValidateDirectiveResolver');
        $instance->addMandatoryDirectiveResolver(($this->services['PoP\\CacheControl\\DirectiveResolvers\\CacheControlDirectiveResolver'] ?? ($this->services['PoP\\CacheControl\\DirectiveResolvers\\CacheControlDirectiveResolver'] = new \PoP\CacheControl\DirectiveResolvers\CacheControlDirectiveResolver())), 'PoP\\CacheControl\\DirectiveResolvers\\CacheControlDirectiveResolver');
        $instance->addMandatoryDirectiveResolver(($this->services['PoP\\Engine\\DirectiveResolvers\\SetSelfAsExpressionDirectiveResolver'] ?? ($this->services['PoP\\Engine\\DirectiveResolvers\\SetSelfAsExpressionDirectiveResolver'] = new \PoP\Engine\DirectiveResolvers\SetSelfAsExpressionDirectiveResolver())), 'PoP\\Engine\\DirectiveResolvers\\SetSelfAsExpressionDirectiveResolver');

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\Engine\EngineInterface' shared autowired service.
     *
     * @return \PoP\Engine\Engine\Engine
     */
    protected function getEngineInterfaceService()
    {
        return $this->services['PoP\\ComponentModel\\Engine\\EngineInterface'] = new \PoP\Engine\Engine\Engine(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\DataStructure\\DataStructureManagerInterface'] ?? $this->getDataStructureManagerInterfaceService()), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\ModelInstance\\ModelInstanceInterface'] ?? $this->getModelInstanceInterfaceService()), ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore())), ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathHelpersInterface'] ?? $this->getModulePathHelpersInterfaceService()), ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathManagerInterface'] = new \PoP\ComponentModel\ModulePath\ModulePathManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ModuleFiltering\\ModuleFilterManagerInterface'] ?? $this->getModuleFilterManagerInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] = new \PoP\ComponentModel\ModuleProcessors\ModuleProcessorManager())), ($this->services['PoP\\ComponentModel\\CheckpointProcessors\\CheckpointProcessorManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\CheckpointProcessors\\CheckpointProcessorManagerInterface'] = new \PoP\ComponentModel\CheckpointProcessors\CheckpointProcessorManager())), ($this->services['PoP\\ComponentModel\\HelperServices\\DataloadHelperServiceInterface'] ?? $this->getDataloadHelperServiceInterfaceService()), ($this->services['PoP\\ComponentModel\\EntryModule\\EntryModuleManagerInterface'] ?? $this->getEntryModuleManagerInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface'] ?? $this->getRequestHelperServiceInterfaceService()), ($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] ?? ($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] = new \PoP\LooseContracts\LooseContractManager())), ($this->services['PoP\\CacheControl\\Managers\\CacheControlEngineInterface'] ?? ($this->services['PoP\\CacheControl\\Managers\\CacheControlEngineInterface'] = new \GraphQLAPI\GraphQLAPI\ConditionalOnContext\CacheControl\Overrides\Services\Managers\CacheControlEngine())));
    }

    /**
     * Gets the public 'PoP\ComponentModel\EntryModule\EntryModuleManagerInterface' shared autowired service.
     *
     * @return \PoP\Engine\EntryModule\EntryModuleManager
     */
    protected function getEntryModuleManagerInterfaceService()
    {
        return $this->services['PoP\\ComponentModel\\EntryModule\\EntryModuleManagerInterface'] = new \PoP\Engine\EntryModule\EntryModuleManager(($this->services['PoP\\ModuleRouting\\RouteModuleProcessorManagerInterface'] ?? $this->getRouteModuleProcessorManagerInterfaceService()));
    }

    /**
     * Gets the public 'PoP\ComponentModel\ErrorHandling\ErrorProviderInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\ErrorHandling\ErrorProvider
     */
    protected function getErrorProviderInterfaceService()
    {
        return $this->services['PoP\\ComponentModel\\ErrorHandling\\ErrorProviderInterface'] = new \PoP\ComponentModel\ErrorHandling\ErrorProvider(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())));
    }

    /**
     * Gets the public 'PoP\ComponentModel\FieldInterfaceResolvers\ElementalFieldInterfaceResolver' shared autowired service.
     *
     * @return \PoP\ComponentModel\FieldInterfaceResolvers\ElementalFieldInterfaceResolver
     */
    protected function getElementalFieldInterfaceResolverService()
    {
        return $this->services['PoP\\ComponentModel\\FieldInterfaceResolvers\\ElementalFieldInterfaceResolver'] = new \PoP\ComponentModel\FieldInterfaceResolvers\ElementalFieldInterfaceResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())));
    }

    /**
     * Gets the public 'PoP\ComponentModel\FieldResolvers\CoreGlobalFieldResolver' shared autowired service.
     *
     * @return \PoP\ComponentModel\FieldResolvers\CoreGlobalFieldResolver
     */
    protected function getCoreGlobalFieldResolverService()
    {
        return $this->services['PoP\\ComponentModel\\FieldResolvers\\CoreGlobalFieldResolver'] = new \PoP\ComponentModel\FieldResolvers\CoreGlobalFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoP\ComponentModel\FieldResolvers\ElementalFieldResolver' shared autowired service.
     *
     * @return \PoP\ComponentModel\FieldResolvers\ElementalFieldResolver
     */
    protected function getElementalFieldResolverService()
    {
        return $this->services['PoP\\ComponentModel\\FieldResolvers\\ElementalFieldResolver'] = new \PoP\ComponentModel\FieldResolvers\ElementalFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoP\ComponentModel\FilterInputProcessors\FilterInputProcessorManagerInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\FilterInputProcessors\FilterInputProcessorManager
     */
    protected function getFilterInputProcessorManagerInterfaceService()
    {
        return $this->services['PoP\\ComponentModel\\FilterInputProcessors\\FilterInputProcessorManagerInterface'] = new \PoP\ComponentModel\FilterInputProcessors\FilterInputProcessorManager();
    }

    /**
     * Gets the public 'PoP\ComponentModel\FormInputs\FormInput' shared autowired service.
     *
     * @return \PoP\ComponentModel\FormInputs\FormInput
     */
    protected function getFormInputService()
    {
        return $this->services['PoP\\ComponentModel\\FormInputs\\FormInput'] = new \PoP\ComponentModel\FormInputs\FormInput();
    }

    /**
     * Gets the public 'PoP\ComponentModel\FormInputs\FormMultipleInput' shared autowired service.
     *
     * @return \PoP\ComponentModel\FormInputs\FormMultipleInput
     */
    protected function getFormMultipleInputService()
    {
        return $this->services['PoP\\ComponentModel\\FormInputs\\FormMultipleInput'] = new \PoP\ComponentModel\FormInputs\FormMultipleInput();
    }

    /**
     * Gets the public 'PoP\ComponentModel\HelperServices\ApplicationStateHelperServiceInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\HelperServices\ApplicationStateHelperService
     */
    protected function getApplicationStateHelperServiceInterfaceService()
    {
        return $this->services['PoP\\ComponentModel\\HelperServices\\ApplicationStateHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\ApplicationStateHelperService();
    }

    /**
     * Gets the public 'PoP\ComponentModel\HelperServices\DataloadHelperServiceInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\HelperServices\DataloadHelperService
     */
    protected function getDataloadHelperServiceInterfaceService()
    {
        return $this->services['PoP\\ComponentModel\\HelperServices\\DataloadHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\DataloadHelperService(($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] = new \PoP\ComponentModel\ModuleProcessors\ModuleProcessorManager())));
    }

    /**
     * Gets the public 'PoP\ComponentModel\HelperServices\FormInputHelperServiceInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\HelperServices\FormInputHelperService
     */
    protected function getFormInputHelperServiceInterfaceService()
    {
        return $this->services['PoP\\ComponentModel\\HelperServices\\FormInputHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\FormInputHelperService();
    }

    /**
     * Gets the public 'PoP\ComponentModel\HelperServices\RequestHelperServiceInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\HelperServices\RequestHelperService
     */
    protected function getRequestHelperServiceInterfaceService()
    {
        return $this->services['PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\RequestHelperService(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())));
    }

    /**
     * Gets the public 'PoP\ComponentModel\HelperServices\SemverHelperServiceInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\HelperServices\SemverHelperService
     */
    protected function getSemverHelperServiceInterfaceService()
    {
        return $this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Info\ApplicationInfoInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\Info\ApplicationInfo
     */
    protected function getApplicationInfoInterfaceService()
    {
        return $this->services['PoP\\ComponentModel\\Info\\ApplicationInfoInterface'] = new \PoP\ComponentModel\Info\ApplicationInfo();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Instances\InstanceManagerInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\Instances\InstanceManager
     */
    protected function getInstanceManagerInterfaceService()
    {
        return $this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager();
    }

    /**
     * Gets the public 'PoP\ComponentModel\ModelInstance\ModelInstanceInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\ModelInstance\ModelInstance
     */
    protected function getModelInstanceInterfaceService()
    {
        return $this->services['PoP\\ComponentModel\\ModelInstance\\ModelInstanceInterface'] = new \PoP\ComponentModel\ModelInstance\ModelInstance(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Info\\ApplicationInfoInterface'] ?? ($this->services['PoP\\ComponentModel\\Info\\ApplicationInfoInterface'] = new \PoP\ComponentModel\Info\ApplicationInfo())));
    }

    /**
     * Gets the public 'PoP\ComponentModel\ModuleFiltering\ModuleFilterManagerInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\ModuleFiltering\ModuleFilterManager
     */
    protected function getModuleFilterManagerInterfaceService()
    {
        $this->services['PoP\\ComponentModel\\ModuleFiltering\\ModuleFilterManagerInterface'] = $instance = new \PoP\ComponentModel\ModuleFiltering\ModuleFilterManager(($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathManagerInterface'] = new \PoP\ComponentModel\ModulePath\ModulePathManager())), ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathHelpersInterface'] ?? $this->getModulePathHelpersInterfaceService()));

        $instance->addModuleFilter(($this->services['PoP\\ComponentModel\\ModuleFilters\\ModulePaths'] ?? $this->getModulePathsService()), 'PoP\\ComponentModel\\ModuleFilters\\ModulePaths');

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\ModuleFilters\ModulePaths' shared autowired service.
     *
     * @return \PoP\ComponentModel\ModuleFilters\ModulePaths
     */
    protected function getModulePathsService()
    {
        return $this->services['PoP\\ComponentModel\\ModuleFilters\\ModulePaths'] = new \PoP\ComponentModel\ModuleFilters\ModulePaths(($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathManagerInterface'] = new \PoP\ComponentModel\ModulePath\ModulePathManager())));
    }

    /**
     * Gets the public 'PoP\ComponentModel\ModulePath\ModulePathHelpersInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\ModulePath\ModulePathHelpers
     */
    protected function getModulePathHelpersInterfaceService()
    {
        return $this->services['PoP\\ComponentModel\\ModulePath\\ModulePathHelpersInterface'] = new \PoP\ComponentModel\ModulePath\ModulePathHelpers(($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathManagerInterface'] = new \PoP\ComponentModel\ModulePath\ModulePathManager())));
    }

    /**
     * Gets the public 'PoP\ComponentModel\ModulePath\ModulePathManagerInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\ModulePath\ModulePathManager
     */
    protected function getModulePathManagerInterfaceService()
    {
        return $this->services['PoP\\ComponentModel\\ModulePath\\ModulePathManagerInterface'] = new \PoP\ComponentModel\ModulePath\ModulePathManager();
    }

    /**
     * Gets the public 'PoP\ComponentModel\ModuleProcessors\ModuleProcessorManagerInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\ModuleProcessors\ModuleProcessorManager
     */
    protected function getModuleProcessorManagerInterfaceService()
    {
        return $this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] = new \PoP\ComponentModel\ModuleProcessors\ModuleProcessorManager();
    }

    /**
     * Gets the public 'PoP\ComponentModel\MutationResolution\MutationResolutionManagerInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\MutationResolution\MutationResolutionManager
     */
    protected function getMutationResolutionManagerInterfaceService()
    {
        return $this->services['PoP\\ComponentModel\\MutationResolution\\MutationResolutionManagerInterface'] = new \PoP\ComponentModel\MutationResolution\MutationResolutionManager(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())));
    }

    /**
     * Gets the public 'PoP\ComponentModel\QueryInputOutputHandlers\ActionExecutionQueryInputOutputHandler' shared autowired service.
     *
     * @return \PoP\ComponentModel\QueryInputOutputHandlers\ActionExecutionQueryInputOutputHandler
     */
    protected function getActionExecutionQueryInputOutputHandlerService()
    {
        return $this->services['PoP\\ComponentModel\\QueryInputOutputHandlers\\ActionExecutionQueryInputOutputHandler'] = new \PoP\ComponentModel\QueryInputOutputHandlers\ActionExecutionQueryInputOutputHandler();
    }

    /**
     * Gets the public 'PoP\ComponentModel\QueryInputOutputHandlers\ListQueryInputOutputHandler' shared autowired service.
     *
     * @return \PoP\ComponentModel\QueryInputOutputHandlers\ListQueryInputOutputHandler
     */
    protected function getListQueryInputOutputHandlerService()
    {
        return $this->services['PoP\\ComponentModel\\QueryInputOutputHandlers\\ListQueryInputOutputHandler'] = new \PoP\ComponentModel\QueryInputOutputHandlers\ListQueryInputOutputHandler();
    }

    /**
     * Gets the public 'PoP\ComponentModel\QueryInputOutputHandlers\ResponseConstants' shared autowired service.
     *
     * @return \PoP\ComponentModel\QueryInputOutputHandlers\ResponseConstants
     */
    protected function getResponseConstantsService()
    {
        return $this->services['PoP\\ComponentModel\\QueryInputOutputHandlers\\ResponseConstants'] = new \PoP\ComponentModel\QueryInputOutputHandlers\ResponseConstants();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Registries\DirectiveRegistryInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\Registries\DirectiveRegistry
     */
    protected function getDirectiveRegistryInterfaceService()
    {
        $this->services['PoP\\ComponentModel\\Registries\\DirectiveRegistryInterface'] = $instance = new \PoP\ComponentModel\Registries\DirectiveRegistry();

        $instance->addDirectiveResolver(($this->services['PoP\\ComponentModel\\DirectiveResolvers\\ResolveValueAndMergeDirectiveResolver'] ?? ($this->services['PoP\\ComponentModel\\DirectiveResolvers\\ResolveValueAndMergeDirectiveResolver'] = new \PoP\ComponentModel\DirectiveResolvers\ResolveValueAndMergeDirectiveResolver())), 'PoP\\ComponentModel\\DirectiveResolvers\\ResolveValueAndMergeDirectiveResolver');
        $instance->addDirectiveResolver(($this->services['PoP\\ComponentModel\\DirectiveResolvers\\ValidateDirectiveResolver'] ?? ($this->services['PoP\\ComponentModel\\DirectiveResolvers\\ValidateDirectiveResolver'] = new \PoP\ComponentModel\DirectiveResolvers\ValidateDirectiveResolver())), 'PoP\\ComponentModel\\DirectiveResolvers\\ValidateDirectiveResolver');
        $instance->addDirectiveResolver(($this->services['PoP\\CacheControl\\DirectiveResolvers\\CacheControlDirectiveResolver'] ?? ($this->services['PoP\\CacheControl\\DirectiveResolvers\\CacheControlDirectiveResolver'] = new \PoP\CacheControl\DirectiveResolvers\CacheControlDirectiveResolver())), 'PoP\\CacheControl\\DirectiveResolvers\\CacheControlDirectiveResolver');
        $instance->addDirectiveResolver(($this->services['PoP\\CacheControl\\DirectiveResolvers\\NestedFieldCacheControlDirectiveResolver'] ?? ($this->services['PoP\\CacheControl\\DirectiveResolvers\\NestedFieldCacheControlDirectiveResolver'] = new \PoP\CacheControl\DirectiveResolvers\NestedFieldCacheControlDirectiveResolver())), 'PoP\\CacheControl\\DirectiveResolvers\\NestedFieldCacheControlDirectiveResolver');
        $instance->addDirectiveResolver(($this->services['PoP\\Engine\\DirectiveResolvers\\AddFeedbackForFieldDirectiveResolver'] ?? ($this->services['PoP\\Engine\\DirectiveResolvers\\AddFeedbackForFieldDirectiveResolver'] = new \PoP\Engine\DirectiveResolvers\AddFeedbackForFieldDirectiveResolver())), 'PoP\\Engine\\DirectiveResolvers\\AddFeedbackForFieldDirectiveResolver');
        $instance->addDirectiveResolver(($this->services['PoP\\Engine\\DirectiveResolvers\\AdvancePointerInArrayDirectiveResolver'] ?? ($this->services['PoP\\Engine\\DirectiveResolvers\\AdvancePointerInArrayDirectiveResolver'] = new \PoP\Engine\DirectiveResolvers\AdvancePointerInArrayDirectiveResolver())), 'PoP\\Engine\\DirectiveResolvers\\AdvancePointerInArrayDirectiveResolver');
        $instance->addDirectiveResolver(($this->services['PoP\\Engine\\DirectiveResolvers\\ApplyFunctionDirectiveResolver'] ?? ($this->services['PoP\\Engine\\DirectiveResolvers\\ApplyFunctionDirectiveResolver'] = new \PoP\Engine\DirectiveResolvers\ApplyFunctionDirectiveResolver())), 'PoP\\Engine\\DirectiveResolvers\\ApplyFunctionDirectiveResolver');
        $instance->addDirectiveResolver(($this->services['PoP\\Engine\\DirectiveResolvers\\ForEachDirectiveResolver'] ?? ($this->services['PoP\\Engine\\DirectiveResolvers\\ForEachDirectiveResolver'] = new \PoP\Engine\DirectiveResolvers\ForEachDirectiveResolver())), 'PoP\\Engine\\DirectiveResolvers\\ForEachDirectiveResolver');
        $instance->addDirectiveResolver(($this->services['PoP\\Engine\\DirectiveResolvers\\IncludeDirectiveResolver'] ?? ($this->services['PoP\\Engine\\DirectiveResolvers\\IncludeDirectiveResolver'] = new \PoP\Engine\DirectiveResolvers\IncludeDirectiveResolver())), 'PoP\\Engine\\DirectiveResolvers\\IncludeDirectiveResolver');
        $instance->addDirectiveResolver(($this->services['PoP\\Engine\\DirectiveResolvers\\NoCacheCacheControlDirectiveResolver'] ?? ($this->services['PoP\\Engine\\DirectiveResolvers\\NoCacheCacheControlDirectiveResolver'] = new \PoP\Engine\DirectiveResolvers\NoCacheCacheControlDirectiveResolver())), 'PoP\\Engine\\DirectiveResolvers\\NoCacheCacheControlDirectiveResolver');
        $instance->addDirectiveResolver(($this->services['PoP\\Engine\\DirectiveResolvers\\OneYearCacheControlDirectiveResolver'] ?? ($this->services['PoP\\Engine\\DirectiveResolvers\\OneYearCacheControlDirectiveResolver'] = new \PoP\Engine\DirectiveResolvers\OneYearCacheControlDirectiveResolver())), 'PoP\\Engine\\DirectiveResolvers\\OneYearCacheControlDirectiveResolver');
        $instance->addDirectiveResolver(($this->services['PoP\\Engine\\DirectiveResolvers\\SetSelfAsExpressionDirectiveResolver'] ?? ($this->services['PoP\\Engine\\DirectiveResolvers\\SetSelfAsExpressionDirectiveResolver'] = new \PoP\Engine\DirectiveResolvers\SetSelfAsExpressionDirectiveResolver())), 'PoP\\Engine\\DirectiveResolvers\\SetSelfAsExpressionDirectiveResolver');
        $instance->addDirectiveResolver(($this->services['PoP\\Engine\\DirectiveResolvers\\SkipDirectiveResolver'] ?? ($this->services['PoP\\Engine\\DirectiveResolvers\\SkipDirectiveResolver'] = new \PoP\Engine\DirectiveResolvers\SkipDirectiveResolver())), 'PoP\\Engine\\DirectiveResolvers\\SkipDirectiveResolver');
        $instance->addDirectiveResolver(($this->services['PoP\\Engine\\ConditionalOnContext\\Guzzle\\SchemaServices\\DirectiveResolvers\\NoCacheCacheControlDirectiveResolver'] ?? ($this->services['PoP\\Engine\\ConditionalOnContext\\Guzzle\\SchemaServices\\DirectiveResolvers\\NoCacheCacheControlDirectiveResolver'] = new \PoP\Engine\ConditionalOnContext\Guzzle\SchemaServices\DirectiveResolvers\NoCacheCacheControlDirectiveResolver())), 'PoP\\Engine\\ConditionalOnContext\\Guzzle\\SchemaServices\\DirectiveResolvers\\NoCacheCacheControlDirectiveResolver');
        $instance->addDirectiveResolver(($this->services['PoP\\AccessControl\\DirectiveResolvers\\DisableAccessDirectiveResolver'] ?? ($this->services['PoP\\AccessControl\\DirectiveResolvers\\DisableAccessDirectiveResolver'] = new \PoP\AccessControl\DirectiveResolvers\DisableAccessDirectiveResolver())), 'PoP\\AccessControl\\DirectiveResolvers\\DisableAccessDirectiveResolver');
        $instance->addDirectiveResolver(($this->services['PoP\\AccessControl\\DirectiveResolvers\\DisableAccessForDirectivesDirectiveResolver'] ?? ($this->services['PoP\\AccessControl\\DirectiveResolvers\\DisableAccessForDirectivesDirectiveResolver'] = new \PoP\AccessControl\DirectiveResolvers\DisableAccessForDirectivesDirectiveResolver())), 'PoP\\AccessControl\\DirectiveResolvers\\DisableAccessForDirectivesDirectiveResolver');
        $instance->addDirectiveResolver(($this->services['PoP\\API\\DirectiveResolvers\\CopyRelationalResultsDirectiveResolver'] ?? ($this->services['PoP\\API\\DirectiveResolvers\\CopyRelationalResultsDirectiveResolver'] = new \PoP\API\DirectiveResolvers\CopyRelationalResultsDirectiveResolver())), 'PoP\\API\\DirectiveResolvers\\CopyRelationalResultsDirectiveResolver');
        $instance->addDirectiveResolver(($this->services['PoP\\API\\DirectiveResolvers\\DuplicatePropertyDirectiveResolver'] ?? ($this->services['PoP\\API\\DirectiveResolvers\\DuplicatePropertyDirectiveResolver'] = new \PoP\API\DirectiveResolvers\DuplicatePropertyDirectiveResolver())), 'PoP\\API\\DirectiveResolvers\\DuplicatePropertyDirectiveResolver');
        $instance->addDirectiveResolver(($this->services['PoP\\API\\DirectiveResolvers\\RenamePropertyDirectiveResolver'] ?? ($this->services['PoP\\API\\DirectiveResolvers\\RenamePropertyDirectiveResolver'] = new \PoP\API\DirectiveResolvers\RenamePropertyDirectiveResolver())), 'PoP\\API\\DirectiveResolvers\\RenamePropertyDirectiveResolver');
        $instance->addDirectiveResolver(($this->services['PoP\\API\\DirectiveResolvers\\SetPropertiesAsExpressionsDirectiveResolver'] ?? ($this->services['PoP\\API\\DirectiveResolvers\\SetPropertiesAsExpressionsDirectiveResolver'] = new \PoP\API\DirectiveResolvers\SetPropertiesAsExpressionsDirectiveResolver())), 'PoP\\API\\DirectiveResolvers\\SetPropertiesAsExpressionsDirectiveResolver');
        $instance->addDirectiveResolver(($this->services['PoP\\API\\DirectiveResolvers\\TransformArrayItemsDirectiveResolver'] ?? ($this->services['PoP\\API\\DirectiveResolvers\\TransformArrayItemsDirectiveResolver'] = new \PoP\API\DirectiveResolvers\TransformArrayItemsDirectiveResolver())), 'PoP\\API\\DirectiveResolvers\\TransformArrayItemsDirectiveResolver');
        $instance->addDirectiveResolver(($this->services['PoP\\API\\ConditionalOnComponent\\CacheControl\\ConditionalOnComponent\\AccessControl\\ConditionalOnContext\\PrivateSchema\\SchemaServices\\DirectiveResolvers\\SchemaNoCacheCacheControlDirectiveResolver'] ?? ($this->services['PoP\\API\\ConditionalOnComponent\\CacheControl\\ConditionalOnComponent\\AccessControl\\ConditionalOnContext\\PrivateSchema\\SchemaServices\\DirectiveResolvers\\SchemaNoCacheCacheControlDirectiveResolver'] = new \PoP\API\ConditionalOnComponent\CacheControl\ConditionalOnComponent\AccessControl\ConditionalOnContext\PrivateSchema\SchemaServices\DirectiveResolvers\SchemaNoCacheCacheControlDirectiveResolver())), 'PoP\\API\\ConditionalOnComponent\\CacheControl\\ConditionalOnComponent\\AccessControl\\ConditionalOnContext\\PrivateSchema\\SchemaServices\\DirectiveResolvers\\SchemaNoCacheCacheControlDirectiveResolver');
        $instance->addDirectiveResolver(($this->services['GraphQLByPoP\\GraphQLServer\\ConditionalOnComponent\\CacheControl\\ConditionalOnComponent\\AccessControl\\ConditionalOnContext\\PrivateSchema\\SchemaServices\\DirectiveResolvers\\SchemaNoCacheCacheControlDirectiveResolver'] ?? ($this->services['GraphQLByPoP\\GraphQLServer\\ConditionalOnComponent\\CacheControl\\ConditionalOnComponent\\AccessControl\\ConditionalOnContext\\PrivateSchema\\SchemaServices\\DirectiveResolvers\\SchemaNoCacheCacheControlDirectiveResolver'] = new \GraphQLByPoP\GraphQLServer\ConditionalOnComponent\CacheControl\ConditionalOnComponent\AccessControl\ConditionalOnContext\PrivateSchema\SchemaServices\DirectiveResolvers\SchemaNoCacheCacheControlDirectiveResolver())), 'GraphQLByPoP\\GraphQLServer\\ConditionalOnComponent\\CacheControl\\ConditionalOnComponent\\AccessControl\\ConditionalOnContext\\PrivateSchema\\SchemaServices\\DirectiveResolvers\\SchemaNoCacheCacheControlDirectiveResolver');
        $instance->addDirectiveResolver(($this->services['PoPSchema\\UserState\\DirectiveResolvers\\NoCacheCacheControlDirectiveResolver'] ?? ($this->services['PoPSchema\\UserState\\DirectiveResolvers\\NoCacheCacheControlDirectiveResolver'] = new \PoPSchema\UserState\DirectiveResolvers\NoCacheCacheControlDirectiveResolver())), 'PoPSchema\\UserState\\DirectiveResolvers\\NoCacheCacheControlDirectiveResolver');
        $instance->addDirectiveResolver(($this->services['PoPSchema\\UserStateAccessControl\\DirectiveResolvers\\ValidateIsUserLoggedInDirectiveResolver'] ?? ($this->services['PoPSchema\\UserStateAccessControl\\DirectiveResolvers\\ValidateIsUserLoggedInDirectiveResolver'] = new \PoPSchema\UserStateAccessControl\DirectiveResolvers\ValidateIsUserLoggedInDirectiveResolver())), 'PoPSchema\\UserStateAccessControl\\DirectiveResolvers\\ValidateIsUserLoggedInDirectiveResolver');
        $instance->addDirectiveResolver(($this->services['PoPSchema\\UserStateAccessControl\\DirectiveResolvers\\ValidateIsUserLoggedInForDirectivesDirectiveResolver'] ?? ($this->services['PoPSchema\\UserStateAccessControl\\DirectiveResolvers\\ValidateIsUserLoggedInForDirectivesDirectiveResolver'] = new \PoPSchema\UserStateAccessControl\DirectiveResolvers\ValidateIsUserLoggedInForDirectivesDirectiveResolver())), 'PoPSchema\\UserStateAccessControl\\DirectiveResolvers\\ValidateIsUserLoggedInForDirectivesDirectiveResolver');
        $instance->addDirectiveResolver(($this->services['PoPSchema\\UserStateAccessControl\\DirectiveResolvers\\ValidateIsUserNotLoggedInDirectiveResolver'] ?? ($this->services['PoPSchema\\UserStateAccessControl\\DirectiveResolvers\\ValidateIsUserNotLoggedInDirectiveResolver'] = new \PoPSchema\UserStateAccessControl\DirectiveResolvers\ValidateIsUserNotLoggedInDirectiveResolver())), 'PoPSchema\\UserStateAccessControl\\DirectiveResolvers\\ValidateIsUserNotLoggedInDirectiveResolver');
        $instance->addDirectiveResolver(($this->services['PoPSchema\\UserStateAccessControl\\DirectiveResolvers\\ValidateIsUserNotLoggedInForDirectivesDirectiveResolver'] ?? ($this->services['PoPSchema\\UserStateAccessControl\\DirectiveResolvers\\ValidateIsUserNotLoggedInForDirectivesDirectiveResolver'] = new \PoPSchema\UserStateAccessControl\DirectiveResolvers\ValidateIsUserNotLoggedInForDirectivesDirectiveResolver())), 'PoPSchema\\UserStateAccessControl\\DirectiveResolvers\\ValidateIsUserNotLoggedInForDirectivesDirectiveResolver');
        $instance->addDirectiveResolver(($this->services['PoPSchema\\UserRolesAccessControl\\DirectiveResolvers\\ValidateDoesLoggedInUserHaveAnyCapabilityDirectiveResolver'] ?? ($this->services['PoPSchema\\UserRolesAccessControl\\DirectiveResolvers\\ValidateDoesLoggedInUserHaveAnyCapabilityDirectiveResolver'] = new \PoPSchema\UserRolesAccessControl\DirectiveResolvers\ValidateDoesLoggedInUserHaveAnyCapabilityDirectiveResolver())), 'PoPSchema\\UserRolesAccessControl\\DirectiveResolvers\\ValidateDoesLoggedInUserHaveAnyCapabilityDirectiveResolver');
        $instance->addDirectiveResolver(($this->services['PoPSchema\\UserRolesAccessControl\\DirectiveResolvers\\ValidateDoesLoggedInUserHaveAnyCapabilityForDirectivesDirectiveResolver'] ?? ($this->services['PoPSchema\\UserRolesAccessControl\\DirectiveResolvers\\ValidateDoesLoggedInUserHaveAnyCapabilityForDirectivesDirectiveResolver'] = new \PoPSchema\UserRolesAccessControl\DirectiveResolvers\ValidateDoesLoggedInUserHaveAnyCapabilityForDirectivesDirectiveResolver())), 'PoPSchema\\UserRolesAccessControl\\DirectiveResolvers\\ValidateDoesLoggedInUserHaveAnyCapabilityForDirectivesDirectiveResolver');
        $instance->addDirectiveResolver(($this->services['PoPSchema\\UserRolesAccessControl\\DirectiveResolvers\\ValidateDoesLoggedInUserHaveAnyRoleDirectiveResolver'] ?? ($this->services['PoPSchema\\UserRolesAccessControl\\DirectiveResolvers\\ValidateDoesLoggedInUserHaveAnyRoleDirectiveResolver'] = new \PoPSchema\UserRolesAccessControl\DirectiveResolvers\ValidateDoesLoggedInUserHaveAnyRoleDirectiveResolver())), 'PoPSchema\\UserRolesAccessControl\\DirectiveResolvers\\ValidateDoesLoggedInUserHaveAnyRoleDirectiveResolver');
        $instance->addDirectiveResolver(($this->services['PoPSchema\\UserRolesAccessControl\\DirectiveResolvers\\ValidateDoesLoggedInUserHaveAnyRoleForDirectivesDirectiveResolver'] ?? ($this->services['PoPSchema\\UserRolesAccessControl\\DirectiveResolvers\\ValidateDoesLoggedInUserHaveAnyRoleForDirectivesDirectiveResolver'] = new \PoPSchema\UserRolesAccessControl\DirectiveResolvers\ValidateDoesLoggedInUserHaveAnyRoleForDirectivesDirectiveResolver())), 'PoPSchema\\UserRolesAccessControl\\DirectiveResolvers\\ValidateDoesLoggedInUserHaveAnyRoleForDirectivesDirectiveResolver');

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\Registries\FieldInterfaceRegistryInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\Registries\FieldInterfaceRegistry
     */
    protected function getFieldInterfaceRegistryInterfaceService()
    {
        $this->services['PoP\\ComponentModel\\Registries\\FieldInterfaceRegistryInterface'] = $instance = new \PoP\ComponentModel\Registries\FieldInterfaceRegistry();

        $instance->addFieldInterfaceResolver(($this->services['PoP\\ComponentModel\\FieldInterfaceResolvers\\ElementalFieldInterfaceResolver'] ?? $this->getElementalFieldInterfaceResolverService()), 'PoP\\ComponentModel\\FieldInterfaceResolvers\\ElementalFieldInterfaceResolver');
        $instance->addFieldInterfaceResolver(($this->services['PoPSchema\\QueriedObject\\FieldInterfaceResolvers\\QueryableFieldInterfaceResolver'] ?? $this->getQueryableFieldInterfaceResolverService()), 'PoPSchema\\QueriedObject\\FieldInterfaceResolvers\\QueryableFieldInterfaceResolver');
        $instance->addFieldInterfaceResolver(($this->services['PoPSchema\\CustomPosts\\FieldInterfaceResolvers\\IsCustomPostFieldInterfaceResolver'] ?? $this->getIsCustomPostFieldInterfaceResolverService()), 'PoPSchema\\CustomPosts\\FieldInterfaceResolvers\\IsCustomPostFieldInterfaceResolver');
        $instance->addFieldInterfaceResolver(($this->services['PoPSchema\\Users\\FieldInterfaceResolvers\\WithAuthorFieldInterfaceResolver'] ?? $this->getWithAuthorFieldInterfaceResolverService()), 'PoPSchema\\Users\\FieldInterfaceResolvers\\WithAuthorFieldInterfaceResolver');
        $instance->addFieldInterfaceResolver(($this->services['PoPSchema\\CustomPostMedia\\FieldInterfaceResolvers\\SupportingFeaturedImageFieldInterfaceResolver'] ?? $this->getSupportingFeaturedImageFieldInterfaceResolverService()), 'PoPSchema\\CustomPostMedia\\FieldInterfaceResolvers\\SupportingFeaturedImageFieldInterfaceResolver');
        $instance->addFieldInterfaceResolver(($this->services['PoPSchema\\Comments\\FieldInterfaceResolvers\\CommentableFieldInterfaceResolver'] ?? $this->getCommentableFieldInterfaceResolverService()), 'PoPSchema\\Comments\\FieldInterfaceResolvers\\CommentableFieldInterfaceResolver');
        $instance->addFieldInterfaceResolver(($this->services['PoPSchema\\Meta\\FieldInterfaceResolvers\\WithMetaFieldInterfaceResolver'] ?? $this->getWithMetaFieldInterfaceResolverService()), 'PoPSchema\\Meta\\FieldInterfaceResolvers\\WithMetaFieldInterfaceResolver');

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\Registries\TypeRegistryInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\Registries\TypeRegistry
     */
    protected function getTypeRegistryInterfaceService()
    {
        $this->services['PoP\\ComponentModel\\Registries\\TypeRegistryInterface'] = $instance = new \PoP\ComponentModel\Registries\TypeRegistry();

        $instance->addTypeResolver(($this->services['PoP\\Engine\\TypeResolvers\\RootTypeResolver'] ?? $this->getRootTypeResolverService()), 'PoP\\Engine\\TypeResolvers\\RootTypeResolver');
        $instance->addTypeResolver(($this->services['PoPSchema\\CustomPosts\\TypeResolvers\\CustomPostTypeResolver'] ?? $this->getCustomPostTypeResolverService()), 'PoPSchema\\CustomPosts\\TypeResolvers\\CustomPostTypeResolver');
        $instance->addTypeResolver(($this->services['PoPSchema\\CustomPosts\\TypeResolvers\\CustomPostUnionTypeResolver'] ?? $this->getCustomPostUnionTypeResolverService()), 'PoPSchema\\CustomPosts\\TypeResolvers\\CustomPostUnionTypeResolver');
        $instance->addTypeResolver(($this->services['PoPSchema\\GenericCustomPosts\\TypeResolvers\\GenericCustomPostTypeResolver'] ?? $this->getGenericCustomPostTypeResolverService()), 'PoPSchema\\GenericCustomPosts\\TypeResolvers\\GenericCustomPostTypeResolver');
        $instance->addTypeResolver(($this->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\DirectiveTypeResolver'] ?? $this->getDirectiveTypeResolverService()), 'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\DirectiveTypeResolver');
        $instance->addTypeResolver(($this->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\EnumValueTypeResolver'] ?? $this->getEnumValueTypeResolverService()), 'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\EnumValueTypeResolver');
        $instance->addTypeResolver(($this->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\FieldTypeResolver'] ?? $this->getFieldTypeResolverService()), 'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\FieldTypeResolver');
        $instance->addTypeResolver(($this->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\InputValueTypeResolver'] ?? $this->getInputValueTypeResolverService()), 'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\InputValueTypeResolver');
        $instance->addTypeResolver(($this->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\MutationRootTypeResolver'] ?? $this->getMutationRootTypeResolverService()), 'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\MutationRootTypeResolver');
        $instance->addTypeResolver(($this->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\QueryRootTypeResolver'] ?? $this->getQueryRootTypeResolverService()), 'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\QueryRootTypeResolver');
        $instance->addTypeResolver(($this->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\SchemaTypeResolver'] ?? $this->getSchemaTypeResolverService()), 'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\SchemaTypeResolver');
        $instance->addTypeResolver(($this->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\TypeTypeResolver'] ?? $this->getTypeTypeResolverService()), 'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\TypeTypeResolver');
        $instance->addTypeResolver(($this->services['PoPSchema\\Users\\TypeResolvers\\UserTypeResolver'] ?? $this->getUserTypeResolverService()), 'PoPSchema\\Users\\TypeResolvers\\UserTypeResolver');
        $instance->addTypeResolver(($this->services['PoPSchema\\Media\\TypeResolvers\\MediaTypeResolver'] ?? $this->getMediaTypeResolverService()), 'PoPSchema\\Media\\TypeResolvers\\MediaTypeResolver');
        $instance->addTypeResolver(($this->services['PoPSchema\\Posts\\TypeResolvers\\PostTypeResolver'] ?? $this->getPostTypeResolverService()), 'PoPSchema\\Posts\\TypeResolvers\\PostTypeResolver');
        $instance->addTypeResolver(($this->services['PoPSchema\\Pages\\TypeResolvers\\PageTypeResolver'] ?? $this->getPageTypeResolverService()), 'PoPSchema\\Pages\\TypeResolvers\\PageTypeResolver');
        $instance->addTypeResolver(($this->services['PoPSchema\\PostTags\\TypeResolvers\\PostTagTypeResolver'] ?? $this->getPostTagTypeResolverService()), 'PoPSchema\\PostTags\\TypeResolvers\\PostTagTypeResolver');
        $instance->addTypeResolver(($this->services['PoPSchema\\PostCategories\\TypeResolvers\\PostCategoryTypeResolver'] ?? $this->getPostCategoryTypeResolverService()), 'PoPSchema\\PostCategories\\TypeResolvers\\PostCategoryTypeResolver');
        $instance->addTypeResolver(($this->services['PoPSchema\\UserRolesWP\\TypeResolvers\\UserRoleTypeResolver'] ?? $this->getUserRoleTypeResolverService()), 'PoPSchema\\UserRolesWP\\TypeResolvers\\UserRoleTypeResolver');
        $instance->addTypeResolver(($this->services['PoPSchema\\Comments\\TypeResolvers\\CommentTypeResolver'] ?? $this->getCommentTypeResolverService()), 'PoPSchema\\Comments\\TypeResolvers\\CommentTypeResolver');
        $instance->addTypeResolver(($this->services['PoPSchema\\Menus\\TypeResolvers\\MenuItemTypeResolver'] ?? $this->getMenuItemTypeResolverService()), 'PoPSchema\\Menus\\TypeResolvers\\MenuItemTypeResolver');
        $instance->addTypeResolver(($this->services['PoPSchema\\Menus\\TypeResolvers\\MenuTypeResolver'] ?? $this->getMenuTypeResolverService()), 'PoPSchema\\Menus\\TypeResolvers\\MenuTypeResolver');

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\Schema\FeedbackMessageStoreInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\Schema\FeedbackMessageStore
     */
    protected function getFeedbackMessageStoreInterfaceService()
    {
        return $this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Schema\FieldQueryInterpreterInterface' shared autowired service.
     *
     * @return \PoP\API\Schema\FieldQueryInterpreter
     */
    protected function getFieldQueryInterpreterInterface2Service()
    {
        return $this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] = new \PoP\API\Schema\FieldQueryInterpreter(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\FieldQuery\\FeedbackMessageStoreInterface'] ?? ($this->services['PoP\\FieldQuery\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore())), ($this->services['PoP\\ComponentModel\\Schema\\TypeCastingExecuterInterface'] ?? $this->getTypeCastingExecuterInterfaceService()), ($this->services['PoP\\QueryParsing\\QueryParserInterface'] ?? $this->getQueryParserInterfaceService()));
    }

    /**
     * Gets the public 'PoP\ComponentModel\Schema\SchemaDefinitionServiceInterface' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionService
     */
    protected function getSchemaDefinitionServiceInterfaceService()
    {
        return $this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] = new \GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionService();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Schema\TypeCastingExecuterInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\Schema\TypeCastingExecuter
     */
    protected function getTypeCastingExecuterInterfaceService()
    {
        return $this->services['PoP\\ComponentModel\\Schema\\TypeCastingExecuterInterface'] = new \PoP\ComponentModel\Schema\TypeCastingExecuter(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())));
    }

    /**
     * Gets the public 'PoP\Definitions\DefinitionManagerInterface' shared autowired service.
     *
     * @return \PoP\Definitions\DefinitionManager
     */
    protected function getDefinitionManagerInterfaceService()
    {
        return $this->services['PoP\\Definitions\\DefinitionManagerInterface'] = new \PoP\Definitions\DefinitionManager();
    }

    /**
     * Gets the public 'PoP\EngineWP\Hooks\TemplateHookSet' shared autowired service.
     *
     * @return \PoP\EngineWP\Hooks\TemplateHookSet
     */
    protected function getTemplateHookSetService()
    {
        return $this->services['PoP\\EngineWP\\Hooks\\TemplateHookSet'] = new \PoP\EngineWP\Hooks\TemplateHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\HelperServices\\ApplicationStateHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\ApplicationStateHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\ApplicationStateHelperService())));
    }

    /**
     * Gets the public 'PoP\EngineWP\LooseContracts\LooseContractResolutionSet' shared autowired service.
     *
     * @return \PoP\EngineWP\LooseContracts\LooseContractResolutionSet
     */
    protected function getLooseContractResolutionSet9Service()
    {
        return $this->services['PoP\\EngineWP\\LooseContracts\\LooseContractResolutionSet'] = new \PoP\EngineWP\LooseContracts\LooseContractResolutionSet(($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] ?? ($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] = new \PoP\LooseContracts\LooseContractManager())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())));
    }

    /**
     * Gets the public 'PoP\Engine\CMS\CMSServiceInterface' shared autowired service.
     *
     * @return \PoP\EngineWP\CMS\CMSService
     */
    protected function getCMSServiceInterfaceService()
    {
        return $this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService();
    }

    /**
     * Gets the public 'PoP\Engine\CheckpointProcessors\RequestCheckpointProcessor' shared autowired service.
     *
     * @return \PoP\Engine\CheckpointProcessors\RequestCheckpointProcessor
     */
    protected function getRequestCheckpointProcessorService()
    {
        return $this->services['PoP\\Engine\\CheckpointProcessors\\RequestCheckpointProcessor'] = new \PoP\Engine\CheckpointProcessors\RequestCheckpointProcessor(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())));
    }

    /**
     * Gets the public 'PoP\Engine\ConditionalOnContext\Guzzle\SchemaServices\DirectiveResolvers\NoCacheCacheControlDirectiveResolver' shared autowired service.
     *
     * @return \PoP\Engine\ConditionalOnContext\Guzzle\SchemaServices\DirectiveResolvers\NoCacheCacheControlDirectiveResolver
     */
    protected function getNoCacheCacheControlDirectiveResolver2Service()
    {
        return $this->services['PoP\\Engine\\ConditionalOnContext\\Guzzle\\SchemaServices\\DirectiveResolvers\\NoCacheCacheControlDirectiveResolver'] = new \PoP\Engine\ConditionalOnContext\Guzzle\SchemaServices\DirectiveResolvers\NoCacheCacheControlDirectiveResolver();
    }

    /**
     * Gets the public 'PoP\Engine\ConditionalOnContext\Guzzle\SchemaServices\FieldResolvers\OperatorGlobalFieldResolver' shared autowired service.
     *
     * @return \PoP\Engine\ConditionalOnContext\Guzzle\SchemaServices\FieldResolvers\OperatorGlobalFieldResolver
     */
    protected function getOperatorGlobalFieldResolverService()
    {
        return $this->services['PoP\\Engine\\ConditionalOnContext\\Guzzle\\SchemaServices\\FieldResolvers\\OperatorGlobalFieldResolver'] = new \PoP\Engine\ConditionalOnContext\Guzzle\SchemaServices\FieldResolvers\OperatorGlobalFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoP\Engine\DirectiveResolvers\AddFeedbackForFieldDirectiveResolver' shared autowired service.
     *
     * @return \PoP\Engine\DirectiveResolvers\AddFeedbackForFieldDirectiveResolver
     */
    protected function getAddFeedbackForFieldDirectiveResolverService()
    {
        return $this->services['PoP\\Engine\\DirectiveResolvers\\AddFeedbackForFieldDirectiveResolver'] = new \PoP\Engine\DirectiveResolvers\AddFeedbackForFieldDirectiveResolver();
    }

    /**
     * Gets the public 'PoP\Engine\DirectiveResolvers\AdvancePointerInArrayDirectiveResolver' shared autowired service.
     *
     * @return \PoP\Engine\DirectiveResolvers\AdvancePointerInArrayDirectiveResolver
     */
    protected function getAdvancePointerInArrayDirectiveResolverService()
    {
        return $this->services['PoP\\Engine\\DirectiveResolvers\\AdvancePointerInArrayDirectiveResolver'] = new \PoP\Engine\DirectiveResolvers\AdvancePointerInArrayDirectiveResolver();
    }

    /**
     * Gets the public 'PoP\Engine\DirectiveResolvers\ApplyFunctionDirectiveResolver' shared autowired service.
     *
     * @return \PoP\Engine\DirectiveResolvers\ApplyFunctionDirectiveResolver
     */
    protected function getApplyFunctionDirectiveResolverService()
    {
        return $this->services['PoP\\Engine\\DirectiveResolvers\\ApplyFunctionDirectiveResolver'] = new \PoP\Engine\DirectiveResolvers\ApplyFunctionDirectiveResolver();
    }

    /**
     * Gets the public 'PoP\Engine\DirectiveResolvers\ForEachDirectiveResolver' shared autowired service.
     *
     * @return \PoP\Engine\DirectiveResolvers\ForEachDirectiveResolver
     */
    protected function getForEachDirectiveResolverService()
    {
        return $this->services['PoP\\Engine\\DirectiveResolvers\\ForEachDirectiveResolver'] = new \PoP\Engine\DirectiveResolvers\ForEachDirectiveResolver();
    }

    /**
     * Gets the public 'PoP\Engine\DirectiveResolvers\IncludeDirectiveResolver' shared autowired service.
     *
     * @return \PoP\Engine\DirectiveResolvers\IncludeDirectiveResolver
     */
    protected function getIncludeDirectiveResolverService()
    {
        return $this->services['PoP\\Engine\\DirectiveResolvers\\IncludeDirectiveResolver'] = new \PoP\Engine\DirectiveResolvers\IncludeDirectiveResolver();
    }

    /**
     * Gets the public 'PoP\Engine\DirectiveResolvers\NoCacheCacheControlDirectiveResolver' shared autowired service.
     *
     * @return \PoP\Engine\DirectiveResolvers\NoCacheCacheControlDirectiveResolver
     */
    protected function getNoCacheCacheControlDirectiveResolver3Service()
    {
        return $this->services['PoP\\Engine\\DirectiveResolvers\\NoCacheCacheControlDirectiveResolver'] = new \PoP\Engine\DirectiveResolvers\NoCacheCacheControlDirectiveResolver();
    }

    /**
     * Gets the public 'PoP\Engine\DirectiveResolvers\OneYearCacheControlDirectiveResolver' shared autowired service.
     *
     * @return \PoP\Engine\DirectiveResolvers\OneYearCacheControlDirectiveResolver
     */
    protected function getOneYearCacheControlDirectiveResolverService()
    {
        return $this->services['PoP\\Engine\\DirectiveResolvers\\OneYearCacheControlDirectiveResolver'] = new \PoP\Engine\DirectiveResolvers\OneYearCacheControlDirectiveResolver();
    }

    /**
     * Gets the public 'PoP\Engine\DirectiveResolvers\SetSelfAsExpressionDirectiveResolver' shared autowired service.
     *
     * @return \PoP\Engine\DirectiveResolvers\SetSelfAsExpressionDirectiveResolver
     */
    protected function getSetSelfAsExpressionDirectiveResolverService()
    {
        return $this->services['PoP\\Engine\\DirectiveResolvers\\SetSelfAsExpressionDirectiveResolver'] = new \PoP\Engine\DirectiveResolvers\SetSelfAsExpressionDirectiveResolver();
    }

    /**
     * Gets the public 'PoP\Engine\DirectiveResolvers\SkipDirectiveResolver' shared autowired service.
     *
     * @return \PoP\Engine\DirectiveResolvers\SkipDirectiveResolver
     */
    protected function getSkipDirectiveResolverService()
    {
        return $this->services['PoP\\Engine\\DirectiveResolvers\\SkipDirectiveResolver'] = new \PoP\Engine\DirectiveResolvers\SkipDirectiveResolver();
    }

    /**
     * Gets the public 'PoP\Engine\Enums\FieldFeedbackTargetEnum' shared autowired service.
     *
     * @return \PoP\Engine\Enums\FieldFeedbackTargetEnum
     */
    protected function getFieldFeedbackTargetEnumService()
    {
        return $this->services['PoP\\Engine\\Enums\\FieldFeedbackTargetEnum'] = new \PoP\Engine\Enums\FieldFeedbackTargetEnum();
    }

    /**
     * Gets the public 'PoP\Engine\Enums\FieldFeedbackTypeEnum' shared autowired service.
     *
     * @return \PoP\Engine\Enums\FieldFeedbackTypeEnum
     */
    protected function getFieldFeedbackTypeEnumService()
    {
        return $this->services['PoP\\Engine\\Enums\\FieldFeedbackTypeEnum'] = new \PoP\Engine\Enums\FieldFeedbackTypeEnum();
    }

    /**
     * Gets the public 'PoP\Engine\ErrorHandling\ErrorHelperInterface' shared autowired service.
     *
     * @return \PoP\Engine\ErrorHandling\ErrorHelper
     */
    protected function getErrorHelperInterfaceService()
    {
        return $this->services['PoP\\Engine\\ErrorHandling\\ErrorHelperInterface'] = new \PoP\Engine\ErrorHandling\ErrorHelper(($this->services['PoP\\Engine\\ErrorHandling\\ErrorManagerInterface'] ?? $this->getErrorManagerInterfaceService()));
    }

    /**
     * Gets the public 'PoP\Engine\ErrorHandling\ErrorManagerInterface' shared autowired service.
     *
     * @return \PoP\EngineWP\ErrorHandling\ErrorManager
     */
    protected function getErrorManagerInterfaceService()
    {
        return $this->services['PoP\\Engine\\ErrorHandling\\ErrorManagerInterface'] = new \PoP\EngineWP\ErrorHandling\ErrorManager(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())));
    }

    /**
     * Gets the public 'PoP\Engine\FieldResolvers\FunctionGlobalFieldResolver' shared autowired service.
     *
     * @return \PoP\Engine\FieldResolvers\FunctionGlobalFieldResolver
     */
    protected function getFunctionGlobalFieldResolverService()
    {
        return $this->services['PoP\\Engine\\FieldResolvers\\FunctionGlobalFieldResolver'] = new \PoP\Engine\FieldResolvers\FunctionGlobalFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoP\Engine\FieldResolvers\OperatorGlobalFieldResolver' shared autowired service.
     *
     * @return \PoP\Engine\FieldResolvers\OperatorGlobalFieldResolver
     */
    protected function getOperatorGlobalFieldResolver2Service()
    {
        return $this->services['PoP\\Engine\\FieldResolvers\\OperatorGlobalFieldResolver'] = new \PoP\Engine\FieldResolvers\OperatorGlobalFieldResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService())));
    }

    /**
     * Gets the public 'PoP\Engine\FormInputs\BooleanFormInput' shared autowired service.
     *
     * @return \PoP\Engine\FormInputs\BooleanFormInput
     */
    protected function getBooleanFormInputService()
    {
        return $this->services['PoP\\Engine\\FormInputs\\BooleanFormInput'] = new \PoP\Engine\FormInputs\BooleanFormInput();
    }

    /**
     * Gets the public 'PoP\Engine\FormInputs\DateRangeFormInput' shared autowired service.
     *
     * @return \PoP\Engine\FormInputs\DateRangeFormInput
     */
    protected function getDateRangeFormInputService()
    {
        return $this->services['PoP\\Engine\\FormInputs\\DateRangeFormInput'] = new \PoP\Engine\FormInputs\DateRangeFormInput();
    }

    /**
     * Gets the public 'PoP\Engine\FormInputs\DateRangeTimeFormInput' shared autowired service.
     *
     * @return \PoP\Engine\FormInputs\DateRangeTimeFormInput
     */
    protected function getDateRangeTimeFormInputService()
    {
        return $this->services['PoP\\Engine\\FormInputs\\DateRangeTimeFormInput'] = new \PoP\Engine\FormInputs\DateRangeTimeFormInput();
    }

    /**
     * Gets the public 'PoP\Engine\FormInputs\MultipleInputFormInput' shared autowired service.
     *
     * @return \PoP\Engine\FormInputs\MultipleInputFormInput
     */
    protected function getMultipleInputFormInputService()
    {
        return $this->services['PoP\\Engine\\FormInputs\\MultipleInputFormInput'] = new \PoP\Engine\FormInputs\MultipleInputFormInput();
    }

    /**
     * Gets the public 'PoP\Engine\FormInputs\MultipleSelectFormInput' shared autowired service.
     *
     * @return \PoP\Engine\FormInputs\MultipleSelectFormInput
     */
    protected function getMultipleSelectFormInputService()
    {
        return $this->services['PoP\\Engine\\FormInputs\\MultipleSelectFormInput'] = new \PoP\Engine\FormInputs\MultipleSelectFormInput();
    }

    /**
     * Gets the public 'PoP\Engine\FormInputs\SelectFormInput' shared autowired service.
     *
     * @return \PoP\Engine\FormInputs\SelectFormInput
     */
    protected function getSelectFormInputService()
    {
        return $this->services['PoP\\Engine\\FormInputs\\SelectFormInput'] = new \PoP\Engine\FormInputs\SelectFormInput();
    }

    /**
     * Gets the public 'PoP\Engine\Formatters\DateFormatterInterface' shared autowired service.
     *
     * @return \PoP\EngineWP\Formatters\DateFormatter
     */
    protected function getDateFormatterInterfaceService()
    {
        return $this->services['PoP\\Engine\\Formatters\\DateFormatterInterface'] = new \PoP\EngineWP\Formatters\DateFormatter();
    }

    /**
     * Gets the public 'PoP\Engine\Hooks\VarsHookSet' shared autowired service.
     *
     * @return \PoP\Engine\Hooks\VarsHookSet
     */
    protected function getVarsHookSet12Service()
    {
        return $this->services['PoP\\Engine\\Hooks\\VarsHookSet'] = new \PoP\Engine\Hooks\VarsHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'PoP\Engine\LooseContracts\LooseContractSet' shared autowired service.
     *
     * @return \PoP\Engine\LooseContracts\LooseContractSet
     */
    protected function getLooseContractSet9Service()
    {
        return $this->services['PoP\\Engine\\LooseContracts\\LooseContractSet'] = new \PoP\Engine\LooseContracts\LooseContractSet(($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] ?? ($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] = new \PoP\LooseContracts\LooseContractManager())));
    }

    /**
     * Gets the public 'PoP\Engine\ModuleProcessors\RootModuleProcessors' shared autowired service.
     *
     * @return \PoP\Engine\ModuleProcessors\RootModuleProcessors
     */
    protected function getRootModuleProcessorsService()
    {
        return $this->services['PoP\\Engine\\ModuleProcessors\\RootModuleProcessors'] = new \PoP\Engine\ModuleProcessors\RootModuleProcessors(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ModulePath\\ModulePathHelpersInterface'] ?? $this->getModulePathHelpersInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleFiltering\\ModuleFilterManagerInterface'] ?? $this->getModuleFilterManagerInterfaceService()), ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\ModuleProcessors\\ModuleProcessorManagerInterface'] = new \PoP\ComponentModel\ModuleProcessors\ModuleProcessorManager())), ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] ?? ($this->services['PoP\\Engine\\CMS\\CMSServiceInterface'] = new \PoP\EngineWP\CMS\CMSService())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\DataloadHelperServiceInterface'] ?? $this->getDataloadHelperServiceInterfaceService()), ($this->services['PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface'] ?? $this->getRequestHelperServiceInterfaceService()));
    }

    /**
     * Gets the public 'PoP\Engine\ObjectModels\Root' shared autowired service.
     *
     * @return \PoP\Engine\ObjectModels\Root
     */
    protected function getRootService()
    {
        return $this->services['PoP\\Engine\\ObjectModels\\Root'] = new \PoP\Engine\ObjectModels\Root();
    }

    /**
     * Gets the public 'PoP\Engine\RouteModuleProcessors\EntryRouteModuleProcessor' shared autowired service.
     *
     * @return \PoP\Engine\RouteModuleProcessors\EntryRouteModuleProcessor
     */
    protected function getEntryRouteModuleProcessor9Service()
    {
        return $this->services['PoP\\Engine\\RouteModuleProcessors\\EntryRouteModuleProcessor'] = new \PoP\Engine\RouteModuleProcessors\EntryRouteModuleProcessor(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())));
    }

    /**
     * Gets the public 'PoP\Engine\Schema\SchemaDefinitionServiceInterface' shared autowired service.
     *
     * @return \PoP\Engine\Schema\SchemaDefinitionService
     */
    protected function getSchemaDefinitionServiceInterface2Service()
    {
        return $this->services['PoP\\Engine\\Schema\\SchemaDefinitionServiceInterface'] = new \PoP\Engine\Schema\SchemaDefinitionService();
    }

    /**
     * Gets the public 'PoP\Engine\TypeDataLoaders\RootTypeDataLoader' shared autowired service.
     *
     * @return \PoP\Engine\TypeDataLoaders\RootTypeDataLoader
     */
    protected function getRootTypeDataLoaderService()
    {
        return $this->services['PoP\\Engine\\TypeDataLoaders\\RootTypeDataLoader'] = new \PoP\Engine\TypeDataLoaders\RootTypeDataLoader(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\LooseContracts\\NameResolverInterface'] ?? $this->getNameResolverInterfaceService()));
    }

    /**
     * Gets the public 'PoP\Engine\TypeResolvers\RootTypeResolver' shared autowired service.
     *
     * @return \PoP\Engine\TypeResolvers\RootTypeResolver
     */
    protected function getRootTypeResolverService()
    {
        return $this->services['PoP\\Engine\\TypeResolvers\\RootTypeResolver'] = new \PoP\Engine\TypeResolvers\RootTypeResolver(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())), ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()), ($this->services['PoP\\ComponentModel\\ErrorHandling\\ErrorProviderInterface'] ?? $this->getErrorProviderInterfaceService()), ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] = new \GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionService())));
    }

    /**
     * Gets the public 'PoP\FieldQuery\FeedbackMessageStoreInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\Schema\FeedbackMessageStore
     */
    protected function getFeedbackMessageStoreInterface2Service()
    {
        return $this->services['PoP\\FieldQuery\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore();
    }

    /**
     * Gets the public 'PoP\FieldQuery\FieldQueryInterpreterInterface' shared autowired service.
     *
     * @return \PoP\API\Schema\FieldQueryInterpreter
     */
    protected function getFieldQueryInterpreterInterface3Service()
    {
        return $this->services['PoP\\FieldQuery\\FieldQueryInterpreterInterface'] = new \PoP\API\Schema\FieldQueryInterpreter(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\FieldQuery\\FeedbackMessageStoreInterface'] ?? ($this->services['PoP\\FieldQuery\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore())), ($this->services['PoP\\ComponentModel\\Schema\\TypeCastingExecuterInterface'] ?? $this->getTypeCastingExecuterInterfaceService()), ($this->services['PoP\\QueryParsing\\QueryParserInterface'] ?? $this->getQueryParserInterfaceService()));
    }

    /**
     * Gets the public 'PoP\GraphQLAPI\DataStructureFormatters\GraphQLDataStructureFormatter' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\Overrides\Services\DataStructureFormatters\GraphQLDataStructureFormatter
     */
    protected function getGraphQLDataStructureFormatterService()
    {
        return $this->services['PoP\\GraphQLAPI\\DataStructureFormatters\\GraphQLDataStructureFormatter'] = new \GraphQLByPoP\GraphQLServer\Overrides\Services\DataStructureFormatters\GraphQLDataStructureFormatter(($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] ?? ($this->services['PoP\\ComponentModel\\Schema\\FeedbackMessageStoreInterface'] = new \PoP\ComponentModel\Schema\FeedbackMessageStore())), ($this->services['PoP\\ComponentModel\\Schema\\FieldQueryInterpreterInterface'] ?? $this->getFieldQueryInterpreterInterface2Service()));
    }

    /**
     * Gets the public 'PoP\Hooks\HooksAPIInterface' shared autowired service.
     *
     * @return \PoP\HooksWP\HooksAPI
     */
    protected function getHooksAPIInterfaceService()
    {
        return $this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI();
    }

    /**
     * Gets the public 'PoP\LooseContracts\LooseContractManagerInterface' shared autowired service.
     *
     * @return \PoP\LooseContracts\LooseContractManager
     */
    protected function getLooseContractManagerInterfaceService()
    {
        return $this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] = new \PoP\LooseContracts\LooseContractManager();
    }

    /**
     * Gets the public 'PoP\LooseContracts\NameResolverInterface' shared autowired service.
     *
     * @return \PoP\LooseContracts\NameResolver
     */
    protected function getNameResolverInterfaceService()
    {
        return $this->services['PoP\\LooseContracts\\NameResolverInterface'] = new \PoP\LooseContracts\NameResolver(($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] ?? ($this->services['PoP\\LooseContracts\\LooseContractManagerInterface'] = new \PoP\LooseContracts\LooseContractManager())));
    }

    /**
     * Gets the public 'PoP\ModuleRouting\RouteModuleProcessorManagerInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\ModuleRouting\RouteModuleProcessorManager
     */
    protected function getRouteModuleProcessorManagerInterfaceService()
    {
        $this->services['PoP\\ModuleRouting\\RouteModuleProcessorManagerInterface'] = $instance = new \PoP\ComponentModel\ModuleRouting\RouteModuleProcessorManager();

        $instance->addRouteModuleProcessor(($this->services['PoP\\Engine\\RouteModuleProcessors\\EntryRouteModuleProcessor'] ?? $this->getEntryRouteModuleProcessor9Service()), 'PoP\\Engine\\RouteModuleProcessors\\EntryRouteModuleProcessor');
        $instance->addRouteModuleProcessor(($this->services['PoP\\API\\RouteModuleProcessors\\EntryRouteModuleProcessor'] ?? $this->getEntryRouteModuleProcessor8Service()), 'PoP\\API\\RouteModuleProcessors\\EntryRouteModuleProcessor');
        $instance->addRouteModuleProcessor(($this->services['GraphQLByPoP\\GraphQLServer\\RouteModuleProcessors\\EntryRouteModuleProcessor'] ?? $this->getEntryRouteModuleProcessorService()), 'GraphQLByPoP\\GraphQLServer\\RouteModuleProcessors\\EntryRouteModuleProcessor');
        $instance->addRouteModuleProcessor(($this->services['PoPSchema\\Users\\ConditionalOnComponent\\API\\RouteModuleProcessors\\EntryRouteModuleProcessor'] ?? $this->getEntryRouteModuleProcessor7Service()), 'PoPSchema\\Users\\ConditionalOnComponent\\API\\RouteModuleProcessors\\EntryRouteModuleProcessor');
        $instance->addRouteModuleProcessor(($this->services['PoPSchema\\Posts\\ConditionalOnComponent\\API\\RouteModuleProcessors\\EntryRouteModuleProcessor'] ?? $this->getEntryRouteModuleProcessor5Service()), 'PoPSchema\\Posts\\ConditionalOnComponent\\API\\RouteModuleProcessors\\EntryRouteModuleProcessor');
        $instance->addRouteModuleProcessor(($this->services['PoPSchema\\Posts\\ConditionalOnComponent\\Users\\ConditionalOnComponent\\API\\RouteModuleProcessors\\EntryRouteModuleProcessor'] ?? $this->getEntryRouteModuleProcessor6Service()), 'PoPSchema\\Posts\\ConditionalOnComponent\\Users\\ConditionalOnComponent\\API\\RouteModuleProcessors\\EntryRouteModuleProcessor');
        $instance->addRouteModuleProcessor(($this->services['PoPSchema\\Pages\\ConditionalOnComponent\\API\\RouteModuleProcessors\\EntryRouteModuleProcessor'] ?? $this->getEntryRouteModuleProcessor2Service()), 'PoPSchema\\Pages\\ConditionalOnComponent\\API\\RouteModuleProcessors\\EntryRouteModuleProcessor');
        $instance->addRouteModuleProcessor(($this->services['PoPSchema\\PostTags\\ConditionalOnComponent\\API\\RouteModuleProcessors\\EntryRouteModuleProcessor'] ?? $this->getEntryRouteModuleProcessor4Service()), 'PoPSchema\\PostTags\\ConditionalOnComponent\\API\\RouteModuleProcessors\\EntryRouteModuleProcessor');
        $instance->addRouteModuleProcessor(($this->services['PoPSchema\\PostCategories\\ConditionalOnComponent\\API\\RouteModuleProcessors\\EntryRouteModuleProcessor'] ?? $this->getEntryRouteModuleProcessor3Service()), 'PoPSchema\\PostCategories\\ConditionalOnComponent\\API\\RouteModuleProcessors\\EntryRouteModuleProcessor');

        return $instance;
    }

    /**
     * Gets the public 'PoP\QueryParsing\QueryParserInterface' shared autowired service.
     *
     * @return \PoP\QueryParsing\QueryParser
     */
    protected function getQueryParserInterfaceService()
    {
        return $this->services['PoP\\QueryParsing\\QueryParserInterface'] = new \PoP\QueryParsing\QueryParser(($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())));
    }

    /**
     * Gets the public 'PoP\Root\Container\ServiceInstantiatorInterface' shared autowired service.
     *
     * @return \PoP\Root\Container\ServiceInstantiator
     */
    protected function getServiceInstantiatorInterfaceService()
    {
        $this->services['PoP\\Root\\Container\\ServiceInstantiatorInterface'] = $instance = new \PoP\Root\Container\ServiceInstantiator();

        $instance->addService(($this->services['PoP\\Engine\\Hooks\\VarsHookSet'] ?? $this->getVarsHookSet12Service()));
        $instance->addService(($this->services['PoP\\Engine\\LooseContracts\\LooseContractSet'] ?? $this->getLooseContractSet9Service()));
        $instance->addService(($this->services['PoPSchema\\QueriedObject\\Hooks\\ApplicationStateHookSet'] ?? $this->getApplicationStateHookSet2Service()));
        $instance->addService(($this->services['PoPSchema\\CustomPosts\\Hooks\\VarsHookSet'] ?? $this->getVarsHookSet5Service()));
        $instance->addService(($this->services['PoPSchema\\CustomPosts\\LooseContracts\\LooseContractSet'] ?? $this->getLooseContractSet4Service()));
        $instance->addService(($this->services['PoP\\AccessControl\\Hooks\\DisableDirectiveConfigurableAccessControlForDirectivesInPrivateSchemaHookSet'] ?? $this->getDisableDirectiveConfigurableAccessControlForDirectivesInPrivateSchemaHookSetService()));
        $instance->addService(($this->services['PoP\\AccessControl\\Hooks\\DisableFieldConfigurableAccessControlForFieldsInPrivateSchemaHookSet'] ?? $this->getDisableFieldConfigurableAccessControlForFieldsInPrivateSchemaHookSetService()));
        $instance->addService(($this->services['PoP\\API\\Hooks\\DBEntriesHookSet'] ?? $this->getDBEntriesHookSet3Service()));
        $instance->addService(($this->services['PoP\\API\\Hooks\\RoutingHookSet'] ?? $this->getRoutingHookSet5Service()));
        $instance->addService(($this->services['PoP\\API\\Hooks\\VarsHookSet'] ?? $this->getVarsHookSet11Service()));
        $instance->addService(($this->services['PoP\\API\\ConditionalOnComponent\\AccessControl\\Hooks\\ComponentConfigurationHookSet'] ?? $this->getComponentConfigurationHookSetService()));
        $instance->addService(($this->services['GraphQLByPoP\\GraphQLRequest\\Hooks\\VarsHookSet'] ?? $this->getVarsHookSet2Service()));
        $instance->addService(($this->services['GraphQLByPoP\\GraphQLServer\\Hooks\\DBEntriesHookSet'] ?? $this->getDBEntriesHookSetService()));
        $instance->addService(($this->services['GraphQLByPoP\\GraphQLServer\\Hooks\\NestedMutationHookSet'] ?? $this->getNestedMutationHookSetService()));
        $instance->addService(($this->services['GraphQLByPoP\\GraphQLServer\\Hooks\\SchemaCacheHookSet'] ?? $this->getSchemaCacheHookSetService()));
        $instance->addService(($this->services['GraphQLByPoP\\GraphQLServer\\Hooks\\VarsHookSet'] ?? $this->getVarsHookSet3Service()));
        $instance->addService(($this->services['PoPSchema\\Users\\LooseContracts\\LooseContractSet'] ?? $this->getLooseContractSet8Service()));
        $instance->addService(($this->services['PoPSchema\\Users\\Hooks\\RoutingHookSet'] ?? $this->getRoutingHookSet4Service()));
        $instance->addService(($this->services['PoPSchema\\Users\\Hooks\\VarsHookSet'] ?? $this->getVarsHookSet10Service()));
        $instance->addService(($this->services['PoPSchema\\Users\\ConditionalOnComponent\\CustomPosts\\LooseContracts\\LooseContractSet'] ?? $this->getLooseContractSet7Service()));
        $instance->addService(($this->services['PoPSchema\\Users\\ConditionalOnComponent\\CustomPosts\\Hooks\\QueryHookSet'] ?? $this->getQueryHookSet6Service()));
        $instance->addService(($this->services['PoP\\RoutingWP\\Hooks\\SetupCortexHookSet'] ?? $this->getSetupCortexHookSetService()));
        $instance->addService(($this->services['PoP\\EngineWP\\Hooks\\TemplateHookSet'] ?? $this->getTemplateHookSetService()));
        $instance->addService(($this->services['PoP\\EngineWP\\LooseContracts\\LooseContractResolutionSet'] ?? $this->getLooseContractResolutionSet9Service()));
        $instance->addService(($this->services['PoPSchema\\Posts\\Hooks\\RoutingHookSet'] ?? $this->getRoutingHookSet3Service()));
        $instance->addService(($this->services['PoPSchema\\CustomPostsWP\\LooseContracts\\LooseContractResolutionSet'] ?? $this->getLooseContractResolutionSet4Service()));
        $instance->addService(($this->services['PoPSchema\\CustomPostsWP\\Hooks\\RoutingStateHookSet'] ?? $this->getRoutingStateHookSet2Service()));
        $instance->addService(($this->services['PoPSchema\\Pages\\Hooks\\VarsHookSet'] ?? $this->getVarsHookSet6Service()));
        $instance->addService(($this->services['PoPSchema\\Pages\\LooseContracts\\LooseContractSet'] ?? $this->getLooseContractSet5Service()));
        $instance->addService(($this->services['PoPSchema\\PagesWP\\LooseContracts\\LooseContractResolutionSet'] ?? $this->getLooseContractResolutionSet5Service()));
        $instance->addService(($this->services['PoPSchema\\PagesWP\\Hooks\\RoutingStateHookSet'] ?? $this->getRoutingStateHookSet3Service()));
        $instance->addService(($this->services['PoPSchema\\Tags\\LooseContracts\\LooseContractSet'] ?? $this->getLooseContractSet6Service()));
        $instance->addService(($this->services['PoPSchema\\Tags\\Hooks\\VarsHookSet'] ?? $this->getVarsHookSet7Service()));
        $instance->addService(($this->services['PoPSchema\\PostTags\\Hooks\\RoutingHookSet'] ?? $this->getRoutingHookSet2Service()));
        $instance->addService(($this->services['PoPSchema\\TagsWP\\LooseContracts\\LooseContractResolutionSet'] ?? $this->getLooseContractResolutionSet6Service()));
        $instance->addService(($this->services['PoPSchema\\TagsWP\\Hooks\\RoutingStateHookSet'] ?? $this->getRoutingStateHookSet4Service()));
        $instance->addService(($this->services['PoPSchema\\PostTagsWP\\Hooks\\PostTagQueryHookSet'] ?? $this->getPostTagQueryHookSetService()));
        $instance->addService(($this->services['PoPSchema\\Categories\\LooseContracts\\LooseContractSet'] ?? $this->getLooseContractSetService()));
        $instance->addService(($this->services['PoPSchema\\Categories\\Hooks\\VarsHookSet'] ?? $this->getVarsHookSet4Service()));
        $instance->addService(($this->services['PoPSchema\\PostCategories\\Hooks\\ModelInstanceHookSet'] ?? $this->getModelInstanceHookSetService()));
        $instance->addService(($this->services['PoPSchema\\PostCategories\\Hooks\\RoutingHookSet'] ?? $this->getRoutingHookSetService()));
        $instance->addService(($this->services['PoPSchema\\CategoriesWP\\LooseContracts\\LooseContractResolutionSet'] ?? $this->getLooseContractResolutionSetService()));
        $instance->addService(($this->services['PoPSchema\\CategoriesWP\\Hooks\\RoutingStateHookSet'] ?? $this->getRoutingStateHookSetService()));
        $instance->addService(($this->services['PoPSchema\\PostCategoriesWP\\Hooks\\PostCategoryQueryHookSet'] ?? $this->getPostCategoryQueryHookSetService()));
        $instance->addService(($this->services['PoPSchema\\UserRoles\\Hooks\\VarsHookSet'] ?? $this->getVarsHookSet8Service()));
        $instance->addService(($this->services['PoPSchema\\UserState\\Hooks\\DBEntriesHookSet'] ?? $this->getDBEntriesHookSet2Service()));
        $instance->addService(($this->services['PoPSchema\\UserState\\Hooks\\VarsHookSet'] ?? $this->getVarsHookSet9Service()));
        $instance->addService(($this->services['PoPSchema\\UserStateAccessControl\\Hooks\\DisableDirectivesIfUserIsLoggedInConfigurableAccessControlForDirectivesInPrivateSchemaHookSet'] ?? $this->getDisableDirectivesIfUserIsLoggedInConfigurableAccessControlForDirectivesInPrivateSchemaHookSetService()));
        $instance->addService(($this->services['PoPSchema\\UserStateAccessControl\\Hooks\\DisableDirectivesIfUserIsNotLoggedInConfigurableAccessControlForDirectivesInPrivateSchemaHookSet'] ?? $this->getDisableDirectivesIfUserIsNotLoggedInConfigurableAccessControlForDirectivesInPrivateSchemaHookSetService()));
        $instance->addService(($this->services['PoPSchema\\UserStateAccessControl\\Hooks\\DisableFieldIfUserIsLoggedInConfigurableAccessControlForFieldsInPrivateSchemaHookSet'] ?? $this->getDisableFieldIfUserIsLoggedInConfigurableAccessControlForFieldsInPrivateSchemaHookSetService()));
        $instance->addService(($this->services['PoPSchema\\UserStateAccessControl\\Hooks\\DisableFieldIfUserIsNotLoggedInConfigurableAccessControlForFieldsInPrivateSchemaHookSet'] ?? $this->getDisableFieldIfUserIsNotLoggedInConfigurableAccessControlForFieldsInPrivateSchemaHookSetService()));
        $instance->addService(($this->services['PoPSchema\\UserStateAccessControl\\Hooks\\DisableUserStateFieldsIfUserIsNotLoggedInAccessControlForFieldsInPrivateSchemaHookSet'] ?? $this->getDisableUserStateFieldsIfUserIsNotLoggedInAccessControlForFieldsInPrivateSchemaHookSetService()));
        $instance->addService(($this->services['PoPSchema\\UserRolesAccessControl\\Hooks\\MaybeDisableDirectivesIfLoggedInUserDoesNotHaveCapabilityPrivateSchemaHookSet'] ?? $this->getMaybeDisableDirectivesIfLoggedInUserDoesNotHaveCapabilityPrivateSchemaHookSetService()));
        $instance->addService(($this->services['PoPSchema\\UserRolesAccessControl\\Hooks\\MaybeDisableDirectivesIfLoggedInUserDoesNotHaveRolePrivateSchemaHookSet'] ?? $this->getMaybeDisableDirectivesIfLoggedInUserDoesNotHaveRolePrivateSchemaHookSetService()));
        $instance->addService(($this->services['PoPSchema\\UserRolesAccessControl\\Hooks\\MaybeDisableFieldsIfLoggedInUserDoesNotHaveCapabilityPrivateSchemaHookSet'] ?? $this->getMaybeDisableFieldsIfLoggedInUserDoesNotHaveCapabilityPrivateSchemaHookSetService()));
        $instance->addService(($this->services['PoPSchema\\UserRolesAccessControl\\Hooks\\MaybeDisableFieldsIfLoggedInUserDoesNotHaveRolePrivateSchemaHookSet'] ?? $this->getMaybeDisableFieldsIfLoggedInUserDoesNotHaveRolePrivateSchemaHookSetService()));
        $instance->addService(($this->services['PoPSchema\\UsersWP\\LooseContracts\\LooseContractResolutionSet'] ?? $this->getLooseContractResolutionSet8Service()));
        $instance->addService(($this->services['PoPSchema\\UsersWP\\Hooks\\RoutingStateHookSet'] ?? $this->getRoutingStateHookSet5Service()));
        $instance->addService(($this->services['PoPSchema\\UsersWP\\ConditionalOnComponent\\CustomPosts\\LooseContracts\\LooseContractResolutionSet'] ?? $this->getLooseContractResolutionSet7Service()));
        $instance->addService(($this->services['PoPSchema\\CustomPostMutations\\LooseContracts\\LooseContractSet'] ?? $this->getLooseContractSet3Service()));
        $instance->addService(($this->services['PoPSchema\\CustomPostMutationsWP\\LooseContracts\\LooseContractResolutionSet'] ?? $this->getLooseContractResolutionSet3Service()));
        $instance->addService(($this->services['PoPSchema\\CustomPostMediaMutations\\Hooks\\CustomPostMutationResolverHookSet'] ?? $this->getCustomPostMutationResolverHookSetService()));
        $instance->addService(($this->services['PoPSchema\\PostTagMutations\\Hooks\\PostMutationResolverHookSet'] ?? $this->getPostMutationResolverHookSet2Service()));
        $instance->addService(($this->services['PoPSchema\\PostCategoryMutations\\Hooks\\PostMutationResolverHookSet'] ?? $this->getPostMutationResolverHookSetService()));
        $instance->addService(($this->services['PoPSchema\\Comments\\Hooks\\WhitelistParamHookSet'] ?? $this->getWhitelistParamHookSetService()));
        $instance->addService(($this->services['PoPSchema\\Comments\\LooseContracts\\LooseContractSet'] ?? $this->getLooseContractSet2Service()));
        $instance->addService(($this->services['PoPSchema\\CommentsWP\\LooseContracts\\LooseContractResolutionSet'] ?? $this->getLooseContractResolutionSet2Service()));
        $instance->addService(($this->services['PoPSchema\\CommentMetaWP\\Hooks\\QueryHookSet'] ?? $this->getQueryHookSet2Service()));
        $instance->addService(($this->services['PoPSchema\\CustomPostMetaWP\\Hooks\\QueryHookSet'] ?? $this->getQueryHookSet3Service()));
        $instance->addService(($this->services['PoPSchema\\TaxonomyMetaWP\\Hooks\\QueryHookSet'] ?? $this->getQueryHookSet4Service()));
        $instance->addService(($this->services['PoPSchema\\UserMetaWP\\Hooks\\QueryHookSet'] ?? $this->getQueryHookSet5Service()));
        $instance->addService(($this->services['PoP\\APIEndpointsForWP\\EndpointHandlers\\NativeAPIEndpointHandler'] ?? ($this->services['PoP\\APIEndpointsForWP\\EndpointHandlers\\NativeAPIEndpointHandler'] = new \PoP\APIEndpointsForWP\EndpointHandlers\NativeAPIEndpointHandler())));
        $instance->addService(($this->services['GraphQLByPoP\\GraphQLClientsForWP\\Clients\\GraphiQLClient'] ?? ($this->services['GraphQLByPoP\\GraphQLClientsForWP\\Clients\\GraphiQLClient'] = new \GraphQLByPoP\GraphQLClientsForWP\ConditionalOnContext\UseGraphiQLExplorer\Overrides\Services\Clients\GraphiQLWithExplorerClient())));
        $instance->addService(($this->services['GraphQLByPoP\\GraphQLClientsForWP\\Clients\\VoyagerClient'] ?? ($this->services['GraphQLByPoP\\GraphQLClientsForWP\\Clients\\VoyagerClient'] = new \GraphQLByPoP\GraphQLClientsForWP\Clients\VoyagerClient())));
        $instance->addService(($this->services['GraphQLByPoP\\GraphQLEndpointForWP\\EndpointHandlers\\GraphQLEndpointHandler'] ?? ($this->services['GraphQLByPoP\\GraphQLEndpointForWP\\EndpointHandlers\\GraphQLEndpointHandler'] = new \GraphQLByPoP\GraphQLEndpointForWP\EndpointHandlers\GraphQLEndpointHandler())));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationSchemes\\ManageOptionsUserAuthorizationScheme'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationSchemes\\ManageOptionsUserAuthorizationScheme'] = new \GraphQLAPI\GraphQLAPI\Security\UserAuthorizationSchemes\ManageOptionsUserAuthorizationScheme())));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\BlockCategories\\AccessControlBlockCategory'] ?? $this->getAccessControlBlockCategoryService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\BlockCategories\\CacheControlBlockCategory'] ?? $this->getCacheControlBlockCategoryService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\BlockCategories\\CustomEndpointBlockCategory'] ?? $this->getCustomEndpointBlockCategoryService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\BlockCategories\\EndpointBlockCategory'] ?? $this->getEndpointBlockCategoryService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\BlockCategories\\PersistedQueryEndpointBlockCategory'] ?? $this->getPersistedQueryEndpointBlockCategoryService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\BlockCategories\\SchemaConfigurationBlockCategory'] ?? $this->getSchemaConfigurationBlockCategoryService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\AccessControlBlock'] ?? $this->getAccessControlBlockService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\AccessControlRuleBlocks\\AccessControlDisableAccessBlock'] ?? $this->getAccessControlDisableAccessBlockService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\AccessControlRuleBlocks\\AccessControlUserCapabilitiesBlock'] ?? $this->getAccessControlUserCapabilitiesBlockService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\AccessControlRuleBlocks\\AccessControlUserRolesBlock'] ?? $this->getAccessControlUserRolesBlockService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\AccessControlRuleBlocks\\AccessControlUserStateBlock'] ?? $this->getAccessControlUserStateBlockService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\CacheControlBlock'] ?? $this->getCacheControlBlockService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\CustomEndpointOptionsBlock'] ?? $this->getCustomEndpointOptionsBlockService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\EndpointGraphiQLBlock'] ?? $this->getEndpointGraphiQLBlockService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\EndpointSchemaConfigurationBlock'] ?? $this->getEndpointSchemaConfigurationBlockService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\EndpointVoyagerBlock'] ?? $this->getEndpointVoyagerBlockService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\PersistedQueryEndpointAPIHierarchyBlock'] ?? $this->getPersistedQueryEndpointAPIHierarchyBlockService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\PersistedQueryEndpointGraphiQLBlock'] ?? $this->getPersistedQueryEndpointGraphiQLBlockService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\PersistedQueryEndpointOptionsBlock'] ?? $this->getPersistedQueryEndpointOptionsBlockService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigAccessControlListBlock'] ?? $this->getSchemaConfigAccessControlListBlockService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigAdminSchemaBlock'] ?? $this->getSchemaConfigAdminSchemaBlockService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigCacheControlListBlock'] ?? $this->getSchemaConfigCacheControlListBlockService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigMutationSchemeBlock'] ?? $this->getSchemaConfigMutationSchemeBlockService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigNamespacingBlock'] ?? $this->getSchemaConfigNamespacingBlockService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Blocks\\SchemaConfigSchemaModeBlock'] ?? $this->getSchemaConfigSchemaModeBlockService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Clients\\CustomEndpointGraphiQLClient'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Clients\\CustomEndpointGraphiQLClient'] = new \GraphQLAPI\GraphQLAPI\ConditionalOnContext\GraphiQLExplorerInCustomEndpointPublicClient\Overrides\Services\Clients\CustomEndpointGraphiQLWithExplorerClient())));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Clients\\CustomEndpointVoyagerClient'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Clients\\CustomEndpointVoyagerClient'] = new \GraphQLAPI\GraphQLAPI\Services\Clients\CustomEndpointVoyagerClient())));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLAccessControlListCustomPostType'] ?? $this->getGraphQLAccessControlListCustomPostTypeService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLCacheControlListCustomPostType'] ?? $this->getGraphQLCacheControlListCustomPostTypeService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLCustomEndpointCustomPostType'] ?? $this->getGraphQLCustomEndpointCustomPostTypeService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLPersistedQueryEndpointCustomPostType'] ?? $this->getGraphQLPersistedQueryEndpointCustomPostTypeService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\CustomPostTypes\\GraphQLSchemaConfigurationCustomPostType'] ?? $this->getGraphQLSchemaConfigurationCustomPostTypeService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\EditorScripts\\EndpointComponentEditorScript'] ?? $this->getEndpointComponentEditorScriptService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\EditorScripts\\PersistedQueryEndpointComponentEditorScript'] ?? $this->getPersistedQueryEndpointComponentEditorScriptService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Hooks\\ApplicationStateHookSet'] ?? $this->getApplicationStateHookSetService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Hooks\\QueryHookSet'] ?? $this->getQueryHookSetService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Hooks\\VarsHookSet'] ?? $this->getVarsHookSetService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\MenuPageAttachers\\BottomMenuPageAttacher'] ?? $this->getBottomMenuPageAttacherService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\MenuPageAttachers\\TopMenuPageAttacher'] ?? $this->getTopMenuPageAttacherService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\MenuPages\\AboutMenuPage'] ?? $this->getAboutMenuPageService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\MenuPages\\GraphQLVoyagerMenuPage'] ?? $this->getGraphQLVoyagerMenuPageService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\MenuPages\\GraphiQLMenuPage'] ?? $this->getGraphiQLMenuPageService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\MenuPages\\ModuleDocumentationMenuPage'] ?? $this->getModuleDocumentationMenuPageService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\MenuPages\\ModulesMenuPage'] ?? $this->getModulesMenuPageService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\MenuPages\\ReleaseNotesAboutMenuPage'] ?? $this->getReleaseNotesAboutMenuPageService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\MenuPages\\SettingsMenuPage'] ?? $this->getSettingsMenuPageService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Menus\\PluginMenu'] ?? $this->getPluginMenuService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfiguratorExecuters\\EditingPersistedQueryEndpointSchemaConfiguratorExecuter'] ?? $this->getEditingPersistedQueryEndpointSchemaConfiguratorExecuterService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfiguratorExecuters\\EndpointSchemaConfiguratorExecuter'] ?? $this->getEndpointSchemaConfiguratorExecuterService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\SchemaConfiguratorExecuters\\PersistedQueryEndpointSchemaConfiguratorExecuter'] ?? $this->getPersistedQueryEndpointSchemaConfiguratorExecuterService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Taxonomies\\GraphQLQueryTaxonomy'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Taxonomies\\GraphQLQueryTaxonomy'] = new \GraphQLAPI\GraphQLAPI\Services\Taxonomies\GraphQLQueryTaxonomy())));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\ConditionalOnContext\\Admin\\Services\\Clients\\AdminGraphiQLWithExplorerClient'] ?? $this->getAdminGraphiQLWithExplorerClientService()));
        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\ConditionalOnContext\\Admin\\Services\\EndpointResolvers\\AdminEndpointResolver'] ?? $this->getAdminEndpointResolverService()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\RoutingWP\Hooks\SetupCortexHookSet' shared autowired service.
     *
     * @return \PoP\RoutingWP\Hooks\SetupCortexHookSet
     */
    protected function getSetupCortexHookSetService()
    {
        return $this->services['PoP\\RoutingWP\\Hooks\\SetupCortexHookSet'] = new \PoP\RoutingWP\Hooks\SetupCortexHookSet(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\InstanceManager())));
    }

    /**
     * Gets the public 'PoP\Routing\RoutingManagerInterface' shared autowired service.
     *
     * @return \PoP\RoutingWP\RoutingManager
     */
    protected function getRoutingManagerInterfaceService()
    {
        return $this->services['PoP\\Routing\\RoutingManagerInterface'] = new \PoP\RoutingWP\RoutingManager(($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())));
    }

    /**
     * Gets the public 'PoP\Translation\TranslationAPIInterface' shared autowired service.
     *
     * @return \PoP\TranslationWP\TranslationAPI
     */
    protected function getTranslationAPIInterfaceService()
    {
        return $this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI();
    }

    /**
     * Gets the public 'memory_cache' shared autowired service.
     *
     * @return \PoP\Engine\Cache\Cache
     */
    protected function getMemoryCacheService()
    {
        return $this->services['memory_cache'] = new \PoP\Engine\Cache\Cache(($this->services['memory_cache_item_pool'] ?? ($this->services['memory_cache_item_pool'] = new \PrefixedByPoP\Symfony\Component\Cache\Adapter\ArrayAdapter())), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\ModelInstance\\ModelInstanceInterface'] ?? $this->getModelInstanceInterfaceService()));
    }

    /**
     * Gets the public 'memory_cache_item_pool' shared autowired service.
     *
     * @return \PrefixedByPoP\Symfony\Component\Cache\Adapter\ArrayAdapter
     */
    protected function getMemoryCacheItemPoolService()
    {
        return $this->services['memory_cache_item_pool'] = new \PrefixedByPoP\Symfony\Component\Cache\Adapter\ArrayAdapter();
    }

    /**
     * Gets the public 'persistent_cache' shared autowired service.
     *
     * @return \PoP\Engine\Cache\Cache
     */
    protected function getPersistentCacheService()
    {
        return $this->services['persistent_cache'] = new \PoP\Engine\Cache\Cache(($this->services['persistent_cache_item_pool'] ?? $this->getPersistentCacheItemPoolService()), ($this->services['PoP\\Hooks\\HooksAPIInterface'] ?? ($this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI())), ($this->services['PoP\\ComponentModel\\ModelInstance\\ModelInstanceInterface'] ?? $this->getModelInstanceInterfaceService()));
    }

    /**
     * Gets the public 'persistent_cache_item_pool' shared autowired service.
     *
     * @return \PrefixedByPoP\Symfony\Component\Cache\Adapter\FilesystemAdapter
     */
    protected function getPersistentCacheItemPoolService()
    {
        return $this->services['persistent_cache_item_pool'] = new \PrefixedByPoP\Symfony\Component\Cache\Adapter\FilesystemAdapter(($this->services['PoP\\ComponentModel\\Cache\\CacheConfigurationManagerInterface'] ?? $this->getCacheConfigurationManagerInterfaceService())->getNamespace(), 0, ($this->services['PoP\\ComponentModel\\Cache\\CacheConfigurationManagerInterface'] ?? $this->getCacheConfigurationManagerInterfaceService())->getDirectory());
    }
}
