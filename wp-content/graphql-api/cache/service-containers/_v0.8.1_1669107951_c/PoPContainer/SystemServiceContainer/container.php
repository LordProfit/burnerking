<?php

namespace PoPContainer;

use PrefixedByPoP\Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use PrefixedByPoP\Symfony\Component\DependencyInjection\ContainerInterface;
use PrefixedByPoP\Symfony\Component\DependencyInjection\Container;
use PrefixedByPoP\Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use PrefixedByPoP\Symfony\Component\DependencyInjection\Exception\LogicException;
use PrefixedByPoP\Symfony\Component\DependencyInjection\Exception\RuntimeException;
use PrefixedByPoP\Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;
use PrefixedByPoP\Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class SystemServiceContainer extends Container
{
    protected $parameters = [];

    public function __construct()
    {
        $this->services = $this->privates = [];
        $this->methodMap = [
            'GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\ConfigureAccessControlCompilerPass' => 'getConfigureAccessControlCompilerPassService',
            'GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterAccessControlRuleBlockCompilerPass' => 'getRegisterAccessControlRuleBlockCompilerPassService',
            'GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterCustomEndpointAnnotatorCompilerPass' => 'getRegisterCustomEndpointAnnotatorCompilerPassService',
            'GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterCustomEndpointExecuterCompilerPass' => 'getRegisterCustomEndpointExecuterCompilerPassService',
            'GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterCustomPostTypeCompilerPass' => 'getRegisterCustomPostTypeCompilerPassService',
            'GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterEndpointBlockCompilerPass' => 'getRegisterEndpointBlockCompilerPassService',
            'GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterEndpointSchemaConfigurationExecuterCompilerPass' => 'getRegisterEndpointSchemaConfigurationExecuterCompilerPassService',
            'GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterModuleTypeResolverCompilerPass' => 'getRegisterModuleTypeResolverCompilerPassService',
            'GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterPersistedQueryEndpointAnnotatorCompilerPass' => 'getRegisterPersistedQueryEndpointAnnotatorCompilerPassService',
            'GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterPersistedQueryEndpointBlockCompilerPass' => 'getRegisterPersistedQueryEndpointBlockCompilerPassService',
            'GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterPersistedQueryEndpointExecuterCompilerPass' => 'getRegisterPersistedQueryEndpointExecuterCompilerPassService',
            'GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterPersistedQueryEndpointSchemaConfigurationExecuterCompilerPass' => 'getRegisterPersistedQueryEndpointSchemaConfigurationExecuterCompilerPassService',
            'GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterSchemaConfigBlockCompilerPass' => 'getRegisterSchemaConfigBlockCompilerPassService',
            'GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterUserAuthorizationSchemeCompilerPass' => 'getRegisterUserAuthorizationSchemeCompilerPassService',
            'GraphQLAPI\\GraphQLAPI\\Container\\HybridCompilerPasses\\RegisterModuleResolverCompilerPass' => 'getRegisterModuleResolverCompilerPassService',
            'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\AccessControlFunctionalityModuleResolver' => 'getAccessControlFunctionalityModuleResolverService',
            'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\ClientFunctionalityModuleResolver' => 'getClientFunctionalityModuleResolverService',
            'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\EndpointFunctionalityModuleResolver' => 'getEndpointFunctionalityModuleResolverService',
            'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\MetaSchemaTypeModuleResolver' => 'getMetaSchemaTypeModuleResolverService',
            'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\MutationSchemaTypeModuleResolver' => 'getMutationSchemaTypeModuleResolverService',
            'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\PerformanceFunctionalityModuleResolver' => 'getPerformanceFunctionalityModuleResolverService',
            'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\PluginManagementFunctionalityModuleResolver' => 'getPluginManagementFunctionalityModuleResolverService',
            'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\SchemaConfigurationFunctionalityModuleResolver' => 'getSchemaConfigurationFunctionalityModuleResolverService',
            'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\SchemaTypeModuleResolver' => 'getSchemaTypeModuleResolverService',
            'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\UserInterfaceFunctionalityModuleResolver' => 'getUserInterfaceFunctionalityModuleResolverService',
            'GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface' => 'getModuleRegistryInterfaceService',
            'GraphQLAPI\\GraphQLAPI\\Registries\\UserAuthorizationSchemeRegistryInterface' => 'getUserAuthorizationSchemeRegistryInterfaceService',
            'GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface' => 'getUserAuthorizationInterfaceService',
            'GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationSchemes\\ManageOptionsUserAuthorizationScheme' => 'getManageOptionsUserAuthorizationSchemeService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\EndpointHelpers' => 'getEndpointHelpersService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\MenuPageHelper' => 'getMenuPageHelperService',
            'GraphQLAPI\\GraphQLAPI\\Services\\MenuPages\\ModulesMenuPage' => 'getModulesMenuPageService',
            'GraphQLAPI\\GraphQLAPI\\Services\\Menus\\PluginMenu' => 'getPluginMenuService',
            'GraphQLByPoP\\GraphQLServer\\Container\\CompilerPasses\\ConfigureGraphQLPersistedQueryCompilerPass' => 'getConfigureGraphQLPersistedQueryCompilerPassService',
            'PoP\\ComponentModel\\Container\\CompilerPasses\\AfterBootAttachExtensionCompilerPass' => 'getAfterBootAttachExtensionCompilerPassService',
            'PoP\\ComponentModel\\Container\\CompilerPasses\\BeforeBootAttachExtensionCompilerPass' => 'getBeforeBootAttachExtensionCompilerPassService',
            'PoP\\ComponentModel\\Container\\CompilerPasses\\BootAttachExtensionCompilerPass' => 'getBootAttachExtensionCompilerPassService',
            'PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterDataStructureFormatterCompilerPass' => 'getRegisterDataStructureFormatterCompilerPassService',
            'PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterDirectiveResolverCompilerPass' => 'getRegisterDirectiveResolverCompilerPassService',
            'PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterFieldInterfaceResolverCompilerPass' => 'getRegisterFieldInterfaceResolverCompilerPassService',
            'PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterMandatoryDirectiveServiceTagCompilerPass' => 'getRegisterMandatoryDirectiveServiceTagCompilerPassService',
            'PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterModuleFilterCompilerPass' => 'getRegisterModuleFilterCompilerPassService',
            'PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterTypeResolverCompilerPass' => 'getRegisterTypeResolverCompilerPassService',
            'PoP\\ComponentModel\\Instances\\InstanceManagerInterface' => 'getInstanceManagerInterfaceService',
            'PoP\\Hooks\\HooksAPIInterface' => 'getHooksAPIInterfaceService',
            'PoP\\ModuleRouting\\Container\\CompilerPasses\\RegisterRouteModuleProcessorCompilerPass' => 'getRegisterRouteModuleProcessorCompilerPassService',
            'PoP\\Root\\Container\\HybridCompilerPasses\\AutomaticallyInstantiatedServiceCompilerPass' => 'getAutomaticallyInstantiatedServiceCompilerPassService',
            'PoP\\Root\\Container\\ServiceInstantiatorInterface' => 'getServiceInstantiatorInterfaceService',
            'PoP\\Root\\Registries\\CompilerPassRegistryInterface' => 'getCompilerPassRegistryInterfaceService',
            'PoP\\Translation\\TranslationAPIInterface' => 'getTranslationAPIInterfaceService',
        ];

        $this->aliases = [];
    }

    public function compile(): void
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled(): bool
    {
        return true;
    }

    public function getRemovedIds(): array
    {
        return [
            'GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationSchemes\\DefaultUserAuthorizationSchemeServiceTagInterface' => true,
            'GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationSchemes\\UserAuthorizationSchemeInterface' => true,
            'PrefixedByPoP\\Psr\\Container\\ContainerInterface' => true,
            'PrefixedByPoP\\Symfony\\Component\\DependencyInjection\\ContainerInterface' => true,
        ];
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Container\CompilerPasses\ConfigureAccessControlCompilerPass' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\ConfigureAccessControlCompilerPass
     */
    protected function getConfigureAccessControlCompilerPassService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\ConfigureAccessControlCompilerPass'] = new \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\ConfigureAccessControlCompilerPass();
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterAccessControlRuleBlockCompilerPass' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterAccessControlRuleBlockCompilerPass
     */
    protected function getRegisterAccessControlRuleBlockCompilerPassService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterAccessControlRuleBlockCompilerPass'] = new \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterAccessControlRuleBlockCompilerPass();
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterCustomEndpointAnnotatorCompilerPass' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterCustomEndpointAnnotatorCompilerPass
     */
    protected function getRegisterCustomEndpointAnnotatorCompilerPassService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterCustomEndpointAnnotatorCompilerPass'] = new \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterCustomEndpointAnnotatorCompilerPass();
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterCustomEndpointExecuterCompilerPass' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterCustomEndpointExecuterCompilerPass
     */
    protected function getRegisterCustomEndpointExecuterCompilerPassService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterCustomEndpointExecuterCompilerPass'] = new \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterCustomEndpointExecuterCompilerPass();
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterCustomPostTypeCompilerPass' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterCustomPostTypeCompilerPass
     */
    protected function getRegisterCustomPostTypeCompilerPassService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterCustomPostTypeCompilerPass'] = new \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterCustomPostTypeCompilerPass();
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterEndpointBlockCompilerPass' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterEndpointBlockCompilerPass
     */
    protected function getRegisterEndpointBlockCompilerPassService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterEndpointBlockCompilerPass'] = new \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterEndpointBlockCompilerPass();
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterEndpointSchemaConfigurationExecuterCompilerPass' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterEndpointSchemaConfigurationExecuterCompilerPass
     */
    protected function getRegisterEndpointSchemaConfigurationExecuterCompilerPassService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterEndpointSchemaConfigurationExecuterCompilerPass'] = new \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterEndpointSchemaConfigurationExecuterCompilerPass();
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterModuleTypeResolverCompilerPass' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterModuleTypeResolverCompilerPass
     */
    protected function getRegisterModuleTypeResolverCompilerPassService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterModuleTypeResolverCompilerPass'] = new \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterModuleTypeResolverCompilerPass();
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterPersistedQueryEndpointAnnotatorCompilerPass' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterPersistedQueryEndpointAnnotatorCompilerPass
     */
    protected function getRegisterPersistedQueryEndpointAnnotatorCompilerPassService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterPersistedQueryEndpointAnnotatorCompilerPass'] = new \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterPersistedQueryEndpointAnnotatorCompilerPass();
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterPersistedQueryEndpointBlockCompilerPass' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterPersistedQueryEndpointBlockCompilerPass
     */
    protected function getRegisterPersistedQueryEndpointBlockCompilerPassService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterPersistedQueryEndpointBlockCompilerPass'] = new \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterPersistedQueryEndpointBlockCompilerPass();
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterPersistedQueryEndpointExecuterCompilerPass' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterPersistedQueryEndpointExecuterCompilerPass
     */
    protected function getRegisterPersistedQueryEndpointExecuterCompilerPassService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterPersistedQueryEndpointExecuterCompilerPass'] = new \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterPersistedQueryEndpointExecuterCompilerPass();
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterPersistedQueryEndpointSchemaConfigurationExecuterCompilerPass' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterPersistedQueryEndpointSchemaConfigurationExecuterCompilerPass
     */
    protected function getRegisterPersistedQueryEndpointSchemaConfigurationExecuterCompilerPassService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterPersistedQueryEndpointSchemaConfigurationExecuterCompilerPass'] = new \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterPersistedQueryEndpointSchemaConfigurationExecuterCompilerPass();
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterSchemaConfigBlockCompilerPass' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterSchemaConfigBlockCompilerPass
     */
    protected function getRegisterSchemaConfigBlockCompilerPassService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterSchemaConfigBlockCompilerPass'] = new \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterSchemaConfigBlockCompilerPass();
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterUserAuthorizationSchemeCompilerPass' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterUserAuthorizationSchemeCompilerPass
     */
    protected function getRegisterUserAuthorizationSchemeCompilerPassService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterUserAuthorizationSchemeCompilerPass'] = new \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterUserAuthorizationSchemeCompilerPass();
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Container\HybridCompilerPasses\RegisterModuleResolverCompilerPass' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Container\HybridCompilerPasses\RegisterModuleResolverCompilerPass
     */
    protected function getRegisterModuleResolverCompilerPassService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Container\\HybridCompilerPasses\\RegisterModuleResolverCompilerPass'] = new \GraphQLAPI\GraphQLAPI\Container\HybridCompilerPasses\RegisterModuleResolverCompilerPass();
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\ModuleResolvers\AccessControlFunctionalityModuleResolver' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\ModuleResolvers\AccessControlFunctionalityModuleResolver
     */
    protected function getAccessControlFunctionalityModuleResolverService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\AccessControlFunctionalityModuleResolver'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\AccessControlFunctionalityModuleResolver'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\AccessControlFunctionalityModuleResolver'] = new \GraphQLAPI\GraphQLAPI\ModuleResolvers\AccessControlFunctionalityModuleResolver(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\SystemInstanceManager())), $a, ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\ModuleResolvers\ClientFunctionalityModuleResolver' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\ModuleResolvers\ClientFunctionalityModuleResolver
     */
    protected function getClientFunctionalityModuleResolverService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\ClientFunctionalityModuleResolver'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\ClientFunctionalityModuleResolver'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\ClientFunctionalityModuleResolver'] = new \GraphQLAPI\GraphQLAPI\ModuleResolvers\ClientFunctionalityModuleResolver(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\SystemInstanceManager())), $a, ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\ModuleResolvers\EndpointFunctionalityModuleResolver' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\ModuleResolvers\EndpointFunctionalityModuleResolver
     */
    protected function getEndpointFunctionalityModuleResolverService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\EndpointFunctionalityModuleResolver'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\EndpointFunctionalityModuleResolver'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\EndpointFunctionalityModuleResolver'] = new \GraphQLAPI\GraphQLAPI\ModuleResolvers\EndpointFunctionalityModuleResolver(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\SystemInstanceManager())), $a, ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\ModuleResolvers\MetaSchemaTypeModuleResolver' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\ModuleResolvers\MetaSchemaTypeModuleResolver
     */
    protected function getMetaSchemaTypeModuleResolverService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\MetaSchemaTypeModuleResolver'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\MetaSchemaTypeModuleResolver'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\MetaSchemaTypeModuleResolver'] = new \GraphQLAPI\GraphQLAPI\ModuleResolvers\MetaSchemaTypeModuleResolver(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\SystemInstanceManager())), $a, ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), NULL, NULL, NULL, NULL, NULL);
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\ModuleResolvers\MutationSchemaTypeModuleResolver' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\ModuleResolvers\MutationSchemaTypeModuleResolver
     */
    protected function getMutationSchemaTypeModuleResolverService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\MutationSchemaTypeModuleResolver'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\MutationSchemaTypeModuleResolver'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\MutationSchemaTypeModuleResolver'] = new \GraphQLAPI\GraphQLAPI\ModuleResolvers\MutationSchemaTypeModuleResolver(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\SystemInstanceManager())), $a, ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\ModuleResolvers\PerformanceFunctionalityModuleResolver' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\ModuleResolvers\PerformanceFunctionalityModuleResolver
     */
    protected function getPerformanceFunctionalityModuleResolverService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\PerformanceFunctionalityModuleResolver'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\PerformanceFunctionalityModuleResolver'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\PerformanceFunctionalityModuleResolver'] = new \GraphQLAPI\GraphQLAPI\ModuleResolvers\PerformanceFunctionalityModuleResolver(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\SystemInstanceManager())), $a, ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\ModuleResolvers\PluginManagementFunctionalityModuleResolver' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\ModuleResolvers\PluginManagementFunctionalityModuleResolver
     */
    protected function getPluginManagementFunctionalityModuleResolverService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\PluginManagementFunctionalityModuleResolver'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\PluginManagementFunctionalityModuleResolver'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\PluginManagementFunctionalityModuleResolver'] = new \GraphQLAPI\GraphQLAPI\ModuleResolvers\PluginManagementFunctionalityModuleResolver(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\SystemInstanceManager())), $a, ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\ModuleResolvers\SchemaConfigurationFunctionalityModuleResolver' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\ModuleResolvers\SchemaConfigurationFunctionalityModuleResolver
     */
    protected function getSchemaConfigurationFunctionalityModuleResolverService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\SchemaConfigurationFunctionalityModuleResolver'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\SchemaConfigurationFunctionalityModuleResolver'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\SchemaConfigurationFunctionalityModuleResolver'] = new \GraphQLAPI\GraphQLAPI\ModuleResolvers\SchemaConfigurationFunctionalityModuleResolver(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\SystemInstanceManager())), $a, ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\ModuleResolvers\SchemaTypeModuleResolver' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\ModuleResolvers\SchemaTypeModuleResolver
     */
    protected function getSchemaTypeModuleResolverService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\SchemaTypeModuleResolver'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\SchemaTypeModuleResolver'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\SchemaTypeModuleResolver'] = new \GraphQLAPI\GraphQLAPI\ModuleResolvers\SchemaTypeModuleResolver(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\SystemInstanceManager())), $a, ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\ModuleResolvers\UserInterfaceFunctionalityModuleResolver' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\ModuleResolvers\UserInterfaceFunctionalityModuleResolver
     */
    protected function getUserInterfaceFunctionalityModuleResolverService()
    {
        $a = ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService());

        if (isset($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\UserInterfaceFunctionalityModuleResolver'])) {
            return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\UserInterfaceFunctionalityModuleResolver'];
        }

        return $this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\UserInterfaceFunctionalityModuleResolver'] = new \GraphQLAPI\GraphQLAPI\ModuleResolvers\UserInterfaceFunctionalityModuleResolver(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\SystemInstanceManager())), $a, ($this->services['PoP\\Translation\\TranslationAPIInterface'] ?? ($this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI())));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Registries\ModuleRegistryInterface' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Registries\ModuleRegistry
     */
    protected function getModuleRegistryInterfaceService()
    {
        $this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] = $instance = new \GraphQLAPI\GraphQLAPI\Registries\ModuleRegistry();

        $instance->addModuleResolver(($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\AccessControlFunctionalityModuleResolver'] ?? $this->getAccessControlFunctionalityModuleResolverService()), 'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\AccessControlFunctionalityModuleResolver');
        $instance->addModuleResolver(($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\ClientFunctionalityModuleResolver'] ?? $this->getClientFunctionalityModuleResolverService()), 'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\ClientFunctionalityModuleResolver');
        $instance->addModuleResolver(($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\EndpointFunctionalityModuleResolver'] ?? $this->getEndpointFunctionalityModuleResolverService()), 'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\EndpointFunctionalityModuleResolver');
        $instance->addModuleResolver(($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\MetaSchemaTypeModuleResolver'] ?? $this->getMetaSchemaTypeModuleResolverService()), 'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\MetaSchemaTypeModuleResolver');
        $instance->addModuleResolver(($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\MutationSchemaTypeModuleResolver'] ?? $this->getMutationSchemaTypeModuleResolverService()), 'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\MutationSchemaTypeModuleResolver');
        $instance->addModuleResolver(($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\PerformanceFunctionalityModuleResolver'] ?? $this->getPerformanceFunctionalityModuleResolverService()), 'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\PerformanceFunctionalityModuleResolver');
        $instance->addModuleResolver(($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\PluginManagementFunctionalityModuleResolver'] ?? $this->getPluginManagementFunctionalityModuleResolverService()), 'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\PluginManagementFunctionalityModuleResolver');
        $instance->addModuleResolver(($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\SchemaConfigurationFunctionalityModuleResolver'] ?? $this->getSchemaConfigurationFunctionalityModuleResolverService()), 'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\SchemaConfigurationFunctionalityModuleResolver');
        $instance->addModuleResolver(($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\SchemaTypeModuleResolver'] ?? $this->getSchemaTypeModuleResolverService()), 'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\SchemaTypeModuleResolver');
        $instance->addModuleResolver(($this->services['GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\UserInterfaceFunctionalityModuleResolver'] ?? $this->getUserInterfaceFunctionalityModuleResolverService()), 'GraphQLAPI\\GraphQLAPI\\ModuleResolvers\\UserInterfaceFunctionalityModuleResolver');

        return $instance;
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Registries\UserAuthorizationSchemeRegistryInterface' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Registries\UserAuthorizationSchemeRegistry
     */
    protected function getUserAuthorizationSchemeRegistryInterfaceService()
    {
        $this->services['GraphQLAPI\\GraphQLAPI\\Registries\\UserAuthorizationSchemeRegistryInterface'] = $instance = new \GraphQLAPI\GraphQLAPI\Registries\UserAuthorizationSchemeRegistry();

        $instance->addUserAuthorizationScheme(($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationSchemes\\ManageOptionsUserAuthorizationScheme'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationSchemes\\ManageOptionsUserAuthorizationScheme'] = new \GraphQLAPI\GraphQLAPI\Security\UserAuthorizationSchemes\ManageOptionsUserAuthorizationScheme())), 'GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationSchemes\\ManageOptionsUserAuthorizationScheme');

        return $instance;
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Security\UserAuthorizationInterface' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Security\UserAuthorization
     */
    protected function getUserAuthorizationInterfaceService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface'] = new \GraphQLAPI\GraphQLAPI\Security\UserAuthorization(($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\UserAuthorizationSchemeRegistryInterface'] ?? $this->getUserAuthorizationSchemeRegistryInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Security\UserAuthorizationSchemes\ManageOptionsUserAuthorizationScheme' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Security\UserAuthorizationSchemes\ManageOptionsUserAuthorizationScheme
     */
    protected function getManageOptionsUserAuthorizationSchemeService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationSchemes\\ManageOptionsUserAuthorizationScheme'] = new \GraphQLAPI\GraphQLAPI\Security\UserAuthorizationSchemes\ManageOptionsUserAuthorizationScheme();
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Helpers\EndpointHelpers' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Helpers\EndpointHelpers
     */
    protected function getEndpointHelpersService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\EndpointHelpers'] = new \GraphQLAPI\GraphQLAPI\Services\Helpers\EndpointHelpers(($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Menus\\PluginMenu'] ?? $this->getPluginMenuService()), ($this->services['GraphQLAPI\\GraphQLAPI\\Registries\\ModuleRegistryInterface'] ?? $this->getModuleRegistryInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Helpers\MenuPageHelper' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Helpers\MenuPageHelper
     */
    protected function getMenuPageHelperService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\MenuPageHelper'] = new \GraphQLAPI\GraphQLAPI\Services\Helpers\MenuPageHelper();
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\MenuPages\ModulesMenuPage' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\MenuPages\ModulesMenuPage
     */
    protected function getModulesMenuPageService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\MenuPages\\ModulesMenuPage'] = new \GraphQLAPI\GraphQLAPI\Services\MenuPages\ModulesMenuPage(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\SystemInstanceManager())), ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\MenuPageHelper'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\MenuPageHelper'] = new \GraphQLAPI\GraphQLAPI\Services\Helpers\MenuPageHelper())), ($this->services['GraphQLAPI\\GraphQLAPI\\Services\\Helpers\\EndpointHelpers'] ?? $this->getEndpointHelpersService()));
    }

    /**
     * Gets the public 'GraphQLAPI\GraphQLAPI\Services\Menus\PluginMenu' shared autowired service.
     *
     * @return \GraphQLAPI\GraphQLAPI\Services\Menus\PluginMenu
     */
    protected function getPluginMenuService()
    {
        return $this->services['GraphQLAPI\\GraphQLAPI\\Services\\Menus\\PluginMenu'] = new \GraphQLAPI\GraphQLAPI\Services\Menus\PluginMenu(($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] ?? ($this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\SystemInstanceManager())), ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationInterface'] ?? $this->getUserAuthorizationInterfaceService()));
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\Container\CompilerPasses\ConfigureGraphQLPersistedQueryCompilerPass' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\Container\CompilerPasses\ConfigureGraphQLPersistedQueryCompilerPass
     */
    protected function getConfigureGraphQLPersistedQueryCompilerPassService()
    {
        return $this->services['GraphQLByPoP\\GraphQLServer\\Container\\CompilerPasses\\ConfigureGraphQLPersistedQueryCompilerPass'] = new \GraphQLByPoP\GraphQLServer\Container\CompilerPasses\ConfigureGraphQLPersistedQueryCompilerPass();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Container\CompilerPasses\AfterBootAttachExtensionCompilerPass' shared autowired service.
     *
     * @return \PoP\ComponentModel\Container\CompilerPasses\AfterBootAttachExtensionCompilerPass
     */
    protected function getAfterBootAttachExtensionCompilerPassService()
    {
        return $this->services['PoP\\ComponentModel\\Container\\CompilerPasses\\AfterBootAttachExtensionCompilerPass'] = new \PoP\ComponentModel\Container\CompilerPasses\AfterBootAttachExtensionCompilerPass();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Container\CompilerPasses\BeforeBootAttachExtensionCompilerPass' shared autowired service.
     *
     * @return \PoP\ComponentModel\Container\CompilerPasses\BeforeBootAttachExtensionCompilerPass
     */
    protected function getBeforeBootAttachExtensionCompilerPassService()
    {
        return $this->services['PoP\\ComponentModel\\Container\\CompilerPasses\\BeforeBootAttachExtensionCompilerPass'] = new \PoP\ComponentModel\Container\CompilerPasses\BeforeBootAttachExtensionCompilerPass();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Container\CompilerPasses\BootAttachExtensionCompilerPass' shared autowired service.
     *
     * @return \PoP\ComponentModel\Container\CompilerPasses\BootAttachExtensionCompilerPass
     */
    protected function getBootAttachExtensionCompilerPassService()
    {
        return $this->services['PoP\\ComponentModel\\Container\\CompilerPasses\\BootAttachExtensionCompilerPass'] = new \PoP\ComponentModel\Container\CompilerPasses\BootAttachExtensionCompilerPass();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Container\CompilerPasses\RegisterDataStructureFormatterCompilerPass' shared autowired service.
     *
     * @return \PoP\ComponentModel\Container\CompilerPasses\RegisterDataStructureFormatterCompilerPass
     */
    protected function getRegisterDataStructureFormatterCompilerPassService()
    {
        return $this->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterDataStructureFormatterCompilerPass'] = new \PoP\ComponentModel\Container\CompilerPasses\RegisterDataStructureFormatterCompilerPass();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Container\CompilerPasses\RegisterDirectiveResolverCompilerPass' shared autowired service.
     *
     * @return \PoP\ComponentModel\Container\CompilerPasses\RegisterDirectiveResolverCompilerPass
     */
    protected function getRegisterDirectiveResolverCompilerPassService()
    {
        return $this->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterDirectiveResolverCompilerPass'] = new \PoP\ComponentModel\Container\CompilerPasses\RegisterDirectiveResolverCompilerPass();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Container\CompilerPasses\RegisterFieldInterfaceResolverCompilerPass' shared autowired service.
     *
     * @return \PoP\ComponentModel\Container\CompilerPasses\RegisterFieldInterfaceResolverCompilerPass
     */
    protected function getRegisterFieldInterfaceResolverCompilerPassService()
    {
        return $this->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterFieldInterfaceResolverCompilerPass'] = new \PoP\ComponentModel\Container\CompilerPasses\RegisterFieldInterfaceResolverCompilerPass();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Container\CompilerPasses\RegisterMandatoryDirectiveServiceTagCompilerPass' shared autowired service.
     *
     * @return \PoP\ComponentModel\Container\CompilerPasses\RegisterMandatoryDirectiveServiceTagCompilerPass
     */
    protected function getRegisterMandatoryDirectiveServiceTagCompilerPassService()
    {
        return $this->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterMandatoryDirectiveServiceTagCompilerPass'] = new \PoP\ComponentModel\Container\CompilerPasses\RegisterMandatoryDirectiveServiceTagCompilerPass();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Container\CompilerPasses\RegisterModuleFilterCompilerPass' shared autowired service.
     *
     * @return \PoP\ComponentModel\Container\CompilerPasses\RegisterModuleFilterCompilerPass
     */
    protected function getRegisterModuleFilterCompilerPassService()
    {
        return $this->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterModuleFilterCompilerPass'] = new \PoP\ComponentModel\Container\CompilerPasses\RegisterModuleFilterCompilerPass();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Container\CompilerPasses\RegisterTypeResolverCompilerPass' shared autowired service.
     *
     * @return \PoP\ComponentModel\Container\CompilerPasses\RegisterTypeResolverCompilerPass
     */
    protected function getRegisterTypeResolverCompilerPassService()
    {
        return $this->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterTypeResolverCompilerPass'] = new \PoP\ComponentModel\Container\CompilerPasses\RegisterTypeResolverCompilerPass();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Instances\InstanceManagerInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\Instances\SystemInstanceManager
     */
    protected function getInstanceManagerInterfaceService()
    {
        return $this->services['PoP\\ComponentModel\\Instances\\InstanceManagerInterface'] = new \PoP\ComponentModel\Instances\SystemInstanceManager();
    }

    /**
     * Gets the public 'PoP\Hooks\HooksAPIInterface' shared autowired service.
     *
     * @return \PoP\HooksWP\HooksAPI
     */
    protected function getHooksAPIInterfaceService()
    {
        return $this->services['PoP\\Hooks\\HooksAPIInterface'] = new \PoP\HooksWP\HooksAPI();
    }

    /**
     * Gets the public 'PoP\ModuleRouting\Container\CompilerPasses\RegisterRouteModuleProcessorCompilerPass' shared autowired service.
     *
     * @return \PoP\ModuleRouting\Container\CompilerPasses\RegisterRouteModuleProcessorCompilerPass
     */
    protected function getRegisterRouteModuleProcessorCompilerPassService()
    {
        return $this->services['PoP\\ModuleRouting\\Container\\CompilerPasses\\RegisterRouteModuleProcessorCompilerPass'] = new \PoP\ModuleRouting\Container\CompilerPasses\RegisterRouteModuleProcessorCompilerPass();
    }

    /**
     * Gets the public 'PoP\Root\Container\HybridCompilerPasses\AutomaticallyInstantiatedServiceCompilerPass' shared autowired service.
     *
     * @return \PoP\Root\Container\HybridCompilerPasses\AutomaticallyInstantiatedServiceCompilerPass
     */
    protected function getAutomaticallyInstantiatedServiceCompilerPassService()
    {
        return $this->services['PoP\\Root\\Container\\HybridCompilerPasses\\AutomaticallyInstantiatedServiceCompilerPass'] = new \PoP\Root\Container\HybridCompilerPasses\AutomaticallyInstantiatedServiceCompilerPass();
    }

    /**
     * Gets the public 'PoP\Root\Container\ServiceInstantiatorInterface' shared autowired service.
     *
     * @return \PoP\Root\Container\ServiceInstantiator
     */
    protected function getServiceInstantiatorInterfaceService()
    {
        $this->services['PoP\\Root\\Container\\ServiceInstantiatorInterface'] = $instance = new \PoP\Root\Container\ServiceInstantiator();

        $instance->addService(($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationSchemes\\ManageOptionsUserAuthorizationScheme'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Security\\UserAuthorizationSchemes\\ManageOptionsUserAuthorizationScheme'] = new \GraphQLAPI\GraphQLAPI\Security\UserAuthorizationSchemes\ManageOptionsUserAuthorizationScheme())));

        return $instance;
    }

    /**
     * Gets the public 'PoP\Root\Registries\CompilerPassRegistryInterface' shared autowired service.
     *
     * @return \PoP\Root\Registries\CompilerPassRegistry
     */
    protected function getCompilerPassRegistryInterfaceService()
    {
        $this->services['PoP\\Root\\Registries\\CompilerPassRegistryInterface'] = $instance = new \PoP\Root\Registries\CompilerPassRegistry();

        $instance->addCompilerPass(($this->services['PoP\\Root\\Container\\HybridCompilerPasses\\AutomaticallyInstantiatedServiceCompilerPass'] ?? ($this->services['PoP\\Root\\Container\\HybridCompilerPasses\\AutomaticallyInstantiatedServiceCompilerPass'] = new \PoP\Root\Container\HybridCompilerPasses\AutomaticallyInstantiatedServiceCompilerPass())), 'PoP\\Root\\Container\\HybridCompilerPasses\\AutomaticallyInstantiatedServiceCompilerPass');
        $instance->addCompilerPass(($this->services['PoP\\ModuleRouting\\Container\\CompilerPasses\\RegisterRouteModuleProcessorCompilerPass'] ?? ($this->services['PoP\\ModuleRouting\\Container\\CompilerPasses\\RegisterRouteModuleProcessorCompilerPass'] = new \PoP\ModuleRouting\Container\CompilerPasses\RegisterRouteModuleProcessorCompilerPass())), 'PoP\\ModuleRouting\\Container\\CompilerPasses\\RegisterRouteModuleProcessorCompilerPass');
        $instance->addCompilerPass(($this->services['PoP\\ComponentModel\\Container\\CompilerPasses\\AfterBootAttachExtensionCompilerPass'] ?? ($this->services['PoP\\ComponentModel\\Container\\CompilerPasses\\AfterBootAttachExtensionCompilerPass'] = new \PoP\ComponentModel\Container\CompilerPasses\AfterBootAttachExtensionCompilerPass())), 'PoP\\ComponentModel\\Container\\CompilerPasses\\AfterBootAttachExtensionCompilerPass');
        $instance->addCompilerPass(($this->services['PoP\\ComponentModel\\Container\\CompilerPasses\\BeforeBootAttachExtensionCompilerPass'] ?? ($this->services['PoP\\ComponentModel\\Container\\CompilerPasses\\BeforeBootAttachExtensionCompilerPass'] = new \PoP\ComponentModel\Container\CompilerPasses\BeforeBootAttachExtensionCompilerPass())), 'PoP\\ComponentModel\\Container\\CompilerPasses\\BeforeBootAttachExtensionCompilerPass');
        $instance->addCompilerPass(($this->services['PoP\\ComponentModel\\Container\\CompilerPasses\\BootAttachExtensionCompilerPass'] ?? ($this->services['PoP\\ComponentModel\\Container\\CompilerPasses\\BootAttachExtensionCompilerPass'] = new \PoP\ComponentModel\Container\CompilerPasses\BootAttachExtensionCompilerPass())), 'PoP\\ComponentModel\\Container\\CompilerPasses\\BootAttachExtensionCompilerPass');
        $instance->addCompilerPass(($this->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterDataStructureFormatterCompilerPass'] ?? ($this->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterDataStructureFormatterCompilerPass'] = new \PoP\ComponentModel\Container\CompilerPasses\RegisterDataStructureFormatterCompilerPass())), 'PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterDataStructureFormatterCompilerPass');
        $instance->addCompilerPass(($this->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterDirectiveResolverCompilerPass'] ?? ($this->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterDirectiveResolverCompilerPass'] = new \PoP\ComponentModel\Container\CompilerPasses\RegisterDirectiveResolverCompilerPass())), 'PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterDirectiveResolverCompilerPass');
        $instance->addCompilerPass(($this->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterFieldInterfaceResolverCompilerPass'] ?? ($this->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterFieldInterfaceResolverCompilerPass'] = new \PoP\ComponentModel\Container\CompilerPasses\RegisterFieldInterfaceResolverCompilerPass())), 'PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterFieldInterfaceResolverCompilerPass');
        $instance->addCompilerPass(($this->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterMandatoryDirectiveServiceTagCompilerPass'] ?? ($this->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterMandatoryDirectiveServiceTagCompilerPass'] = new \PoP\ComponentModel\Container\CompilerPasses\RegisterMandatoryDirectiveServiceTagCompilerPass())), 'PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterMandatoryDirectiveServiceTagCompilerPass');
        $instance->addCompilerPass(($this->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterModuleFilterCompilerPass'] ?? ($this->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterModuleFilterCompilerPass'] = new \PoP\ComponentModel\Container\CompilerPasses\RegisterModuleFilterCompilerPass())), 'PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterModuleFilterCompilerPass');
        $instance->addCompilerPass(($this->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterTypeResolverCompilerPass'] ?? ($this->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterTypeResolverCompilerPass'] = new \PoP\ComponentModel\Container\CompilerPasses\RegisterTypeResolverCompilerPass())), 'PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterTypeResolverCompilerPass');
        $instance->addCompilerPass(($this->services['GraphQLByPoP\\GraphQLServer\\Container\\CompilerPasses\\ConfigureGraphQLPersistedQueryCompilerPass'] ?? ($this->services['GraphQLByPoP\\GraphQLServer\\Container\\CompilerPasses\\ConfigureGraphQLPersistedQueryCompilerPass'] = new \GraphQLByPoP\GraphQLServer\Container\CompilerPasses\ConfigureGraphQLPersistedQueryCompilerPass())), 'GraphQLByPoP\\GraphQLServer\\Container\\CompilerPasses\\ConfigureGraphQLPersistedQueryCompilerPass');
        $instance->addCompilerPass(($this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\ConfigureAccessControlCompilerPass'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\ConfigureAccessControlCompilerPass'] = new \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\ConfigureAccessControlCompilerPass())), 'GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\ConfigureAccessControlCompilerPass');
        $instance->addCompilerPass(($this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterAccessControlRuleBlockCompilerPass'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterAccessControlRuleBlockCompilerPass'] = new \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterAccessControlRuleBlockCompilerPass())), 'GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterAccessControlRuleBlockCompilerPass');
        $instance->addCompilerPass(($this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterCustomEndpointAnnotatorCompilerPass'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterCustomEndpointAnnotatorCompilerPass'] = new \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterCustomEndpointAnnotatorCompilerPass())), 'GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterCustomEndpointAnnotatorCompilerPass');
        $instance->addCompilerPass(($this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterCustomEndpointExecuterCompilerPass'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterCustomEndpointExecuterCompilerPass'] = new \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterCustomEndpointExecuterCompilerPass())), 'GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterCustomEndpointExecuterCompilerPass');
        $instance->addCompilerPass(($this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterCustomPostTypeCompilerPass'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterCustomPostTypeCompilerPass'] = new \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterCustomPostTypeCompilerPass())), 'GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterCustomPostTypeCompilerPass');
        $instance->addCompilerPass(($this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterEndpointBlockCompilerPass'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterEndpointBlockCompilerPass'] = new \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterEndpointBlockCompilerPass())), 'GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterEndpointBlockCompilerPass');
        $instance->addCompilerPass(($this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterEndpointSchemaConfigurationExecuterCompilerPass'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterEndpointSchemaConfigurationExecuterCompilerPass'] = new \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterEndpointSchemaConfigurationExecuterCompilerPass())), 'GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterEndpointSchemaConfigurationExecuterCompilerPass');
        $instance->addCompilerPass(($this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterModuleTypeResolverCompilerPass'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterModuleTypeResolverCompilerPass'] = new \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterModuleTypeResolverCompilerPass())), 'GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterModuleTypeResolverCompilerPass');
        $instance->addCompilerPass(($this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterPersistedQueryEndpointAnnotatorCompilerPass'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterPersistedQueryEndpointAnnotatorCompilerPass'] = new \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterPersistedQueryEndpointAnnotatorCompilerPass())), 'GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterPersistedQueryEndpointAnnotatorCompilerPass');
        $instance->addCompilerPass(($this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterPersistedQueryEndpointBlockCompilerPass'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterPersistedQueryEndpointBlockCompilerPass'] = new \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterPersistedQueryEndpointBlockCompilerPass())), 'GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterPersistedQueryEndpointBlockCompilerPass');
        $instance->addCompilerPass(($this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterPersistedQueryEndpointExecuterCompilerPass'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterPersistedQueryEndpointExecuterCompilerPass'] = new \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterPersistedQueryEndpointExecuterCompilerPass())), 'GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterPersistedQueryEndpointExecuterCompilerPass');
        $instance->addCompilerPass(($this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterPersistedQueryEndpointSchemaConfigurationExecuterCompilerPass'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterPersistedQueryEndpointSchemaConfigurationExecuterCompilerPass'] = new \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterPersistedQueryEndpointSchemaConfigurationExecuterCompilerPass())), 'GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterPersistedQueryEndpointSchemaConfigurationExecuterCompilerPass');
        $instance->addCompilerPass(($this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterSchemaConfigBlockCompilerPass'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterSchemaConfigBlockCompilerPass'] = new \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterSchemaConfigBlockCompilerPass())), 'GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterSchemaConfigBlockCompilerPass');
        $instance->addCompilerPass(($this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterUserAuthorizationSchemeCompilerPass'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterUserAuthorizationSchemeCompilerPass'] = new \GraphQLAPI\GraphQLAPI\Container\CompilerPasses\RegisterUserAuthorizationSchemeCompilerPass())), 'GraphQLAPI\\GraphQLAPI\\Container\\CompilerPasses\\RegisterUserAuthorizationSchemeCompilerPass');
        $instance->addCompilerPass(($this->services['GraphQLAPI\\GraphQLAPI\\Container\\HybridCompilerPasses\\RegisterModuleResolverCompilerPass'] ?? ($this->services['GraphQLAPI\\GraphQLAPI\\Container\\HybridCompilerPasses\\RegisterModuleResolverCompilerPass'] = new \GraphQLAPI\GraphQLAPI\Container\HybridCompilerPasses\RegisterModuleResolverCompilerPass())), 'GraphQLAPI\\GraphQLAPI\\Container\\HybridCompilerPasses\\RegisterModuleResolverCompilerPass');

        return $instance;
    }

    /**
     * Gets the public 'PoP\Translation\TranslationAPIInterface' shared autowired service.
     *
     * @return \PoP\TranslationWP\TranslationAPI
     */
    protected function getTranslationAPIInterfaceService()
    {
        return $this->services['PoP\\Translation\\TranslationAPIInterface'] = new \PoP\TranslationWP\TranslationAPI();
    }
}
